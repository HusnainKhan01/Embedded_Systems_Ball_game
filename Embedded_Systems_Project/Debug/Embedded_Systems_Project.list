
Embedded_Systems_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  0800a378  0800a378  0001a378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b054  0800b054  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b054  0800b054  0001b054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b05c  0800b05c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b060  0800b060  0001b060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021bc  200001e8  0800b24c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023a4  0800b24c  000223a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f151  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022eb  00000000  00000000  0002f369  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00031658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00032578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ea9  00000000  00000000  000333a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b900  00000000  00000000  0004a251  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f1e9  00000000  00000000  00055b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4d3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dbc  00000000  00000000  000e4db8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a360 	.word	0x0800a360

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a360 	.word	0x0800a360

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <setUp>:

/**
 * set up the screen, set reset bit, clear the screen 
 * Initilization of the display screen
 */
void setUp() {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	// set the rest bit of the lcd
	set_Reset_Bit();
 8000f9c:	f000 f82e 	bl	8000ffc <set_Reset_Bit>
	clear_Screen();
 8000fa0:	f000 f8c6 	bl	8001130 <clear_Screen>

	// init display Array to 0
	init_DisplayArray();
 8000fa4:	f000 f8e2 	bl	800116c <init_DisplayArray>

	// set prev position to 0 as its the starting position
	prevPos.prev_Row = 0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <setUp+0x20>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
	prevPos.prev_Col = 0;
 8000fae:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <setUp+0x20>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000225c 	.word	0x2000225c

08000fbc <toggle_Enable_Lcd>:
 * used to toggle Enable lcd
 * which first set the enable
 * wait using getDelay and then
 * resent the enable
 */
void toggle_Enable_Lcd() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	set_Enable();
 8000fc0:	f000 f82c 	bl	800101c <set_Enable>
	getDelay();
 8000fc4:	f000 f806 	bl	8000fd4 <getDelay>
	reset_Enable();
 8000fc8:	f000 f838 	bl	800103c <reset_Enable>
	getDelay();
 8000fcc:	f000 f802 	bl	8000fd4 <getDelay>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <getDelay>:

/**
 * used to generate delay of 5 micro seconds using timer 10
 */
int getDelay() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim10);
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <getDelay+0x24>)
 8000fda:	f004 f99a 	bl	8005312 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim10, 0);  // set the counter value a 0
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <getDelay+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim10) < 5)
 8000fe6:	bf00      	nop
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <getDelay+0x24>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d9fa      	bls.n	8000fe8 <getDelay+0x14>
		;
}
 8000ff2:	bf00      	nop
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200022c0 	.word	0x200022c0

08000ffc <set_Reset_Bit>:

/**
 * Used to set the reset bit
 */
void set_Reset_Bit() {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	GPIOC->ODR |= 1 << RST_pos;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <set_Reset_Bit+0x1c>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <set_Reset_Bit+0x1c>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6153      	str	r3, [r2, #20]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40020800 	.word	0x40020800

0800101c <set_Enable>:

/**
 * used to set the enable
 * 0100
 */
void set_Enable() {
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	GPIOC->ODR |= 1 << E_pos;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <set_Enable+0x1c>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <set_Enable+0x1c>)
 8001026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102a:	6153      	str	r3, [r2, #20]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40020800 	.word	0x40020800

0800103c <reset_Enable>:

/**
 * reset enable to 0
 */
void reset_Enable() {
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~(1 << (E_pos));
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <reset_Enable+0x1c>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <reset_Enable+0x1c>)
 8001046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800104a:	6153      	str	r3, [r2, #20]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40020800 	.word	0x40020800

0800105c <turn_On_Screen>:

/**
 * Used to turn on screen, value for the data pins are defined in the constant
 * TURN_ON_SCREEN which is to be written on the data pins by OR operation
 */
void turn_On_Screen() {
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	GPIOC->ODR = (GPIOC->ODR & 0xFF00) | TURN_ON_SCREEEN;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <turn_On_Screen+0x20>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <turn_On_Screen+0x20>)
 800106a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800106e:	6153      	str	r3, [r2, #20]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40020800 	.word	0x40020800

08001080 <set_Control_Buss_To_Write>:

/**
 * Set the control buss to write
 */
void set_Control_Buss_To_Write() {
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	GPIOC->ODR |= 1 << DI_pos;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <set_Control_Buss_To_Write+0x28>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <set_Control_Buss_To_Write+0x28>)
 800108a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800108e:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~(1 << (RW_pos));
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <set_Control_Buss_To_Write+0x28>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <set_Control_Buss_To_Write+0x28>)
 8001096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800109a:	6153      	str	r3, [r2, #20]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40020800 	.word	0x40020800

080010ac <display_ON_OFF_Reg>:

/**
 * DI and R/W to 0
 */
void display_ON_OFF_Reg() {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~(1 << (DI_pos));
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <display_ON_OFF_Reg+0x28>)
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <display_ON_OFF_Reg+0x28>)
 80010b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010ba:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~(1 << (RW_pos));
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <display_ON_OFF_Reg+0x28>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <display_ON_OFF_Reg+0x28>)
 80010c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010c6:	6153      	str	r3, [r2, #20]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40020800 	.word	0x40020800

080010d8 <set_Left_Side_Screen>:

/**
 * Selecting the side of the Screen
 */
void set_Left_Side_Screen() {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	GPIOC->ODR |= 1 << CS1_pos;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <set_Left_Side_Screen+0x28>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <set_Left_Side_Screen+0x28>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~(1 << (CS2_pos));
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <set_Left_Side_Screen+0x28>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <set_Left_Side_Screen+0x28>)
 80010ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010f2:	6153      	str	r3, [r2, #20]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40020800 	.word	0x40020800

08001104 <set_Right_Side_Screen>:

/**
 * set the right side of the screen
 */
void set_Right_Side_Screen() {
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~(1 << (CS1_pos));
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <set_Right_Side_Screen+0x28>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <set_Right_Side_Screen+0x28>)
 800110e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001112:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= 1 << (CS2_pos);
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <set_Right_Side_Screen+0x28>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <set_Right_Side_Screen+0x28>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6153      	str	r3, [r2, #20]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40020800 	.word	0x40020800

08001130 <clear_Screen>:
}

/**
 * Clear screen, write 0 to all pixels 
 */
void clear_Screen() {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e010      	b.n	800115e <clear_Screen+0x2e>
		for (int j = 0; j < 64; j++) {
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	e007      	b.n	8001152 <clear_Screen+0x22>
			write_On_Screen(i, j, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f9b2 	bl	80014b0 <write_On_Screen>
		for (int j = 0; j < 64; j++) {
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b3f      	cmp	r3, #63	; 0x3f
 8001156:	ddf4      	ble.n	8001142 <clear_Screen+0x12>
	for (int i = 0; i < 8; i++) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b07      	cmp	r3, #7
 8001162:	ddeb      	ble.n	800113c <clear_Screen+0xc>
		}
	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <init_DisplayArray>:
/**
 * init Display array, 
 * set the display 2d array to default 0 values 
 * which means screen is clear 
 */
void init_DisplayArray() {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	for (int i = 0; i < 64; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e013      	b.n	80011a0 <init_DisplayArray+0x34>
		for (int j = 0; j < 128; j++) {
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	e00a      	b.n	8001194 <init_DisplayArray+0x28>
			display[i][j] = 0;
 800117e:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <init_DisplayArray+0x48>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	01db      	lsls	r3, r3, #7
 8001184:	441a      	add	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	4413      	add	r3, r2
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 128; j++) {
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b7f      	cmp	r3, #127	; 0x7f
 8001198:	ddf1      	ble.n	800117e <init_DisplayArray+0x12>
	for (int i = 0; i < 64; i++) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b3f      	cmp	r3, #63	; 0x3f
 80011a4:	dde8      	ble.n	8001178 <init_DisplayArray+0xc>
		}
	}
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000025c 	.word	0x2000025c

080011b8 <set_Ball_To_Position>:
/**
 * Used to set the ball 3 x 3 at the given position
 * setOrClear if 1 then set else clear the ball
 * from the given position
 */
void set_Ball_To_Position(int row, int col, int setOrClear) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09a      	sub	sp, #104	; 0x68
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3301      	adds	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
			{ row - 1, col - 1 }, { row + 1, col - 1 }, { row - 1, col + 1 }, {
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3b01      	subs	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
			{ row - 1, col - 1 }, { row + 1, col - 1 }, { row - 1, col + 1 }, {
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3b01      	subs	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
			{ row - 1, col - 1 }, { row + 1, col - 1 }, { row - 1, col + 1 }, {
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			{ row - 1, col - 1 }, { row + 1, col - 1 }, { row - 1, col + 1 }, {
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3b01      	subs	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
			{ row - 1, col - 1 }, { row + 1, col - 1 }, { row - 1, col + 1 }, {
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3b01      	subs	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
			{ row - 1, col - 1 }, { row + 1, col - 1 }, { row - 1, col + 1 }, {
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3301      	adds	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
					row, col + 1 }, { row + 1, col }, { row - 1, col }, { row,
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3301      	adds	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
					row, col + 1 }, { row + 1, col }, { row - 1, col }, { row,
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
					row, col + 1 }, { row + 1, col }, { row - 1, col }, { row,
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3b01      	subs	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	653b      	str	r3, [r7, #80]	; 0x50
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	657b      	str	r3, [r7, #84]	; 0x54
					col - 1 }, };
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3b01      	subs	r3, #1
	int allPos[9][2] = { { row, col }, { row + 1, col + 1 },
 8001222:	65bb      	str	r3, [r7, #88]	; 0x58

	for (int i = 0; i < 9; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	667b      	str	r3, [r7, #100]	; 0x64
 8001228:	e02a      	b.n	8001280 <set_Ball_To_Position+0xc8>
		int row1 = *(&(allPos[i])[0]);
 800122a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001232:	4413      	add	r3, r2
 8001234:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001238:	663b      	str	r3, [r7, #96]	; 0x60
		int col1 = *(&(allPos[i])[1]);
 800123a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001242:	4413      	add	r3, r2
 8001244:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001248:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (setOrClear == 1 && row1 >= 0 && col1 >= 0) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10a      	bne.n	8001266 <set_Ball_To_Position+0xae>
 8001250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001252:	2b00      	cmp	r3, #0
 8001254:	db07      	blt.n	8001266 <set_Ball_To_Position+0xae>
 8001256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001258:	2b00      	cmp	r3, #0
 800125a:	db04      	blt.n	8001266 <set_Ball_To_Position+0xae>
			writeToDisplayArr(row1, col1);
 800125c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800125e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001260:	f000 f8fa 	bl	8001458 <writeToDisplayArr>
		if (setOrClear == 1 && row1 >= 0 && col1 >= 0) {
 8001264:	e009      	b.n	800127a <set_Ball_To_Position+0xc2>
		} else if (row1 >= 0 && col1 >= 0) {
 8001266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001268:	2b00      	cmp	r3, #0
 800126a:	db06      	blt.n	800127a <set_Ball_To_Position+0xc2>
 800126c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126e:	2b00      	cmp	r3, #0
 8001270:	db03      	blt.n	800127a <set_Ball_To_Position+0xc2>
			clearDisplayArr(row1, col1);
 8001272:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001274:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001276:	f000 f905 	bl	8001484 <clearDisplayArr>
	for (int i = 0; i < 9; i++) {
 800127a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800127c:	3301      	adds	r3, #1
 800127e:	667b      	str	r3, [r7, #100]	; 0x64
 8001280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001282:	2b08      	cmp	r3, #8
 8001284:	ddd1      	ble.n	800122a <set_Ball_To_Position+0x72>
		}
	}
}
 8001286:	bf00      	nop
 8001288:	3768      	adds	r7, #104	; 0x68
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <refreshScreen>:

/**
 * Used to refresh Screen,
 * set the data which is in display array on the screen
 */
void refreshScreen() {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
	// i is for Col, j is for the pages, K is for the rows in the page
	uint8_t toSendData = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
	int var = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < TOTAL_COLS; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e033      	b.n	800130c <refreshScreen+0x7c>
		for (int j = 0; j < PAGE_LEN; j++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e02a      	b.n	8001300 <refreshScreen+0x70>
			var = j * PAGE_LEN;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
			for (int k = var + PAGE_LEN; k >= var; k--) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3308      	adds	r3, #8
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	e016      	b.n	80012e6 <refreshScreen+0x56>
				// shift one
				if (display[k][i] == 1) {
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <refreshScreen+0x8c>)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	01db      	lsls	r3, r3, #7
 80012be:	441a      	add	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d107      	bne.n	80012da <refreshScreen+0x4a>
					toSendData = toSendData << 1;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	75fb      	strb	r3, [r7, #23]
					toSendData |= 1;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e002      	b.n	80012e0 <refreshScreen+0x50>
				} else {
					// shift 0
					toSendData = toSendData << 1;
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
			for (int k = var + PAGE_LEN; k >= var; k--) {
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dae4      	bge.n	80012b8 <refreshScreen+0x28>
				}
			}
			write_On_Screen(j, i, toSendData);
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	461a      	mov	r2, r3
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f8db 	bl	80014b0 <write_On_Screen>
		for (int j = 0; j < PAGE_LEN; j++) {
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b07      	cmp	r3, #7
 8001304:	ddd1      	ble.n	80012aa <refreshScreen+0x1a>
	for (int i = 0; i < TOTAL_COLS; i++) {
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3301      	adds	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b7f      	cmp	r3, #127	; 0x7f
 8001310:	ddc8      	ble.n	80012a4 <refreshScreen+0x14>
		}
	}
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000025c 	.word	0x2000025c

08001320 <draw_Vert_Line>:
/**
 * a function to draw a straight vertical line from given point
 * if setClear is 1 then set the position else clear the position
 */
void draw_Vert_Line(uint8_t startRow, int startCol, uint8_t verticalLen,
		uint8_t setClear) {
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6039      	str	r1, [r7, #0]
 8001328:	4611      	mov	r1, r2
 800132a:	461a      	mov	r2, r3
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	460b      	mov	r3, r1
 8001332:	71bb      	strb	r3, [r7, #6]
 8001334:	4613      	mov	r3, r2
 8001336:	717b      	strb	r3, [r7, #5]
	uint8_t valueToSet = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
	if (setClear == 1) {
 800133c:	797b      	ldrb	r3, [r7, #5]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <draw_Vert_Line+0x26>
		valueToSet = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
	}
	for (int i = 0; i < verticalLen; i++) {
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	e00c      	b.n	8001366 <draw_Vert_Line+0x46>
		display[startRow + i][startCol] = valueToSet;
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <draw_Vert_Line+0x5c>)
 8001354:	01db      	lsls	r3, r3, #7
 8001356:	441a      	add	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4413      	add	r3, r2
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < verticalLen; i++) {
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3301      	adds	r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	dbee      	blt.n	800134c <draw_Vert_Line+0x2c>
	}
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000025c 	.word	0x2000025c

08001380 <ballIsOnLine>:
 * 30 is the length of the line
 * collision for upper line 
 * this function is specific to upper line 
 * return 0 if the ball is on line
 */
int ballIsOnLine(int lineColPos) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	int colPosToCompare = prevPos.prev_Col / 10;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <ballIsOnLine+0x40>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <ballIsOnLine+0x44>)
 800138e:	fb82 1203 	smull	r1, r2, r2, r3
 8001392:	1092      	asrs	r2, r2, #2
 8001394:	17db      	asrs	r3, r3, #31
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	60fb      	str	r3, [r7, #12]
	if (colPosToCompare == lineColPos
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d106      	bne.n	80013b0 <ballIsOnLine+0x30>
			&& prevPos.prev_Row / 10 < LEN_OF_MOVING_LINE) {
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <ballIsOnLine+0x40>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013aa:	da01      	bge.n	80013b0 <ballIsOnLine+0x30>
		return 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e000      	b.n	80013b2 <ballIsOnLine+0x32>
	}
	return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000225c 	.word	0x2000225c
 80013c4:	66666667 	.word	0x66666667

080013c8 <ballIsOnLowerLine>:
 * collision for lowerLine checks if the ball is colliding with the line
 * position given to this function is specific to the lower line
 * return 0 if the ball is on line,
 * 
 */
int ballIsOnLowerLine(int lineColPos) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if (prevPos.prev_Col / 10 == lineColPos
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <ballIsOnLowerLine+0x3c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <ballIsOnLowerLine+0x40>)
 80013d6:	fb82 1203 	smull	r1, r2, r2, r3
 80013da:	1092      	asrs	r2, r2, #2
 80013dc:	17db      	asrs	r3, r3, #31
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d106      	bne.n	80013f4 <ballIsOnLowerLine+0x2c>
			&& prevPos.prev_Row / 10 > LEN_OF_MOVING_LINE) {
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <ballIsOnLowerLine+0x3c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80013ee:	db01      	blt.n	80013f4 <ballIsOnLowerLine+0x2c>
		return 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <ballIsOnLowerLine+0x2e>
	}
	return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000225c 	.word	0x2000225c
 8001408:	66666667 	.word	0x66666667

0800140c <draw_Horiz_Line>:

/**
 * Used to draw Horizontal line
 */
void draw_Horiz_Line(uint8_t startRow, uint8_t startCol, uint8_t horizonLen) {
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	460b      	mov	r3, r1
 8001418:	71bb      	strb	r3, [r7, #6]
 800141a:	4613      	mov	r3, r2
 800141c:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < horizonLen; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e00c      	b.n	800143e <draw_Horiz_Line+0x32>
		display[startRow][startCol + i] = 1;
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	79b9      	ldrb	r1, [r7, #6]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	440b      	add	r3, r1
 800142c:	4909      	ldr	r1, [pc, #36]	; (8001454 <draw_Horiz_Line+0x48>)
 800142e:	01d2      	lsls	r2, r2, #7
 8001430:	440a      	add	r2, r1
 8001432:	4413      	add	r3, r2
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < horizonLen; i++) {
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbee      	blt.n	8001424 <draw_Horiz_Line+0x18>
	}
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2000025c 	.word	0x2000025c

08001458 <writeToDisplayArr>:

/**
 * Write 1 to display array
 */
void writeToDisplayArr(int row, int col) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	display[row][col] = 1;
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <writeToDisplayArr+0x28>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	01db      	lsls	r3, r3, #7
 8001468:	441a      	add	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000025c 	.word	0x2000025c

08001484 <clearDisplayArr>:

/**
 * clear the given position from the array
 */
void clearDisplayArr(int row, int col) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	display[row][col] = 0;
 800148e:	4a07      	ldr	r2, [pc, #28]	; (80014ac <clearDisplayArr+0x28>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	01db      	lsls	r3, r3, #7
 8001494:	441a      	add	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000025c 	.word	0x2000025c

080014b0 <write_On_Screen>:

/**
 * used to write data on the screen,
 * First turn on screen,
 */
void write_On_Screen(uint8_t page, uint8_t col_Address, uint8_t data) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	460b      	mov	r3, r1
 80014bc:	71bb      	strb	r3, [r7, #6]
 80014be:	4613      	mov	r3, r2
 80014c0:	717b      	strb	r3, [r7, #5]
	turn_On_Screen();
 80014c2:	f7ff fdcb 	bl	800105c <turn_On_Screen>
	display_ON_OFF_Reg();
 80014c6:	f7ff fdf1 	bl	80010ac <display_ON_OFF_Reg>

	if (col_Address < MAX_COLS_LCD) {
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	2b3f      	cmp	r3, #63	; 0x3f
 80014ce:	d802      	bhi.n	80014d6 <write_On_Screen+0x26>
		set_Left_Side_Screen();
 80014d0:	f7ff fe02 	bl	80010d8 <set_Left_Side_Screen>
 80014d4:	e001      	b.n	80014da <write_On_Screen+0x2a>
	} else {
		set_Right_Side_Screen();
 80014d6:	f7ff fe15 	bl	8001104 <set_Right_Side_Screen>
	}
	toggle_Enable_Lcd();
 80014da:	f7ff fd6f 	bl	8000fbc <toggle_Enable_Lcd>

	// select page
	set_Page(page);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f815 	bl	8001510 <set_Page>
	toggle_Enable_Lcd();
 80014e6:	f7ff fd69 	bl	8000fbc <toggle_Enable_Lcd>

	// select Col
	set_ColAddress(col_Address);
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f829 	bl	8001544 <set_ColAddress>
	toggle_Enable_Lcd();
 80014f2:	f7ff fd63 	bl	8000fbc <toggle_Enable_Lcd>

	// Send Data
	send_Data(data);
 80014f6:	797b      	ldrb	r3, [r7, #5]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f83d 	bl	8001578 <send_Data>
	set_Control_Buss_To_Write();
 80014fe:	f7ff fdbf 	bl	8001080 <set_Control_Buss_To_Write>
	toggle_Enable_Lcd();
 8001502:	f7ff fd5b 	bl	8000fbc <toggle_Enable_Lcd>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <set_Page>:

/**
 * Set page on which data is to be written
 */
void set_Page(uint8_t num) {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR = (GPIOC->ODR & 0xFF00) | (PAGE_SEL_MASK | num);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <set_Page+0x30>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	f062 0247 	orn	r2, r2, #71	; 0x47
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	4611      	mov	r1, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <set_Page+0x30>)
 800152e:	430b      	orrs	r3, r1
 8001530:	6153      	str	r3, [r2, #20]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40020800 	.word	0x40020800

08001544 <set_ColAddress>:

/**
 * Set col address in which data is written
 */
void set_ColAddress(uint8_t address) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR = (GPIOC->ODR & 0xFF00) | (COL_SEL_MASK | address);
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <set_ColAddress+0x30>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	4611      	mov	r1, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <set_ColAddress+0x30>)
 8001562:	430b      	orrs	r3, r1
 8001564:	6153      	str	r3, [r2, #20]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40020800 	.word	0x40020800

08001578 <send_Data>:

/**
 * send the data which is to be written
 */
void send_Data(uint8_t data) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR = (GPIOC->ODR & 0xFF00) | data;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <send_Data+0x28>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <send_Data+0x28>)
 800158e:	4313      	orrs	r3, r2
 8001590:	614b      	str	r3, [r1, #20]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40020800 	.word	0x40020800

080015a4 <writeNumber>:

/**
 * Write the given number to the display
 * toShift is used to shift the column
 */
void writeNumber(int number, int toShift) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	if (number == 0) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <writeNumber+0x18>
		writeZero(toShift);
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f000 f843 	bl	8001640 <writeZero>
	} else if (number == 8) {
		wirteEight(toShift);
	} else if (number == 9) {
		writeNine(toShift);
	}
}
 80015ba:	e03d      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 1) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d103      	bne.n	80015ca <writeNumber+0x26>
		writeOne(toShift);
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f000 f866 	bl	8001694 <writeOne>
}
 80015c8:	e036      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 2) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d103      	bne.n	80015d8 <writeNumber+0x34>
		writeTwo(toShift);
 80015d0:	6838      	ldr	r0, [r7, #0]
 80015d2:	f000 f86f 	bl	80016b4 <writeTwo>
}
 80015d6:	e02f      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 3) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d103      	bne.n	80015e6 <writeNumber+0x42>
		WriteThree(toShift);
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f000 f883 	bl	80016ea <WriteThree>
}
 80015e4:	e028      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 4) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d103      	bne.n	80015f4 <writeNumber+0x50>
		writeFour(toShift);
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f000 f88f 	bl	8001710 <writeFour>
}
 80015f2:	e021      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 5) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d103      	bne.n	8001602 <writeNumber+0x5e>
		writeFive(toShift);
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f000 f8a9 	bl	8001752 <writeFive>
}
 8001600:	e01a      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 6) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b06      	cmp	r3, #6
 8001606:	d103      	bne.n	8001610 <writeNumber+0x6c>
		writeSix(toShift);
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f000 f8bd 	bl	8001788 <writeSix>
}
 800160e:	e013      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 7) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d103      	bne.n	800161e <writeNumber+0x7a>
		writeSeven(toShift);
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f000 f8c9 	bl	80017ae <writeSeven>
}
 800161c:	e00c      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 8) {
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b08      	cmp	r3, #8
 8001622:	d103      	bne.n	800162c <writeNumber+0x88>
		wirteEight(toShift);
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f000 f8db 	bl	80017e0 <wirteEight>
}
 800162a:	e005      	b.n	8001638 <writeNumber+0x94>
	} else if (number == 9) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b09      	cmp	r3, #9
 8001630:	d102      	bne.n	8001638 <writeNumber+0x94>
		writeNine(toShift);
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f000 f8e8 	bl	8001808 <writeNine>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <writeZero>:

/**
 * Write zero to display, toShift is for shifting the column
 */
void writeZero(int toShiftCol) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	draw_Vert_Line(30, 20 + toShiftCol, 20, 1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 0114 	add.w	r1, r3, #20
 800164e:	2301      	movs	r3, #1
 8001650:	2214      	movs	r2, #20
 8001652:	201e      	movs	r0, #30
 8001654:	f7ff fe64 	bl	8001320 <draw_Vert_Line>
	draw_Horiz_Line(30, 10 + toShiftCol, 10);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	330a      	adds	r3, #10
 800165e:	b2db      	uxtb	r3, r3
 8001660:	220a      	movs	r2, #10
 8001662:	4619      	mov	r1, r3
 8001664:	201e      	movs	r0, #30
 8001666:	f7ff fed1 	bl	800140c <draw_Horiz_Line>
	draw_Horiz_Line(50, 10 + toShiftCol, 10);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	330a      	adds	r3, #10
 8001670:	b2db      	uxtb	r3, r3
 8001672:	220a      	movs	r2, #10
 8001674:	4619      	mov	r1, r3
 8001676:	2032      	movs	r0, #50	; 0x32
 8001678:	f7ff fec8 	bl	800140c <draw_Horiz_Line>
	draw_Vert_Line(30, 10 + toShiftCol, 20, 1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 010a 	add.w	r1, r3, #10
 8001682:	2301      	movs	r3, #1
 8001684:	2214      	movs	r2, #20
 8001686:	201e      	movs	r0, #30
 8001688:	f7ff fe4a 	bl	8001320 <draw_Vert_Line>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <writeOne>:

/**
 * Write one to display, toShift is for shifting the column
 */
void writeOne(int toShiftCol) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	draw_Vert_Line(30, 20 + toShiftCol, 20, 1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f103 0114 	add.w	r1, r3, #20
 80016a2:	2301      	movs	r3, #1
 80016a4:	2214      	movs	r2, #20
 80016a6:	201e      	movs	r0, #30
 80016a8:	f7ff fe3a 	bl	8001320 <draw_Vert_Line>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <writeTwo>:

/**
 * Write two to display, toShift is for shifting the column
 */
void writeTwo(int toShiftCol) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	wirteEight(toShiftCol);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f88f 	bl	80017e0 <wirteEight>
	draw_Vert_Line(40, 20 + toShiftCol, 10, 0);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f103 0114 	add.w	r1, r3, #20
 80016c8:	2300      	movs	r3, #0
 80016ca:	220a      	movs	r2, #10
 80016cc:	2028      	movs	r0, #40	; 0x28
 80016ce:	f7ff fe27 	bl	8001320 <draw_Vert_Line>
	draw_Vert_Line(30, 10 + toShiftCol, 10, 0);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f103 010a 	add.w	r1, r3, #10
 80016d8:	2300      	movs	r3, #0
 80016da:	220a      	movs	r2, #10
 80016dc:	201e      	movs	r0, #30
 80016de:	f7ff fe1f 	bl	8001320 <draw_Vert_Line>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <WriteThree>:

/**
 * Write Three to display, toShift is for shifting the column
 */
void WriteThree(int toShiftCol) {
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	wirteEight(toShiftCol);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f874 	bl	80017e0 <wirteEight>
	draw_Vert_Line(30, 10 + toShiftCol, 20, 0);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f103 010a 	add.w	r1, r3, #10
 80016fe:	2300      	movs	r3, #0
 8001700:	2214      	movs	r2, #20
 8001702:	201e      	movs	r0, #30
 8001704:	f7ff fe0c 	bl	8001320 <draw_Vert_Line>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <writeFour>:

/**
 * Write Four to display, toShift is for shifting the column
 */
void writeFour(int toShiftCol) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	draw_Vert_Line(30, 20 + toShiftCol, 20, 1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0114 	add.w	r1, r3, #20
 800171e:	2301      	movs	r3, #1
 8001720:	2214      	movs	r2, #20
 8001722:	201e      	movs	r0, #30
 8001724:	f7ff fdfc 	bl	8001320 <draw_Vert_Line>
	draw_Horiz_Line(40, 10 + toShiftCol, 10);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	330a      	adds	r3, #10
 800172e:	b2db      	uxtb	r3, r3
 8001730:	220a      	movs	r2, #10
 8001732:	4619      	mov	r1, r3
 8001734:	2028      	movs	r0, #40	; 0x28
 8001736:	f7ff fe69 	bl	800140c <draw_Horiz_Line>
	draw_Vert_Line(30, 10 + toShiftCol, 10, 1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f103 010a 	add.w	r1, r3, #10
 8001740:	2301      	movs	r3, #1
 8001742:	220a      	movs	r2, #10
 8001744:	201e      	movs	r0, #30
 8001746:	f7ff fdeb 	bl	8001320 <draw_Vert_Line>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <writeFive>:

/**
 * Write Five to display, toShift is for shifting the column
 */
void writeFive(int toShiftCol) {
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	wirteEight(toShiftCol);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f840 	bl	80017e0 <wirteEight>
	draw_Vert_Line(30, 20 + toShiftCol, 10, 0);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f103 0114 	add.w	r1, r3, #20
 8001766:	2300      	movs	r3, #0
 8001768:	220a      	movs	r2, #10
 800176a:	201e      	movs	r0, #30
 800176c:	f7ff fdd8 	bl	8001320 <draw_Vert_Line>
	draw_Vert_Line(40, 10 + toShiftCol, 10, 0);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f103 010a 	add.w	r1, r3, #10
 8001776:	2300      	movs	r3, #0
 8001778:	220a      	movs	r2, #10
 800177a:	2028      	movs	r0, #40	; 0x28
 800177c:	f7ff fdd0 	bl	8001320 <draw_Vert_Line>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <writeSix>:

/**
 * Write Six to display, toShift is for shifting the column
 */
void writeSix(int toShiftCol) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	wirteEight(toShiftCol);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f825 	bl	80017e0 <wirteEight>
	draw_Vert_Line(30, 20 + toShiftCol, 10, 0);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f103 0114 	add.w	r1, r3, #20
 800179c:	2300      	movs	r3, #0
 800179e:	220a      	movs	r2, #10
 80017a0:	201e      	movs	r0, #30
 80017a2:	f7ff fdbd 	bl	8001320 <draw_Vert_Line>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <writeSeven>:

/**
 * Write Seven to display, toShift is for shifting the column
 */
void writeSeven(int toShiftCol) {
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
	draw_Vert_Line(30, 20 + toShiftCol, 20, 1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f103 0114 	add.w	r1, r3, #20
 80017bc:	2301      	movs	r3, #1
 80017be:	2214      	movs	r2, #20
 80017c0:	201e      	movs	r0, #30
 80017c2:	f7ff fdad 	bl	8001320 <draw_Vert_Line>
	draw_Horiz_Line(30, 10 + toShiftCol, 10);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	330a      	adds	r3, #10
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	220a      	movs	r2, #10
 80017d0:	4619      	mov	r1, r3
 80017d2:	201e      	movs	r0, #30
 80017d4:	f7ff fe1a 	bl	800140c <draw_Horiz_Line>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <wirteEight>:

/**
 * Write Eight to display, toShift is for shifting the column
 */
void wirteEight(int toShiftCol) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	writeZero(toShiftCol);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff29 	bl	8001640 <writeZero>
	draw_Horiz_Line(40, 10 + toShiftCol, 10);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	330a      	adds	r3, #10
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	220a      	movs	r2, #10
 80017f8:	4619      	mov	r1, r3
 80017fa:	2028      	movs	r0, #40	; 0x28
 80017fc:	f7ff fe06 	bl	800140c <draw_Horiz_Line>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <writeNine>:

/**
 * Write Nine to display, toShift is for shifting the column
 */
void writeNine(int toShiftCol) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	wirteEight(toShiftCol);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ffe5 	bl	80017e0 <wirteEight>
	draw_Vert_Line(40, 10 + toShiftCol, 10, 0);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 010a 	add.w	r1, r3, #10
 800181c:	2300      	movs	r3, #0
 800181e:	220a      	movs	r2, #10
 8001820:	2028      	movs	r0, #40	; 0x28
 8001822:	f7ff fd7d 	bl	8001320 <draw_Vert_Line>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <writeWelcomeToArray>:

/**
 * Write Welcome on screen
 */
void writeWelcomeToArray() {
 8001830:	b580      	push	{r7, lr}
 8001832:	f6ad 1d88 	subw	sp, sp, #2440	; 0x988
 8001836:	af00      	add	r7, sp, #0
	uint8_t welcome[19][128] = { { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
 8001838:	463b      	mov	r3, r7
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <writeWelcomeToArray+0x80>)
 800183c:	4618      	mov	r0, r3
 800183e:	4611      	mov	r1, r2
 8001840:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8001844:	461a      	mov	r2, r3
 8001846:	f004 fd1f 	bl	8006288 <memcpy>
					1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
					0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
					0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

	for (int i = 0; i < 19; i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8001850:	e025      	b.n	800189e <writeWelcomeToArray+0x6e>
		for (int j = 0; j < 128; j++) {
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 8001858:	e018      	b.n	800188c <writeWelcomeToArray+0x5c>
			display[i + 10][j] = welcome[i][j];
 800185a:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 800185e:	330a      	adds	r3, #10
 8001860:	4639      	mov	r1, r7
 8001862:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 8001866:	01d2      	lsls	r2, r2, #7
 8001868:	4411      	add	r1, r2
 800186a:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 800186e:	440a      	add	r2, r1
 8001870:	7811      	ldrb	r1, [r2, #0]
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <writeWelcomeToArray+0x84>)
 8001874:	01db      	lsls	r3, r3, #7
 8001876:	441a      	add	r2, r3
 8001878:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 800187c:	4413      	add	r3, r2
 800187e:	460a      	mov	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 128; j++) {
 8001882:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8001886:	3301      	adds	r3, #1
 8001888:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 800188c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8001890:	2b7f      	cmp	r3, #127	; 0x7f
 8001892:	dde2      	ble.n	800185a <writeWelcomeToArray+0x2a>
	for (int i = 0; i < 19; i++) {
 8001894:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8001898:	3301      	adds	r3, #1
 800189a:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 800189e:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	ddd5      	ble.n	8001852 <writeWelcomeToArray+0x22>
		}
	}
}
 80018a6:	bf00      	nop
 80018a8:	f607 1788 	addw	r7, r7, #2440	; 0x988
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800a378 	.word	0x0800a378
 80018b4:	2000025c 	.word	0x2000025c

080018b8 <writeGameOver>:

/**
 * Write game over message on the screen
 */
void writeGameOver() {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	f5ad 6dd1 	sub.w	sp, sp, #1672	; 0x688
 80018be:	af00      	add	r7, sp, #0
	uint8_t gameOver[13][128] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
 80018c0:	463b      	mov	r3, r7
 80018c2:	4618      	mov	r0, r3
 80018c4:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80018c8:	461a      	mov	r2, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	f004 fce7 	bl	800629e <memset>
 80018d0:	463b      	mov	r3, r7
 80018d2:	2201      	movs	r2, #1
 80018d4:	739a      	strb	r2, [r3, #14]
 80018d6:	463b      	mov	r3, r7
 80018d8:	2201      	movs	r2, #1
 80018da:	73da      	strb	r2, [r3, #15]
 80018dc:	463b      	mov	r3, r7
 80018de:	2201      	movs	r2, #1
 80018e0:	741a      	strb	r2, [r3, #16]
 80018e2:	463b      	mov	r3, r7
 80018e4:	2201      	movs	r2, #1
 80018e6:	745a      	strb	r2, [r3, #17]
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	749a      	strb	r2, [r3, #18]
 80018ee:	463b      	mov	r3, r7
 80018f0:	2201      	movs	r2, #1
 80018f2:	76da      	strb	r2, [r3, #27]
 80018f4:	463b      	mov	r3, r7
 80018f6:	2201      	movs	r2, #1
 80018f8:	771a      	strb	r2, [r3, #28]
 80018fa:	463b      	mov	r3, r7
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001902:	463b      	mov	r3, r7
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800190a:	463b      	mov	r3, r7
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001912:	463b      	mov	r3, r7
 8001914:	2201      	movs	r2, #1
 8001916:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800191a:	463b      	mov	r3, r7
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001922:	463b      	mov	r3, r7
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800192a:	463b      	mov	r3, r7
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001932:	463b      	mov	r3, r7
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800193a:	463b      	mov	r3, r7
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001942:	463b      	mov	r3, r7
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800194a:	463b      	mov	r3, r7
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001952:	463b      	mov	r3, r7
 8001954:	2201      	movs	r2, #1
 8001956:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800195a:	463b      	mov	r3, r7
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001962:	463b      	mov	r3, r7
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800196a:	463b      	mov	r3, r7
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001972:	463b      	mov	r3, r7
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800197a:	463b      	mov	r3, r7
 800197c:	2201      	movs	r2, #1
 800197e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001982:	463b      	mov	r3, r7
 8001984:	2201      	movs	r2, #1
 8001986:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 800198a:	463b      	mov	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001992:	463b      	mov	r3, r7
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800199a:	463b      	mov	r3, r7
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80019a2:	463b      	mov	r3, r7
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80019aa:	463b      	mov	r3, r7
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80019b2:	463b      	mov	r3, r7
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80019ba:	463b      	mov	r3, r7
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80019c2:	463b      	mov	r3, r7
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80019ca:	463b      	mov	r3, r7
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80019d2:	463b      	mov	r3, r7
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80019da:	463b      	mov	r3, r7
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80019e2:	463b      	mov	r3, r7
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80019ea:	463b      	mov	r3, r7
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80019f2:	463b      	mov	r3, r7
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80019fa:	463b      	mov	r3, r7
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001a02:	463b      	mov	r3, r7
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001a12:	463b      	mov	r3, r7
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8001a22:	463b      	mov	r3, r7
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8001a32:	463b      	mov	r3, r7
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8001a42:	463b      	mov	r3, r7
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8001a52:	463b      	mov	r3, r7
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8001a62:	463b      	mov	r3, r7
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8001a72:	463b      	mov	r3, r7
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8001a82:	463b      	mov	r3, r7
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8001a92:	463b      	mov	r3, r7
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8001aba:	463b      	mov	r3, r7
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8001aca:	463b      	mov	r3, r7
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8001ada:	463b      	mov	r3, r7
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8001aea:	463b      	mov	r3, r7
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 8001af2:	463b      	mov	r3, r7
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
 8001afa:	463b      	mov	r3, r7
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
 8001b02:	463b      	mov	r3, r7
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
 8001b12:	463b      	mov	r3, r7
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
 8001b22:	463b      	mov	r3, r7
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8001b32:	463b      	mov	r3, r7
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8001b42:	463b      	mov	r3, r7
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
 8001b52:	463b      	mov	r3, r7
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8001b62:	463b      	mov	r3, r7
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8001b72:	463b      	mov	r3, r7
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 8001b82:	463b      	mov	r3, r7
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 8001b92:	463b      	mov	r3, r7
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001baa:	463b      	mov	r3, r7
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 8001be2:	463b      	mov	r3, r7
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8001bea:	463b      	mov	r3, r7
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8001c02:	463b      	mov	r3, r7
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 8001c12:	463b      	mov	r3, r7
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8001c22:	463b      	mov	r3, r7
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 8001c32:	463b      	mov	r3, r7
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
 8001c42:	463b      	mov	r3, r7
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2235 	strb.w	r2, [r3, #565]	; 0x235
 8001c52:	463b      	mov	r3, r7
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 8001c62:	463b      	mov	r3, r7
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
 8001c72:	463b      	mov	r3, r7
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 8001c82:	463b      	mov	r3, r7
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2266 	strb.w	r2, [r3, #614]	; 0x266
 8001c92:	463b      	mov	r3, r7
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8001caa:	463b      	mov	r3, r7
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8001cea:	463b      	mov	r3, r7
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 22c4 	strb.w	r2, [r3, #708]	; 0x2c4
 8001d02:	463b      	mov	r3, r7
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 22cc 	strb.w	r2, [r3, #716]	; 0x2cc
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
 8001d12:	463b      	mov	r3, r7
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 8001d22:	463b      	mov	r3, r7
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8001d32:	463b      	mov	r3, r7
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8001d42:	463b      	mov	r3, r7
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 22ec 	strb.w	r2, [r3, #748]	; 0x2ec
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8001d52:	463b      	mov	r3, r7
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8001d62:	463b      	mov	r3, r7
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8001d72:	463b      	mov	r3, r7
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8001d82:	463b      	mov	r3, r7
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8001d92:	463b      	mov	r3, r7
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8001da2:	463b      	mov	r3, r7
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 8001daa:	463b      	mov	r3, r7
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8001db2:	463b      	mov	r3, r7
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8001dba:	463b      	mov	r3, r7
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8001dca:	463b      	mov	r3, r7
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2335 	strb.w	r2, [r3, #821]	; 0x335
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8001de2:	463b      	mov	r3, r7
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8001dea:	463b      	mov	r3, r7
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8001df2:	463b      	mov	r3, r7
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 8001e02:	463b      	mov	r3, r7
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
 8001e12:	463b      	mov	r3, r7
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 234d 	strb.w	r2, [r3, #845]	; 0x34d
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8001e22:	463b      	mov	r3, r7
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 8001e32:	463b      	mov	r3, r7
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8001e42:	463b      	mov	r3, r7
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 235d 	strb.w	r2, [r3, #861]	; 0x35d
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8001e52:	463b      	mov	r3, r7
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8001e62:	463b      	mov	r3, r7
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2366 	strb.w	r2, [r3, #870]	; 0x366
 8001e72:	463b      	mov	r3, r7
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8001e82:	463b      	mov	r3, r7
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8001e92:	463b      	mov	r3, r7
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8001eaa:	463b      	mov	r3, r7
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8001eda:	463b      	mov	r3, r7
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 23b5 	strb.w	r2, [r3, #949]	; 0x3b5
 8001eea:	463b      	mov	r3, r7
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
 8001efa:	463b      	mov	r3, r7
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8001f02:	463b      	mov	r3, r7
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8001f12:	463b      	mov	r3, r7
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8001f22:	463b      	mov	r3, r7
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 8001f32:	463b      	mov	r3, r7
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8001f42:	463b      	mov	r3, r7
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8001f52:	463b      	mov	r3, r7
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8001f62:	463b      	mov	r3, r7
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8001f72:	463b      	mov	r3, r7
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8001f82:	463b      	mov	r3, r7
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8001f92:	463b      	mov	r3, r7
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8001faa:	463b      	mov	r3, r7
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8001fea:	463b      	mov	r3, r7
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 248b 	strb.w	r2, [r3, #1163]	; 0x48b
 8002002:	463b      	mov	r3, r7
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800200a:	463b      	mov	r3, r7
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 8002012:	463b      	mov	r3, r7
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 800201a:	463b      	mov	r3, r7
 800201c:	2201      	movs	r2, #1
 800201e:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 8002022:	463b      	mov	r3, r7
 8002024:	2201      	movs	r2, #1
 8002026:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 800202a:	463b      	mov	r3, r7
 800202c:	2201      	movs	r2, #1
 800202e:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c
 8002032:	463b      	mov	r3, r7
 8002034:	2201      	movs	r2, #1
 8002036:	f883 249d 	strb.w	r2, [r3, #1181]	; 0x49d
 800203a:	463b      	mov	r3, r7
 800203c:	2201      	movs	r2, #1
 800203e:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 8002042:	463b      	mov	r3, r7
 8002044:	2201      	movs	r2, #1
 8002046:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 800204a:	463b      	mov	r3, r7
 800204c:	2201      	movs	r2, #1
 800204e:	f883 24a4 	strb.w	r2, [r3, #1188]	; 0x4a4
 8002052:	463b      	mov	r3, r7
 8002054:	2201      	movs	r2, #1
 8002056:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 800205a:	463b      	mov	r3, r7
 800205c:	2201      	movs	r2, #1
 800205e:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 8002062:	463b      	mov	r3, r7
 8002064:	2201      	movs	r2, #1
 8002066:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 800206a:	463b      	mov	r3, r7
 800206c:	2201      	movs	r2, #1
 800206e:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 8002072:	463b      	mov	r3, r7
 8002074:	2201      	movs	r2, #1
 8002076:	f883 24b5 	strb.w	r2, [r3, #1205]	; 0x4b5
 800207a:	463b      	mov	r3, r7
 800207c:	2201      	movs	r2, #1
 800207e:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8002082:	463b      	mov	r3, r7
 8002084:	2201      	movs	r2, #1
 8002086:	f883 24c4 	strb.w	r2, [r3, #1220]	; 0x4c4
 800208a:	463b      	mov	r3, r7
 800208c:	2201      	movs	r2, #1
 800208e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
 8002092:	463b      	mov	r3, r7
 8002094:	2201      	movs	r2, #1
 8002096:	f883 24cd 	strb.w	r2, [r3, #1229]	; 0x4cd
 800209a:	463b      	mov	r3, r7
 800209c:	2201      	movs	r2, #1
 800209e:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 80020a2:	463b      	mov	r3, r7
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 80020aa:	463b      	mov	r3, r7
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
 80020b2:	463b      	mov	r3, r7
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 80020ba:	463b      	mov	r3, r7
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 80020c2:	463b      	mov	r3, r7
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 80020ca:	463b      	mov	r3, r7
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 80020d2:	463b      	mov	r3, r7
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 80020da:	463b      	mov	r3, r7
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 80020e2:	463b      	mov	r3, r7
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 250c 	strb.w	r2, [r3, #1292]	; 0x50c
 80020ea:	463b      	mov	r3, r7
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 80020f2:	463b      	mov	r3, r7
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 80020fa:	463b      	mov	r3, r7
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 8002102:	463b      	mov	r3, r7
 8002104:	2201      	movs	r2, #1
 8002106:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 800210a:	463b      	mov	r3, r7
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 8002112:	463b      	mov	r3, r7
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 800211a:	463b      	mov	r3, r7
 800211c:	2201      	movs	r2, #1
 800211e:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 8002122:	463b      	mov	r3, r7
 8002124:	2201      	movs	r2, #1
 8002126:	f883 252b 	strb.w	r2, [r3, #1323]	; 0x52b
 800212a:	463b      	mov	r3, r7
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 8002132:	463b      	mov	r3, r7
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2535 	strb.w	r2, [r3, #1333]	; 0x535
 800213a:	463b      	mov	r3, r7
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2544 	strb.w	r2, [r3, #1348]	; 0x544
 8002142:	463b      	mov	r3, r7
 8002144:	2201      	movs	r2, #1
 8002146:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
 800214a:	463b      	mov	r3, r7
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 8002152:	463b      	mov	r3, r7
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555
 800215a:	463b      	mov	r3, r7
 800215c:	2201      	movs	r2, #1
 800215e:	f883 255c 	strb.w	r2, [r3, #1372]	; 0x55c
 8002162:	463b      	mov	r3, r7
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 800216a:	463b      	mov	r3, r7
 800216c:	2201      	movs	r2, #1
 800216e:	f883 256c 	strb.w	r2, [r3, #1388]	; 0x56c
 8002172:	463b      	mov	r3, r7
 8002174:	2201      	movs	r2, #1
 8002176:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c
 800217a:	463b      	mov	r3, r7
 800217c:	2201      	movs	r2, #1
 800217e:	f883 258d 	strb.w	r2, [r3, #1421]	; 0x58d
 8002182:	463b      	mov	r3, r7
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 800218a:	463b      	mov	r3, r7
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8002192:	463b      	mov	r3, r7
 8002194:	2201      	movs	r2, #1
 8002196:	f883 259f 	strb.w	r2, [r3, #1439]	; 0x59f
 800219a:	463b      	mov	r3, r7
 800219c:	2201      	movs	r2, #1
 800219e:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 80021a2:	463b      	mov	r3, r7
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 80021aa:	463b      	mov	r3, r7
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 80021b2:	463b      	mov	r3, r7
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 80021ba:	463b      	mov	r3, r7
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 80021c2:	463b      	mov	r3, r7
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 80021ca:	463b      	mov	r3, r7
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 80021d2:	463b      	mov	r3, r7
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 25c5 	strb.w	r2, [r3, #1477]	; 0x5c5
 80021da:	463b      	mov	r3, r7
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 80021e2:	463b      	mov	r3, r7
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 25cb 	strb.w	r2, [r3, #1483]	; 0x5cb
 80021ea:	463b      	mov	r3, r7
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 80021f2:	463b      	mov	r3, r7
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 80021fa:	463b      	mov	r3, r7
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 25d5 	strb.w	r2, [r3, #1493]	; 0x5d5
 8002202:	463b      	mov	r3, r7
 8002204:	2201      	movs	r2, #1
 8002206:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 800220a:	463b      	mov	r3, r7
 800220c:	2201      	movs	r2, #1
 800220e:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8002212:	463b      	mov	r3, r7
 8002214:	2201      	movs	r2, #1
 8002216:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 800221a:	463b      	mov	r3, r7
 800221c:	2201      	movs	r2, #1
 800221e:	f883 25ed 	strb.w	r2, [r3, #1517]	; 0x5ed
 8002222:	463b      	mov	r3, r7
 8002224:	2201      	movs	r2, #1
 8002226:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 800222a:	463b      	mov	r3, r7
 800222c:	2201      	movs	r2, #1
 800222e:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8002232:	463b      	mov	r3, r7
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 800223a:	463b      	mov	r3, r7
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8002242:	463b      	mov	r3, r7
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 800224a:	463b      	mov	r3, r7
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8002252:	463b      	mov	r3, r7
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 800225a:	463b      	mov	r3, r7
 800225c:	2201      	movs	r2, #1
 800225e:	f883 261f 	strb.w	r2, [r3, #1567]	; 0x61f
 8002262:	463b      	mov	r3, r7
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
 800226a:	463b      	mov	r3, r7
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8002272:	463b      	mov	r3, r7
 8002274:	2201      	movs	r2, #1
 8002276:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 800227a:	463b      	mov	r3, r7
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8002282:	463b      	mov	r3, r7
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 800228a:	463b      	mov	r3, r7
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2636 	strb.w	r2, [r3, #1590]	; 0x636
 8002292:	463b      	mov	r3, r7
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2637 	strb.w	r2, [r3, #1591]	; 0x637
 800229a:	463b      	mov	r3, r7
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638
 80022a2:	463b      	mov	r3, r7
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 80022aa:	463b      	mov	r3, r7
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 80022b2:	463b      	mov	r3, r7
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 80022ba:	463b      	mov	r3, r7
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 80022c2:	463b      	mov	r3, r7
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 80022ca:	463b      	mov	r3, r7
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 80022d2:	463b      	mov	r3, r7
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 80022da:	463b      	mov	r3, r7
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 80022e2:	463b      	mov	r3, r7
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 80022ea:	463b      	mov	r3, r7
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 80022f2:	463b      	mov	r3, r7
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 80022fa:	463b      	mov	r3, r7
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 8002302:	463b      	mov	r3, r7
 8002304:	2201      	movs	r2, #1
 8002306:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 800230a:	463b      	mov	r3, r7
 800230c:	2201      	movs	r2, #1
 800230e:	f883 265e 	strb.w	r2, [r3, #1630]	; 0x65e
 8002312:	463b      	mov	r3, r7
 8002314:	2201      	movs	r2, #1
 8002316:	f883 265f 	strb.w	r2, [r3, #1631]	; 0x65f
 800231a:	463b      	mov	r3, r7
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8002322:	463b      	mov	r3, r7
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 800232a:	463b      	mov	r3, r7
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8002332:	463b      	mov	r3, r7
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2666 	strb.w	r2, [r3, #1638]	; 0x666
 800233a:	463b      	mov	r3, r7
 800233c:	2201      	movs	r2, #1
 800233e:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8002342:	463b      	mov	r3, r7
 8002344:	2201      	movs	r2, #1
 8002346:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
			0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
			0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
	for (int i = 0; i < 13; i++) {
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8002350:	e025      	b.n	800239e <writeGameOver+0xae6>
		for (int j = 0; j < 128; j++) {
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 8002358:	e018      	b.n	800238c <writeGameOver+0xad4>
			display[i + 10][j] = gameOver[i][j];
 800235a:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 800235e:	330a      	adds	r3, #10
 8002360:	4639      	mov	r1, r7
 8002362:	f8d7 2684 	ldr.w	r2, [r7, #1668]	; 0x684
 8002366:	01d2      	lsls	r2, r2, #7
 8002368:	4411      	add	r1, r2
 800236a:	f8d7 2680 	ldr.w	r2, [r7, #1664]	; 0x680
 800236e:	440a      	add	r2, r1
 8002370:	7811      	ldrb	r1, [r2, #0]
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <writeGameOver+0xaf8>)
 8002374:	01db      	lsls	r3, r3, #7
 8002376:	441a      	add	r2, r3
 8002378:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 800237c:	4413      	add	r3, r2
 800237e:	460a      	mov	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 128; j++) {
 8002382:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8002386:	3301      	adds	r3, #1
 8002388:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 800238c:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 8002390:	2b7f      	cmp	r3, #127	; 0x7f
 8002392:	dde2      	ble.n	800235a <writeGameOver+0xaa2>
	for (int i = 0; i < 13; i++) {
 8002394:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 8002398:	3301      	adds	r3, #1
 800239a:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800239e:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	ddd5      	ble.n	8002352 <writeGameOver+0xa9a>
		}
	}
}
 80023a6:	bf00      	nop
 80023a8:	f507 67d1 	add.w	r7, r7, #1672	; 0x688
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	2000025c 	.word	0x2000025c

080023b4 <app_init>:
 * check if it is working,
 * setup the LCD, when everything is fine write Welcome message on the screen
 * Register the functions those are required to be 
 * called periodically in timer_register
 */
void app_init(void) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	// Init MPU and error handling
	if (mpu6050_init() != 1) {
 80023b8:	f000 fb70 	bl	8002a9c <mpu6050_init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d006      	beq.n	80023d0 <app_init+0x1c>
		HAL_UART_Transmit(&huart2, "Init Fails ...", 14, HAL_MAX_DELAY);
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	220e      	movs	r2, #14
 80023c8:	491b      	ldr	r1, [pc, #108]	; (8002438 <app_init+0x84>)
 80023ca:	481c      	ldr	r0, [pc, #112]	; (800243c <app_init+0x88>)
 80023cc:	f003 f893 	bl	80054f6 <HAL_UART_Transmit>
	}
	if (isWorking() != 1) {
 80023d0:	f000 fb96 	bl	8002b00 <isWorking>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d006      	beq.n	80023e8 <app_init+0x34>
		HAL_UART_Transmit(&huart2, "NOT WORKING ...", 15, HAL_MAX_DELAY);
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	220f      	movs	r2, #15
 80023e0:	4917      	ldr	r1, [pc, #92]	; (8002440 <app_init+0x8c>)
 80023e2:	4816      	ldr	r0, [pc, #88]	; (800243c <app_init+0x88>)
 80023e4:	f003 f887 	bl	80054f6 <HAL_UART_Transmit>
	}

	// setup Lcd
	setUp();
 80023e8:	f7fe fdd6 	bl	8000f98 <setUp>

	// write welcome message when game is started...
	writeWelcomeToArray();
 80023ec:	f7ff fa20 	bl	8001830 <writeWelcomeToArray>
	refresh();
 80023f0:	f000 f8ba 	bl	8002568 <refresh>
	HAL_Delay(WELCOME_MESSAGE_DELAY);
 80023f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023f8:	f001 f858 	bl	80034ac <HAL_Delay>
	init_DisplayArray();
 80023fc:	f7fe feb6 	bl	800116c <init_DisplayArray>
	HAL_Delay(100);
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	f001 f853 	bl	80034ac <HAL_Delay>
	refresh();
 8002406:	f000 f8af 	bl	8002568 <refresh>

	// registring the functions to be called periodically
	timer_register(getMpuData, SENSOR_REFRESH_RATE);
 800240a:	2132      	movs	r1, #50	; 0x32
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <app_init+0x90>)
 800240e:	f000 ff7d 	bl	800330c <timer_register>
	timer_register(ballMovementWithSpeed, BALL_MOVEMENT_RATE);
 8002412:	2114      	movs	r1, #20
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <app_init+0x94>)
 8002416:	f000 ff79 	bl	800330c <timer_register>
	timer_register(refresh, REFRESH_RATE);
 800241a:	2132      	movs	r1, #50	; 0x32
 800241c:	480b      	ldr	r0, [pc, #44]	; (800244c <app_init+0x98>)
 800241e:	f000 ff75 	bl	800330c <timer_register>
	timer_register(moveLine, MOVE_LINE_UPPER_RATE);
 8002422:	211e      	movs	r1, #30
 8002424:	480a      	ldr	r0, [pc, #40]	; (8002450 <app_init+0x9c>)
 8002426:	f000 ff71 	bl	800330c <timer_register>
	timer_register(slowMoveLine, MOVE_LINE_LOWER_RATE);
 800242a:	2128      	movs	r1, #40	; 0x28
 800242c:	4809      	ldr	r0, [pc, #36]	; (8002454 <app_init+0xa0>)
 800242e:	f000 ff6d 	bl	800330c <timer_register>
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	0800acf8 	.word	0x0800acf8
 800243c:	20002300 	.word	0x20002300
 8002440:	0800ad08 	.word	0x0800ad08
 8002444:	08002539 	.word	0x08002539
 8002448:	080025d9 	.word	0x080025d9
 800244c:	08002569 	.word	0x08002569
 8002450:	080026d9 	.word	0x080026d9
 8002454:	0800273d 	.word	0x0800273d

08002458 <app_loop>:
/**
 * game is ended when gameEnd flag is set to 1, 
 * when game is ended game over message is written
 * and calculated score, ball is set to starting position,
 */
void app_loop(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	if (gameEnd == 1) {
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <app_loop+0x5c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d124      	bne.n	80024ae <app_loop+0x56>
		// clear the screen 
		init_DisplayArray();
 8002464:	f7fe fe82 	bl	800116c <init_DisplayArray>

		// refresh the screen, set the content of the 2d array to the LCD
		refresh();
 8002468:	f000 f87e 	bl	8002568 <refresh>

		// set the ball position to the starting position
		prevPos.prev_Col = 50;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <app_loop+0x60>)
 800246e:	2232      	movs	r2, #50	; 0x32
 8002470:	605a      	str	r2, [r3, #4]
		prevPos.prev_Row = 50;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <app_loop+0x60>)
 8002474:	2232      	movs	r2, #50	; 0x32
 8002476:	601a      	str	r2, [r3, #0]

		// set the line to the default value 
		lineCol = START_LINE_COL_VALUE;
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <app_loop+0x64>)
 800247a:	227f      	movs	r2, #127	; 0x7f
 800247c:	601a      	str	r2, [r3, #0]
		lineColSlowMove = START_LINE_COL_VALUE;
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <app_loop+0x68>)
 8002480:	227f      	movs	r2, #127	; 0x7f
 8002482:	601a      	str	r2, [r3, #0]

		// set game over message
		writeGameOver();
 8002484:	f7ff fa18 	bl	80018b8 <writeGameOver>
		writeScore(score);
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <app_loop+0x6c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f81b 	bl	80024c8 <writeScore>
		score = 0;
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <app_loop+0x6c>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
		HAL_Delay(GAME_OVER_DELAY);
 8002498:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800249c:	f001 f806 	bl	80034ac <HAL_Delay>
		init_DisplayArray();
 80024a0:	f7fe fe64 	bl	800116c <init_DisplayArray>
		refresh();
 80024a4:	f000 f860 	bl	8002568 <refresh>

		// Reset game End flag, so game can be played again
		gameEnd = 0;
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <app_loop+0x5c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
	}
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000204 	.word	0x20000204
 80024b8:	2000225c 	.word	0x2000225c
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004
 80024c4:	20000208 	.word	0x20000208

080024c8 <writeScore>:

/**
 * Used to write the Score on the display array
 * Write score if score is less then 100
 */
void writeScore(int score) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	if (score < MAX_SCORE) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b63      	cmp	r3, #99	; 0x63
 80024d4:	dc29      	bgt.n	800252a <writeScore+0x62>
		int unit = score % 10;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <writeScore+0x6c>)
 80024da:	fb83 1302 	smull	r1, r3, r3, r2
 80024de:	1099      	asrs	r1, r3, #2
 80024e0:	17d3      	asrs	r3, r2, #31
 80024e2:	1ac9      	subs	r1, r1, r3
 80024e4:	460b      	mov	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	60fb      	str	r3, [r7, #12]
		score = score / 10;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a10      	ldr	r2, [pc, #64]	; (8002534 <writeScore+0x6c>)
 80024f4:	fb82 1203 	smull	r1, r2, r2, r3
 80024f8:	1092      	asrs	r2, r2, #2
 80024fa:	17db      	asrs	r3, r3, #31
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	607b      	str	r3, [r7, #4]
		int ten = (score) % 10;
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <writeScore+0x6c>)
 8002504:	fb83 1302 	smull	r1, r3, r3, r2
 8002508:	1099      	asrs	r1, r3, #2
 800250a:	17d3      	asrs	r3, r2, #31
 800250c:	1ac9      	subs	r1, r1, r3
 800250e:	460b      	mov	r3, r1
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	60bb      	str	r3, [r7, #8]
		writeNumber(unit, UNIT_COL_SHIFT_VAL);
 800251a:	213c      	movs	r1, #60	; 0x3c
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff f841 	bl	80015a4 <writeNumber>
		writeNumber(ten, TEN_COL_SHIFT_VAL);
 8002522:	211e      	movs	r1, #30
 8002524:	68b8      	ldr	r0, [r7, #8]
 8002526:	f7ff f83d 	bl	80015a4 <writeNumber>
	}
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	66666667 	.word	0x66666667

08002538 <getMpuData>:
 * Used to get the data from the MPU6050 Sensor, also do error handling
 * print the result for debugging, also check if there some kind of reading error
 * if readData()  returns 0 then it is reading Error which is to be transmitted via UART
 * if not then the result is printed for debugging 
 */
int getMpuData() {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	if (readData() != 1) {
 800253c:	f000 fafc 	bl	8002b38 <readData>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d007      	beq.n	8002556 <getMpuData+0x1e>
		HAL_UART_Transmit(&huart2, "Reading Error ...", 17, HAL_MAX_DELAY);
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	2211      	movs	r2, #17
 800254c:	4904      	ldr	r1, [pc, #16]	; (8002560 <getMpuData+0x28>)
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <getMpuData+0x2c>)
 8002550:	f002 ffd1 	bl	80054f6 <HAL_UART_Transmit>
 8002554:	e001      	b.n	800255a <getMpuData+0x22>
	} else {
		printResult();
 8002556:	f000 fca7 	bl	8002ea8 <printResult>
	}
}
 800255a:	bf00      	nop
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	0800ad18 	.word	0x0800ad18
 8002564:	20002300 	.word	0x20002300

08002568 <refresh>:

/**
 * refresh screen,
 * set the content on the Lcd 
 */
void refresh() {
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	refreshScreen();
 800256c:	f7fe fe90 	bl	8001290 <refreshScreen>
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <collision>:
/**
 * For collision detection
 * 0 for lower line, else do collision detection for upper line 
 * when collision is detected gameEnd flag is also set 
 */
void collision(int forLower) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	int getBallStatus = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
	if (forLower == 0) {
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <collision+0x20>
		getBallStatus = ballIsOnLowerLine(lineColSlowMove);
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <collision+0x50>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe ff1c 	bl	80013c8 <ballIsOnLowerLine>
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	e005      	b.n	80025a0 <collision+0x2c>
	} else {
		getBallStatus = ballIsOnLine(lineCol);
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <collision+0x54>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fef1 	bl	8001380 <ballIsOnLine>
 800259e:	60f8      	str	r0, [r7, #12]
	}

	if (getBallStatus == 0) {
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <collision+0x46>
		HAL_UART_Transmit(&huart2, "BAL IS ON LINE ..", 17, HAL_MAX_DELAY);
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	2211      	movs	r2, #17
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <collision+0x58>)
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <collision+0x5c>)
 80025b0:	f002 ffa1 	bl	80054f6 <HAL_UART_Transmit>
		gameEnd = 1;
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <collision+0x60>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
	}
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000004 	.word	0x20000004
 80025c8:	20000000 	.word	0x20000000
 80025cc:	0800ad2c 	.word	0x0800ad2c
 80025d0:	20002300 	.word	0x20002300
 80025d4:	20000204 	.word	0x20000204

080025d8 <ballMovementWithSpeed>:

/**
 * Ball movement in all direction
 * calculating the new position of the ball and setting it
 */
void ballMovementWithSpeed() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
	int newRow = prevPos.prev_Row + allAngles.thetaX / 90;
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <ballMovementWithSpeed+0xec>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <ballMovementWithSpeed+0xf0>)
 80025ec:	edd3 6a00 	vldr	s13, [r3]
 80025f0:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80026cc <ballMovementWithSpeed+0xf4>
 80025f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002600:	ee17 3a90 	vmov	r3, s15
 8002604:	607b      	str	r3, [r7, #4]
	int newCol = prevPos.prev_Col + allAngles.thetaY / 90;
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <ballMovementWithSpeed+0xec>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002612:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <ballMovementWithSpeed+0xf0>)
 8002614:	edd3 6a01 	vldr	s13, [r3, #4]
 8002618:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80026cc <ballMovementWithSpeed+0xf4>
 800261c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002628:	ee17 3a90 	vmov	r3, s15
 800262c:	603b      	str	r3, [r7, #0]

	if (newRow < 630 && newCol < 1270 && newRow >= 0 && newCol >= 0) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f240 2275 	movw	r2, #629	; 0x275
 8002634:	4293      	cmp	r3, r2
 8002636:	dc40      	bgt.n	80026ba <ballMovementWithSpeed+0xe2>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f240 42f5 	movw	r2, #1269	; 0x4f5
 800263e:	4293      	cmp	r3, r2
 8002640:	dc3b      	bgt.n	80026ba <ballMovementWithSpeed+0xe2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db38      	blt.n	80026ba <ballMovementWithSpeed+0xe2>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db35      	blt.n	80026ba <ballMovementWithSpeed+0xe2>
		if (gameEnd == 0) {
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <ballMovementWithSpeed+0xf8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d131      	bne.n	80026ba <ballMovementWithSpeed+0xe2>
			set_Ball_To_Position(prevPos.prev_Row / 10, prevPos.prev_Col / 10, 0);
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <ballMovementWithSpeed+0xec>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <ballMovementWithSpeed+0xfc>)
 800265c:	fb82 1203 	smull	r1, r2, r2, r3
 8002660:	1092      	asrs	r2, r2, #2
 8002662:	17db      	asrs	r3, r3, #31
 8002664:	1ad0      	subs	r0, r2, r3
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <ballMovementWithSpeed+0xec>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <ballMovementWithSpeed+0xfc>)
 800266c:	fb82 1203 	smull	r1, r2, r2, r3
 8002670:	1092      	asrs	r2, r2, #2
 8002672:	17db      	asrs	r3, r3, #31
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe fd9d 	bl	80011b8 <set_Ball_To_Position>
			set_Ball_To_Position(newRow / 10, newCol / 10, 1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <ballMovementWithSpeed+0xfc>)
 8002682:	fb82 1203 	smull	r1, r2, r2, r3
 8002686:	1092      	asrs	r2, r2, #2
 8002688:	17db      	asrs	r3, r3, #31
 800268a:	1ad0      	subs	r0, r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <ballMovementWithSpeed+0xfc>)
 8002690:	fb82 1203 	smull	r1, r2, r2, r3
 8002694:	1092      	asrs	r2, r2, #2
 8002696:	17db      	asrs	r3, r3, #31
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2201      	movs	r2, #1
 800269c:	4619      	mov	r1, r3
 800269e:	f7fe fd8b 	bl	80011b8 <set_Ball_To_Position>
			prevPos.prev_Row = newRow;
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <ballMovementWithSpeed+0xec>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6013      	str	r3, [r2, #0]
			prevPos.prev_Col = newCol;
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <ballMovementWithSpeed+0xec>)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6053      	str	r3, [r2, #4]

			collision(0);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff ff60 	bl	8002574 <collision>
			collision(1);
 80026b4:	2001      	movs	r0, #1
 80026b6:	f7ff ff5d 	bl	8002574 <collision>
		}
	}
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000225c 	.word	0x2000225c
 80026c8:	20002264 	.word	0x20002264
 80026cc:	42b40000 	.word	0x42b40000
 80026d0:	20000204 	.word	0x20000204
 80026d4:	66666667 	.word	0x66666667

080026d8 <moveLine>:
 * towards the left side, 
 * this line moves faster then the lower line, 
 * speed of the line is not adjusted here, 
 * speed of the line is adjusted when this function is registered in the timeRegister
 */
void moveLine() {
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	if (gameEnd == 0) {
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <moveLine+0x58>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d123      	bne.n	800272c <moveLine+0x54>
		draw_Vert_Line(START_OF_UPPER_LINE, lineCol, LENGTH_UPPER_LINE, 1);
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <moveLine+0x5c>)
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	221e      	movs	r2, #30
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe fe17 	bl	8001320 <draw_Vert_Line>
		draw_Vert_Line(START_OF_UPPER_LINE, lineCol + 1, LENGTH_UPPER_LINE, 0);
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <moveLine+0x5c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	2300      	movs	r3, #0
 80026fa:	221e      	movs	r2, #30
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe fe0f 	bl	8001320 <draw_Vert_Line>
		if (lineCol < 0) {
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <moveLine+0x5c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	da08      	bge.n	800271c <moveLine+0x44>
			lineCol = START_LINE_COL_VALUE;
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <moveLine+0x5c>)
 800270c:	227f      	movs	r2, #127	; 0x7f
 800270e:	601a      	str	r2, [r3, #0]
			score++;
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <moveLine+0x60>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <moveLine+0x60>)
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e004      	b.n	8002726 <moveLine+0x4e>
		} else {
			lineCol--;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <moveLine+0x5c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <moveLine+0x5c>)
 8002724:	6013      	str	r3, [r2, #0]
		}
		collision(1);
 8002726:	2001      	movs	r0, #1
 8002728:	f7ff ff24 	bl	8002574 <collision>
	}
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000204 	.word	0x20000204
 8002734:	20000000 	.word	0x20000000
 8002738:	20000208 	.word	0x20000208

0800273c <slowMoveLine>:
 * The lower line, moves from the right side of the screen
 * towards the left side and will appear again from the 
 * right side when it reaches to left side of the screen
 * The speed of the line is not adjusted here 
 */
void slowMoveLine() {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	if (gameEnd == 0) {
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <slowMoveLine+0x58>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d123      	bne.n	8002790 <slowMoveLine+0x54>
		draw_Vert_Line(START_OF_LOWER_LINE, lineColSlowMove,
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <slowMoveLine+0x5c>)
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	2221      	movs	r2, #33	; 0x21
 8002750:	201e      	movs	r0, #30
 8002752:	f7fe fde5 	bl	8001320 <draw_Vert_Line>
				LENGTH_OF_LOWER_LINE, 1);
		draw_Vert_Line(START_OF_LOWER_LINE, lineColSlowMove + 1,
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <slowMoveLine+0x5c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1c59      	adds	r1, r3, #1
 800275c:	2300      	movs	r3, #0
 800275e:	2221      	movs	r2, #33	; 0x21
 8002760:	201e      	movs	r0, #30
 8002762:	f7fe fddd 	bl	8001320 <draw_Vert_Line>
				LENGTH_OF_LOWER_LINE, 0);
		if (lineColSlowMove < 0) {
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <slowMoveLine+0x5c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	da08      	bge.n	8002780 <slowMoveLine+0x44>
			lineColSlowMove = START_LINE_COL_VALUE;
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <slowMoveLine+0x5c>)
 8002770:	227f      	movs	r2, #127	; 0x7f
 8002772:	601a      	str	r2, [r3, #0]
			score++;
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <slowMoveLine+0x60>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <slowMoveLine+0x60>)
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e004      	b.n	800278a <slowMoveLine+0x4e>
		} else {
			lineColSlowMove--;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <slowMoveLine+0x5c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3b01      	subs	r3, #1
 8002786:	4a04      	ldr	r2, [pc, #16]	; (8002798 <slowMoveLine+0x5c>)
 8002788:	6013      	str	r3, [r2, #0]
		}
		collision(0);
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fef2 	bl	8002574 <collision>
	}
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000204 	.word	0x20000204
 8002798:	20000004 	.word	0x20000004
 800279c:	20000208 	.word	0x20000208

080027a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027a4:	f000 fe10 	bl	80033c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027a8:	f000 f812 	bl	80027d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027ac:	f000 f8f8 	bl	80029a0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80027b0:	f000 f8cc 	bl	800294c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80027b4:	f000 f878 	bl	80028a8 <MX_I2C1_Init>
	MX_TIM10_Init();
 80027b8:	f000 f8a4 	bl	8002904 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim10);
 80027bc:	4803      	ldr	r0, [pc, #12]	; (80027cc <main+0x2c>)
 80027be:	f002 fda8 	bl	8005312 <HAL_TIM_Base_Start>
	app_init();
 80027c2:	f7ff fdf7 	bl	80023b4 <app_init>
	//int valueFromCnt = __HAL_TIM_GET_COUNTER(&htim10);
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		app_loop();
 80027c6:	f7ff fe47 	bl	8002458 <app_loop>
	while (1) {
 80027ca:	e7fc      	b.n	80027c6 <main+0x26>
 80027cc:	200022c0 	.word	0x200022c0

080027d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b094      	sub	sp, #80	; 0x50
 80027d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027d6:	f107 0320 	add.w	r3, r7, #32
 80027da:	2230      	movs	r2, #48	; 0x30
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fd5d 	bl	800629e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage 
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <SystemClock_Config+0xd0>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <SystemClock_Config+0xd0>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <SystemClock_Config+0xd0>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <SystemClock_Config+0xd4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800281c:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <SystemClock_Config+0xd4>)
 800281e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <SystemClock_Config+0xd4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002830:	2302      	movs	r3, #2
 8002832:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002834:	2301      	movs	r3, #1
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002838:	2310      	movs	r3, #16
 800283a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283c:	2302      	movs	r3, #2
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002840:	2300      	movs	r3, #0
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002844:	2310      	movs	r3, #16
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002848:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800284e:	2304      	movs	r3, #4
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002852:	2307      	movs	r3, #7
 8002854:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002856:	f107 0320 	add.w	r3, r7, #32
 800285a:	4618      	mov	r0, r3
 800285c:	f002 f8cc 	bl	80049f8 <HAL_RCC_OscConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <SystemClock_Config+0x9a>
		Error_Handler();
 8002866:	f000 f911 	bl	8002a8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800286a:	230f      	movs	r3, #15
 800286c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800286e:	2302      	movs	r3, #2
 8002870:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fb26 	bl	8004ed8 <HAL_RCC_ClockConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0xc6>
		Error_Handler();
 8002892:	f000 f8fb 	bl	8002a8c <Error_Handler>
	}
}
 8002896:	bf00      	nop
 8002898:	3750      	adds	r7, #80	; 0x50
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000

080028a8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <MX_I2C1_Init+0x54>)
 80028b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028b4:	4a12      	ldr	r2, [pc, #72]	; (8002900 <MX_I2C1_Init+0x58>)
 80028b6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ca:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_I2C1_Init+0x50>)
 80028e6:	f001 f8d3 	bl	8003a90 <HAL_I2C_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80028f0:	f000 f8cc 	bl	8002a8c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	2000226c 	.word	0x2000226c
 80028fc:	40005400 	.word	0x40005400
 8002900:	000186a0 	.word	0x000186a0

08002904 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_TIM10_Init+0x40>)
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <MX_TIM10_Init+0x44>)
 800290c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 79;
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <MX_TIM10_Init+0x40>)
 8002910:	224f      	movs	r2, #79	; 0x4f
 8002912:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <MX_TIM10_Init+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <MX_TIM10_Init+0x40>)
 800291c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002920:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <MX_TIM10_Init+0x40>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_TIM10_Init+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <MX_TIM10_Init+0x40>)
 8002930:	f002 fcc4 	bl	80052bc <HAL_TIM_Base_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM10_Init+0x3a>
		Error_Handler();
 800293a:	f000 f8a7 	bl	8002a8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200022c0 	.word	0x200022c0
 8002948:	40014400 	.word	0x40014400

0800294c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <MX_USART2_UART_Init+0x50>)
 8002954:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800295c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002972:	220c      	movs	r2, #12
 8002974:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_USART2_UART_Init+0x4c>)
 8002984:	f002 fd6a 	bl	800545c <HAL_UART_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800298e:	f000 f87d 	bl	8002a8c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20002300 	.word	0x20002300
 800299c:	40004400 	.word	0x40004400

080029a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <MX_GPIO_Init+0xe0>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <MX_GPIO_Init+0xe0>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <MX_GPIO_Init+0xe0>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <MX_GPIO_Init+0xe0>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <MX_GPIO_Init+0xe0>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8002a26:	2200      	movs	r2, #0
 8002a28:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8002a2c:	4815      	ldr	r0, [pc, #84]	; (8002a84 <MX_GPIO_Init+0xe4>)
 8002a2e:	f001 f815 	bl	8003a5c <HAL_GPIO_WritePin>
					| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
					| GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
					| GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2120      	movs	r1, #32
 8002a36:	4814      	ldr	r0, [pc, #80]	; (8002a88 <MX_GPIO_Init+0xe8>)
 8002a38:	f001 f810 	bl	8003a5c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC0 PC1 PC2 
	 PC3 PC4 PC5 PC6 
	 PC7 PC8 PC9 PC10 
	 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2
 8002a3c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8002a40:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
			| GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <MX_GPIO_Init+0xe4>)
 8002a56:	f000 fe7f 	bl	8003758 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <MX_GPIO_Init+0xe8>)
 8002a72:	f000 fe71 	bl	8003758 <HAL_GPIO_Init>

}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020000 	.word	0x40020000

08002a8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <mpu6050_init>:

/**
 * Initialization of Mpu sensor is done, Error handling, Accelerometer
 * configuration, return 0 if there is an error else return 1
 */
int mpu6050_init() {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef handleReturn;
	// PWR_MGMT_1
	handleReturn = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, PWR_MAGT_1_REG, 1,
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2300      	movs	r3, #0
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	226b      	movs	r2, #107	; 0x6b
 8002ab4:	21d0      	movs	r1, #208	; 0xd0
 8002ab6:	4811      	ldr	r0, [pc, #68]	; (8002afc <mpu6050_init+0x60>)
 8002ab8:	f001 f922 	bl	8003d00 <HAL_I2C_Mem_Write>
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
			0x00, 1,
			HAL_MAX_DELAY);
	if (handleReturn != HAL_OK) {
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <mpu6050_init+0x2e>
		return 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e014      	b.n	8002af4 <mpu6050_init+0x58>
	}

	// ACCEL_CONFIG
	handleReturn = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, ACCEL_CONFIG_REG, 1,
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	9302      	str	r3, [sp, #8]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	221c      	movs	r2, #28
 8002adc:	21d0      	movs	r1, #208	; 0xd0
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <mpu6050_init+0x60>)
 8002ae0:	f001 f90e 	bl	8003d00 <HAL_I2C_Mem_Write>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	71fb      	strb	r3, [r7, #7]
			0x00, 1,
			HAL_MAX_DELAY);
	if (handleReturn != HAL_OK) {
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <mpu6050_init+0x56>
		return 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <mpu6050_init+0x58>
	}
	return 1;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	2000226c 	.word	0x2000226c

08002b00 <isWorking>:
 * for true it reads who am i register
 * who am i register from the mpu sensor is read and the
 * expected value is compared if expected value is same
 * then 1 returned(sensor is working) else 0
 */
int isWorking() {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af04      	add	r7, sp, #16
	uint8_t whoReg;
	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, REG_WHO_AM, 1, &whoReg, 1,
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2301      	movs	r3, #1
 8002b16:	2275      	movs	r2, #117	; 0x75
 8002b18:	21d0      	movs	r1, #208	; 0xd0
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <isWorking+0x34>)
 8002b1c:	f001 f9ea 	bl	8003ef4 <HAL_I2C_Mem_Read>
			HAL_MAX_DELAY);
	if (whoReg == 0x68) {
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	2b68      	cmp	r3, #104	; 0x68
 8002b24:	d101      	bne.n	8002b2a <isWorking+0x2a>
		return 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <isWorking+0x2c>
	}
	return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	2000226c 	.word	0x2000226c

08002b38 <readData>:
 * it is stored in array ACCEL_XOUT for x-axis ACCEL_YOUT for y axis and
 * ACCEL_ZOUT for z-axis, then all the data is for every single axis is combined to
 * 16 bit variables totalX, totalY and totalZ are the variables used for that
 *
 */
int readData() {
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b08b      	sub	sp, #44	; 0x2c
 8002b3c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef handleReturn;

	handleReturn = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, ACCEL_XOUT, 1,
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	9302      	str	r3, [sp, #8]
 8002b44:	2302      	movs	r3, #2
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	4bc7      	ldr	r3, [pc, #796]	; (8002e68 <readData+0x330>)
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	223b      	movs	r2, #59	; 0x3b
 8002b50:	21d0      	movs	r1, #208	; 0xd0
 8002b52:	48c6      	ldr	r0, [pc, #792]	; (8002e6c <readData+0x334>)
 8002b54:	f001 f9ce 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
			AcceleroX, 2,
			HAL_MAX_DELAY);
	if (handleReturn != HAL_OK) {
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <readData+0x2e>
		return 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e173      	b.n	8002e4e <readData+0x316>
	}

	handleReturn = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, ACCEL_YOUT, 1,
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	4bbf      	ldr	r3, [pc, #764]	; (8002e70 <readData+0x338>)
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2301      	movs	r3, #1
 8002b76:	223d      	movs	r2, #61	; 0x3d
 8002b78:	21d0      	movs	r1, #208	; 0xd0
 8002b7a:	48bc      	ldr	r0, [pc, #752]	; (8002e6c <readData+0x334>)
 8002b7c:	f001 f9ba 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]
			AcceleroY, 2,
			HAL_MAX_DELAY);
	if (handleReturn != HAL_OK) {
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <readData+0x56>
		return 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e15f      	b.n	8002e4e <readData+0x316>
	}

	handleReturn = HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, ACCEL_ZOUT, 1,
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	9302      	str	r3, [sp, #8]
 8002b94:	2302      	movs	r3, #2
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	4bb6      	ldr	r3, [pc, #728]	; (8002e74 <readData+0x33c>)
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	223f      	movs	r2, #63	; 0x3f
 8002ba0:	21d0      	movs	r1, #208	; 0xd0
 8002ba2:	48b2      	ldr	r0, [pc, #712]	; (8002e6c <readData+0x334>)
 8002ba4:	f001 f9a6 	bl	8003ef4 <HAL_I2C_Mem_Read>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
			AcceleroZ, 2,
			HAL_MAX_DELAY);
	if (handleReturn != HAL_OK) {
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <readData+0x7e>
		return 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e14b      	b.n	8002e4e <readData+0x316>
	}

	// copy the accelerometer data to 16bit variable
	int16_t totalX = ((uint16_t) AcceleroX[0] << 8) | (uint16_t) AcceleroX[1];
 8002bb6:	4bac      	ldr	r3, [pc, #688]	; (8002e68 <readData+0x330>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	b21a      	sxth	r2, r3
 8002bbe:	4baa      	ldr	r3, [pc, #680]	; (8002e68 <readData+0x330>)
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	81bb      	strh	r3, [r7, #12]
	int16_t totalY = ((uint16_t) AcceleroY[0] << 8) | (uint16_t) AcceleroY[1];
 8002bc8:	4ba9      	ldr	r3, [pc, #676]	; (8002e70 <readData+0x338>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	4ba7      	ldr	r3, [pc, #668]	; (8002e70 <readData+0x338>)
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	817b      	strh	r3, [r7, #10]
	int16_t totalZ = ((uint16_t) AcceleroZ[0] << 8) | (uint16_t) AcceleroZ[1];
 8002bda:	4ba6      	ldr	r3, [pc, #664]	; (8002e74 <readData+0x33c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	4ba4      	ldr	r3, [pc, #656]	; (8002e74 <readData+0x33c>)
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	813b      	strh	r3, [r7, #8]

	//totalX = (float) totalX/16384.0;
	// to float type 
	float totalX2 = totalX / 16.384;
 8002bec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc9f 	bl	8000534 <__aeabi_i2d>
 8002bf6:	a398      	add	r3, pc, #608	; (adr r3, 8002e58 <readData+0x320>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f7fd fe2e 	bl	800085c <__aeabi_ddiv>
 8002c00:	4603      	mov	r3, r0
 8002c02:	460c      	mov	r4, r1
 8002c04:	4618      	mov	r0, r3
 8002c06:	4621      	mov	r1, r4
 8002c08:	f7fd fff6 	bl	8000bf8 <__aeabi_d2f>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	617b      	str	r3, [r7, #20]
	float totalY2 = totalY / 16.384;
 8002c10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fc8d 	bl	8000534 <__aeabi_i2d>
 8002c1a:	a38f      	add	r3, pc, #572	; (adr r3, 8002e58 <readData+0x320>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fe1c 	bl	800085c <__aeabi_ddiv>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	f7fd ffe4 	bl	8000bf8 <__aeabi_d2f>
 8002c30:	4603      	mov	r3, r0
 8002c32:	613b      	str	r3, [r7, #16]
	float totalZ2 = totalZ / 16.384;
 8002c34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fc7b 	bl	8000534 <__aeabi_i2d>
 8002c3e:	a386      	add	r3, pc, #536	; (adr r3, 8002e58 <readData+0x320>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fe0a 	bl	800085c <__aeabi_ddiv>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	4621      	mov	r1, r4
 8002c50:	f7fd ffd2 	bl	8000bf8 <__aeabi_d2f>
 8002c54:	4603      	mov	r3, r0
 8002c56:	607b      	str	r3, [r7, #4]

	// for printing the data copy it to two decimal place in char type array
	sprintf(buffX, "%.2f", totalX2);
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f7fd fc7d 	bl	8000558 <__aeabi_f2d>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460c      	mov	r4, r1
 8002c62:	461a      	mov	r2, r3
 8002c64:	4623      	mov	r3, r4
 8002c66:	4984      	ldr	r1, [pc, #528]	; (8002e78 <readData+0x340>)
 8002c68:	4884      	ldr	r0, [pc, #528]	; (8002e7c <readData+0x344>)
 8002c6a:	f004 f965 	bl	8006f38 <siprintf>
	sprintf(buffY, "%.2f", totalY2);
 8002c6e:	6938      	ldr	r0, [r7, #16]
 8002c70:	f7fd fc72 	bl	8000558 <__aeabi_f2d>
 8002c74:	4603      	mov	r3, r0
 8002c76:	460c      	mov	r4, r1
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	497e      	ldr	r1, [pc, #504]	; (8002e78 <readData+0x340>)
 8002c7e:	4880      	ldr	r0, [pc, #512]	; (8002e80 <readData+0x348>)
 8002c80:	f004 f95a 	bl	8006f38 <siprintf>
	sprintf(buffZ, "%.2f", totalZ2);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fd fc67 	bl	8000558 <__aeabi_f2d>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	460c      	mov	r4, r1
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4623      	mov	r3, r4
 8002c92:	4979      	ldr	r1, [pc, #484]	; (8002e78 <readData+0x340>)
 8002c94:	487b      	ldr	r0, [pc, #492]	; (8002e84 <readData+0x34c>)
 8002c96:	f004 f94f 	bl	8006f38 <siprintf>

	if (totalX2 > 1000) {
 8002c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c9e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002e88 <readData+0x350>
 8002ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	dd02      	ble.n	8002cb2 <readData+0x17a>
		totalX2 = 1000;
 8002cac:	4b77      	ldr	r3, [pc, #476]	; (8002e8c <readData+0x354>)
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e00a      	b.n	8002cc8 <readData+0x190>
	} else if (totalX2 < -1000) {
 8002cb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cb6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002e90 <readData+0x358>
 8002cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	d501      	bpl.n	8002cc8 <readData+0x190>
		totalX2 = -1000;
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <readData+0x35c>)
 8002cc6:	617b      	str	r3, [r7, #20]
	}

	if (totalY2 > 1000) {
 8002cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ccc:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002e88 <readData+0x350>
 8002cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	dd02      	ble.n	8002ce0 <readData+0x1a8>
		totalY2 = 1000;
 8002cda:	4b6c      	ldr	r3, [pc, #432]	; (8002e8c <readData+0x354>)
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e00a      	b.n	8002cf6 <readData+0x1be>
	} else if (totalY2 < -1000) {
 8002ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002e90 <readData+0x358>
 8002ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	d501      	bpl.n	8002cf6 <readData+0x1be>
		totalY2 = -1000;
 8002cf2:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <readData+0x35c>)
 8002cf4:	613b      	str	r3, [r7, #16]
	}

	if (totalZ2 > 1000) {
 8002cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cfa:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002e88 <readData+0x350>
 8002cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	dd02      	ble.n	8002d0e <readData+0x1d6>
		totalZ2 = 1000;
 8002d08:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <readData+0x354>)
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	e00a      	b.n	8002d24 <readData+0x1ec>
	} else if (totalZ2 < -1000) {
 8002d0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d12:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002e90 <readData+0x358>
 8002d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1e:	d501      	bpl.n	8002d24 <readData+0x1ec>
		totalZ2 = -1000;
 8002d20:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <readData+0x35c>)
 8002d22:	607b      	str	r3, [r7, #4]
	}
	
	// 180 / pi
	// calculate angles thetaX and thetaY, converting into degree from radians
	allAngles.thetaX = asin(totalX2 / 1000) / 2 / 3.141592654 * 360;
 8002d24:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d28:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002e88 <readData+0x350>
 8002d2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d30:	ee16 0a90 	vmov	r0, s13
 8002d34:	f7fd fc10 	bl	8000558 <__aeabi_f2d>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	ec44 3b10 	vmov	d0, r3, r4
 8002d40:	f006 ffe2 	bl	8009d08 <asin>
 8002d44:	ec51 0b10 	vmov	r0, r1, d0
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d50:	f7fd fd84 	bl	800085c <__aeabi_ddiv>
 8002d54:	4603      	mov	r3, r0
 8002d56:	460c      	mov	r4, r1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	a340      	add	r3, pc, #256	; (adr r3, 8002e60 <readData+0x328>)
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	f7fd fd7b 	bl	800085c <__aeabi_ddiv>
 8002d66:	4603      	mov	r3, r0
 8002d68:	460c      	mov	r4, r1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <readData+0x360>)
 8002d74:	f7fd fc48 	bl	8000608 <__aeabi_dmul>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4621      	mov	r1, r4
 8002d80:	f7fd ff3a 	bl	8000bf8 <__aeabi_d2f>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <readData+0x364>)
 8002d88:	601a      	str	r2, [r3, #0]
	allAngles.thetaX = allAngles.thetaX * 10;
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <readData+0x364>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <readData+0x364>)
 8002d9a:	edc3 7a00 	vstr	s15, [r3]
	allAngles.thetaY = asin(totalY2 / 1000) / 2 / 3.141592654 * 360;
 8002d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002da2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002e88 <readData+0x350>
 8002da6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002daa:	ee16 0a90 	vmov	r0, s13
 8002dae:	f7fd fbd3 	bl	8000558 <__aeabi_f2d>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	ec44 3b10 	vmov	d0, r3, r4
 8002dba:	f006 ffa5 	bl	8009d08 <asin>
 8002dbe:	ec51 0b10 	vmov	r0, r1, d0
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dca:	f7fd fd47 	bl	800085c <__aeabi_ddiv>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	a322      	add	r3, pc, #136	; (adr r3, 8002e60 <readData+0x328>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd fd3e 	bl	800085c <__aeabi_ddiv>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4618      	mov	r0, r3
 8002de6:	4621      	mov	r1, r4
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <readData+0x360>)
 8002dee:	f7fd fc0b 	bl	8000608 <__aeabi_dmul>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	4618      	mov	r0, r3
 8002df8:	4621      	mov	r1, r4
 8002dfa:	f7fd fefd 	bl	8000bf8 <__aeabi_d2f>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <readData+0x364>)
 8002e02:	605a      	str	r2, [r3, #4]
	allAngles.thetaY = allAngles.thetaY * 10;
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <readData+0x364>)
 8002e06:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e12:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <readData+0x364>)
 8002e14:	edc3 7a01 	vstr	s15, [r3, #4]

	// copy Theta
	sprintf(buffTiltX, "%.2f", allAngles.thetaX);
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <readData+0x364>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb9b 	bl	8000558 <__aeabi_f2d>
 8002e22:	4603      	mov	r3, r0
 8002e24:	460c      	mov	r4, r1
 8002e26:	461a      	mov	r2, r3
 8002e28:	4623      	mov	r3, r4
 8002e2a:	4913      	ldr	r1, [pc, #76]	; (8002e78 <readData+0x340>)
 8002e2c:	481c      	ldr	r0, [pc, #112]	; (8002ea0 <readData+0x368>)
 8002e2e:	f004 f883 	bl	8006f38 <siprintf>
	sprintf(buffTiltY, "%.2f", allAngles.thetaY);
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <readData+0x364>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb8e 	bl	8000558 <__aeabi_f2d>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	461a      	mov	r2, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <readData+0x340>)
 8002e46:	4817      	ldr	r0, [pc, #92]	; (8002ea4 <readData+0x36c>)
 8002e48:	f004 f876 	bl	8006f38 <siprintf>

	return 1;
 8002e4c:	2301      	movs	r3, #1
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	bf00      	nop
 8002e58:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e5c:	4030624d 	.word	0x4030624d
 8002e60:	54524550 	.word	0x54524550
 8002e64:	400921fb 	.word	0x400921fb
 8002e68:	20002368 	.word	0x20002368
 8002e6c:	2000226c 	.word	0x2000226c
 8002e70:	20002354 	.word	0x20002354
 8002e74:	20002340 	.word	0x20002340
 8002e78:	0800ad40 	.word	0x0800ad40
 8002e7c:	2000238c 	.word	0x2000238c
 8002e80:	2000237c 	.word	0x2000237c
 8002e84:	20002358 	.word	0x20002358
 8002e88:	447a0000 	.word	0x447a0000
 8002e8c:	447a0000 	.word	0x447a0000
 8002e90:	c47a0000 	.word	0xc47a0000
 8002e94:	c47a0000 	.word	0xc47a0000
 8002e98:	40768000 	.word	0x40768000
 8002e9c:	20002264 	.word	0x20002264
 8002ea0:	2000236c 	.word	0x2000236c
 8002ea4:	20002344 	.word	0x20002344

08002ea8 <printResult>:

/**
 * Print mpu results on the hterm
 */
int printResult() {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "AX:  ", 5, HAL_MAX_DELAY);
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	493b      	ldr	r1, [pc, #236]	; (8002fa0 <printResult+0xf8>)
 8002eb4:	483b      	ldr	r0, [pc, #236]	; (8002fa4 <printResult+0xfc>)
 8002eb6:	f002 fb1e 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffX, strlen(buffX), HAL_MAX_DELAY);
 8002eba:	483b      	ldr	r0, [pc, #236]	; (8002fa8 <printResult+0x100>)
 8002ebc:	f7fd f990 	bl	80001e0 <strlen>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec8:	4937      	ldr	r1, [pc, #220]	; (8002fa8 <printResult+0x100>)
 8002eca:	4836      	ldr	r0, [pc, #216]	; (8002fa4 <printResult+0xfc>)
 8002ecc:	f002 fb13 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "   ", 3, HAL_MAX_DELAY);
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	4935      	ldr	r1, [pc, #212]	; (8002fac <printResult+0x104>)
 8002ed8:	4832      	ldr	r0, [pc, #200]	; (8002fa4 <printResult+0xfc>)
 8002eda:	f002 fb0c 	bl	80054f6 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, "AY:  ", 5, HAL_MAX_DELAY);
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee2:	2205      	movs	r2, #5
 8002ee4:	4932      	ldr	r1, [pc, #200]	; (8002fb0 <printResult+0x108>)
 8002ee6:	482f      	ldr	r0, [pc, #188]	; (8002fa4 <printResult+0xfc>)
 8002ee8:	f002 fb05 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffY, strlen(buffY), HAL_MAX_DELAY);
 8002eec:	4831      	ldr	r0, [pc, #196]	; (8002fb4 <printResult+0x10c>)
 8002eee:	f7fd f977 	bl	80001e0 <strlen>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	492e      	ldr	r1, [pc, #184]	; (8002fb4 <printResult+0x10c>)
 8002efc:	4829      	ldr	r0, [pc, #164]	; (8002fa4 <printResult+0xfc>)
 8002efe:	f002 fafa 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "   ", 3, HAL_MAX_DELAY);
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	2203      	movs	r2, #3
 8002f08:	4928      	ldr	r1, [pc, #160]	; (8002fac <printResult+0x104>)
 8002f0a:	4826      	ldr	r0, [pc, #152]	; (8002fa4 <printResult+0xfc>)
 8002f0c:	f002 faf3 	bl	80054f6 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, "AZ:  ", 5, HAL_MAX_DELAY);
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	2205      	movs	r2, #5
 8002f16:	4928      	ldr	r1, [pc, #160]	; (8002fb8 <printResult+0x110>)
 8002f18:	4822      	ldr	r0, [pc, #136]	; (8002fa4 <printResult+0xfc>)
 8002f1a:	f002 faec 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffZ, strlen(buffZ), HAL_MAX_DELAY);
 8002f1e:	4827      	ldr	r0, [pc, #156]	; (8002fbc <printResult+0x114>)
 8002f20:	f7fd f95e 	bl	80001e0 <strlen>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2c:	4923      	ldr	r1, [pc, #140]	; (8002fbc <printResult+0x114>)
 8002f2e:	481d      	ldr	r0, [pc, #116]	; (8002fa4 <printResult+0xfc>)
 8002f30:	f002 fae1 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "   ;", 3, HAL_MAX_DELAY);
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	2203      	movs	r2, #3
 8002f3a:	4921      	ldr	r1, [pc, #132]	; (8002fc0 <printResult+0x118>)
 8002f3c:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <printResult+0xfc>)
 8002f3e:	f002 fada 	bl	80054f6 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, "  TX : ", 7, HAL_MAX_DELAY);
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	2207      	movs	r2, #7
 8002f48:	491e      	ldr	r1, [pc, #120]	; (8002fc4 <printResult+0x11c>)
 8002f4a:	4816      	ldr	r0, [pc, #88]	; (8002fa4 <printResult+0xfc>)
 8002f4c:	f002 fad3 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffTiltX, strlen(buffTiltX), HAL_MAX_DELAY);
 8002f50:	481d      	ldr	r0, [pc, #116]	; (8002fc8 <printResult+0x120>)
 8002f52:	f7fd f945 	bl	80001e0 <strlen>
 8002f56:	4603      	mov	r3, r0
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	491a      	ldr	r1, [pc, #104]	; (8002fc8 <printResult+0x120>)
 8002f60:	4810      	ldr	r0, [pc, #64]	; (8002fa4 <printResult+0xfc>)
 8002f62:	f002 fac8 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "  TY : ", 7, HAL_MAX_DELAY);
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	4917      	ldr	r1, [pc, #92]	; (8002fcc <printResult+0x124>)
 8002f6e:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <printResult+0xfc>)
 8002f70:	f002 fac1 	bl	80054f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, buffTiltY, strlen(buffTiltY), HAL_MAX_DELAY);
 8002f74:	4816      	ldr	r0, [pc, #88]	; (8002fd0 <printResult+0x128>)
 8002f76:	f7fd f933 	bl	80001e0 <strlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	4913      	ldr	r1, [pc, #76]	; (8002fd0 <printResult+0x128>)
 8002f84:	4807      	ldr	r0, [pc, #28]	; (8002fa4 <printResult+0xfc>)
 8002f86:	f002 fab6 	bl	80054f6 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, "\n", 1, HAL_MAX_DELAY);
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4910      	ldr	r1, [pc, #64]	; (8002fd4 <printResult+0x12c>)
 8002f92:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <printResult+0xfc>)
 8002f94:	f002 faaf 	bl	80054f6 <HAL_UART_Transmit>

	return 1;
 8002f98:	2301      	movs	r3, #1
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	0800ad48 	.word	0x0800ad48
 8002fa4:	20002300 	.word	0x20002300
 8002fa8:	2000238c 	.word	0x2000238c
 8002fac:	0800ad50 	.word	0x0800ad50
 8002fb0:	0800ad54 	.word	0x0800ad54
 8002fb4:	2000237c 	.word	0x2000237c
 8002fb8:	0800ad5c 	.word	0x0800ad5c
 8002fbc:	20002358 	.word	0x20002358
 8002fc0:	0800ad64 	.word	0x0800ad64
 8002fc4:	0800ad6c 	.word	0x0800ad6c
 8002fc8:	2000236c 	.word	0x2000236c
 8002fcc:	0800ad74 	.word	0x0800ad74
 8002fd0:	20002344 	.word	0x20002344
 8002fd4:	0800ad7c 	.word	0x0800ad7c

08002fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_MspInit+0x4c>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <HAL_MspInit+0x4c>)
 8002fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_MspInit+0x4c>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_MspInit+0x4c>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <HAL_MspInit+0x4c>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_MspInit+0x4c>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003016:	2007      	movs	r0, #7
 8003018:	f000 fb3a 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40023800 	.word	0x40023800

08003028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_I2C_MspInit+0x84>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d12c      	bne.n	80030a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_I2C_MspInit+0x88>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <HAL_I2C_MspInit+0x88>)
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_I2C_MspInit+0x88>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800306a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800306c:	2312      	movs	r3, #18
 800306e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003070:	2301      	movs	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003074:	2303      	movs	r3, #3
 8003076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003078:	2304      	movs	r3, #4
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	4619      	mov	r1, r3
 8003082:	480c      	ldr	r0, [pc, #48]	; (80030b4 <HAL_I2C_MspInit+0x8c>)
 8003084:	f000 fb68 	bl	8003758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_I2C_MspInit+0x88>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_I2C_MspInit+0x88>)
 8003092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003096:	6413      	str	r3, [r2, #64]	; 0x40
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_I2C_MspInit+0x88>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030a4:	bf00      	nop
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40005400 	.word	0x40005400
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020400 	.word	0x40020400

080030b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <HAL_TIM_Base_MspInit+0x3c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10d      	bne.n	80030e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_TIM_Base_MspInit+0x40>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <HAL_TIM_Base_MspInit+0x40>)
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_TIM_Base_MspInit+0x40>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40023800 	.word	0x40023800

080030fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <HAL_UART_MspInit+0x94>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d133      	bne.n	8003186 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_UART_MspInit+0x98>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_UART_MspInit+0x98>)
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_UART_MspInit+0x98>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_UART_MspInit+0x98>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_UART_MspInit+0x98>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_UART_MspInit+0x98>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003156:	230c      	movs	r3, #12
 8003158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003166:	2307      	movs	r3, #7
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	4619      	mov	r1, r3
 8003170:	4809      	ldr	r0, [pc, #36]	; (8003198 <HAL_UART_MspInit+0x9c>)
 8003172:	f000 faf1 	bl	8003758 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	2026      	movs	r0, #38	; 0x26
 800317c:	f000 fa93 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003180:	2026      	movs	r0, #38	; 0x26
 8003182:	f000 faac 	bl	80036de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40004400 	.word	0x40004400
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000

0800319c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ae:	e7fe      	b.n	80031ae <HardFault_Handler+0x4>

080031b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <MemManage_Handler+0x4>

080031b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ba:	e7fe      	b.n	80031ba <BusFault_Handler+0x4>

080031bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <UsageFault_Handler+0x4>

080031c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	timer_tick();
 80031f0:	f000 f850 	bl	8003294 <timer_tick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f4:	f000 f93a 	bl	800346c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <USART2_IRQHandler+0x10>)
 8003202:	f002 fa11 	bl	8005628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20002300 	.word	0x20002300

08003210 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <_sbrk+0x50>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <_sbrk+0x16>
		heap_end = &end;
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <_sbrk+0x50>)
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <_sbrk+0x54>)
 8003224:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <_sbrk+0x50>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <_sbrk+0x50>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	466a      	mov	r2, sp
 8003236:	4293      	cmp	r3, r2
 8003238:	d907      	bls.n	800324a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800323a:	f002 fffb 	bl	8006234 <__errno>
 800323e:	4602      	mov	r2, r0
 8003240:	230c      	movs	r3, #12
 8003242:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	e006      	b.n	8003258 <_sbrk+0x48>
	}

	heap_end += incr;
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <_sbrk+0x50>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	4a03      	ldr	r2, [pc, #12]	; (8003260 <_sbrk+0x50>)
 8003254:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	2000020c 	.word	0x2000020c
 8003264:	200023a8 	.word	0x200023a8

08003268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <SystemInit+0x28>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <SystemInit+0x28>)
 8003274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SystemInit+0x28>)
 800327e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003282:	609a      	str	r2, [r3, #8]
#endif
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <timer_tick>:

/*
 * Process next tick.
 * Must be called periodically with a frequency of TIMER_TICKRATE_HZ
 */
void timer_tick() {
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
	for (int i = 0; i < count_of_regFunc; i++) {
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	e026      	b.n	80032ee <timer_tick+0x5a>
		Arr[i].ticks++;
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <timer_tick+0x70>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	88db      	ldrh	r3, [r3, #6]
 80032aa:	3301      	adds	r3, #1
 80032ac:	b299      	uxth	r1, r3
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <timer_tick+0x70>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	460a      	mov	r2, r1
 80032b8:	80da      	strh	r2, [r3, #6]
		if (Arr[i].ticks == Arr[i].div) {
 80032ba:	4a12      	ldr	r2, [pc, #72]	; (8003304 <timer_tick+0x70>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	88da      	ldrh	r2, [r3, #6]
 80032c4:	490f      	ldr	r1, [pc, #60]	; (8003304 <timer_tick+0x70>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	440b      	add	r3, r1
 80032cc:	889b      	ldrh	r3, [r3, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10a      	bne.n	80032e8 <timer_tick+0x54>
			Arr[i].ticks = 0;
 80032d2:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <timer_tick+0x70>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	2200      	movs	r2, #0
 80032dc:	80da      	strh	r2, [r3, #6]
			(Arr[i].timerfp)();
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <timer_tick+0x70>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032e6:	4798      	blx	r3
	for (int i = 0; i < count_of_regFunc; i++) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3301      	adds	r3, #1
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <timer_tick+0x74>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	dbd2      	blt.n	80032a0 <timer_tick+0xc>
		}
	}
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000214 	.word	0x20000214
 8003308:	20000210 	.word	0x20000210

0800330c <timer_register>:
 * "TIMER_TICKRATE_HZ" / "div".
 * @param timerfp Pointer to the timer function that is to be called
 * @param div Clock divider f_out = f_in / div
 * Return: 0 for success, others for failure
 */
int timer_register(timer_fp_t timerfp, uint32_t div) {
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
	if (count_of_regFunc < TIMER_MAX_TIMERS) {
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <timer_register+0x60>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b07      	cmp	r3, #7
 800331c:	d81e      	bhi.n	800335c <timer_register+0x50>
		Arr[count_of_regFunc].timerfp = timerfp;
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <timer_register+0x60>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	4a12      	ldr	r2, [pc, #72]	; (8003370 <timer_register+0x64>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
		Arr[count_of_regFunc].div = div;
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <timer_register+0x60>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b291      	uxth	r1, r2
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <timer_register+0x64>)
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	460a      	mov	r2, r1
 800333c:	809a      	strh	r2, [r3, #4]
		Arr[count_of_regFunc].ticks = 0;
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <timer_register+0x60>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <timer_register+0x64>)
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	2200      	movs	r2, #0
 800334a:	80da      	strh	r2, [r3, #6]
		count_of_regFunc++;
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <timer_register+0x60>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <timer_register+0x60>)
 8003356:	701a      	strb	r2, [r3, #0]
		return 0;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <timer_register+0x52>
	}

	return 1;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000210 	.word	0x20000210
 8003370:	20000214 	.word	0x20000214

08003374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800337a:	e003      	b.n	8003384 <LoopCopyDataInit>

0800337c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800337e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003382:	3104      	adds	r1, #4

08003384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003384:	480b      	ldr	r0, [pc, #44]	; (80033b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800338a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800338c:	d3f6      	bcc.n	800337c <CopyDataInit>
  ldr  r2, =_sbss
 800338e:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003390:	e002      	b.n	8003398 <LoopFillZerobss>

08003392 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003394:	f842 3b04 	str.w	r3, [r2], #4

08003398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800339a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800339c:	d3f9      	bcc.n	8003392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800339e:	f7ff ff63 	bl	8003268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033a2:	f002 ff4d 	bl	8006240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a6:	f7ff f9fb 	bl	80027a0 <main>
  bx  lr    
 80033aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033ac:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80033b0:	0800b064 	.word	0x0800b064
  ldr  r0, =_sdata
 80033b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033b8:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80033bc:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80033c0:	200023a4 	.word	0x200023a4

080033c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c4:	e7fe      	b.n	80033c4 <ADC_IRQHandler>
	...

080033c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_Init+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <HAL_Init+0x40>)
 80033d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_Init+0x40>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_Init+0x40>)
 80033de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_Init+0x40>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <HAL_Init+0x40>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f000 f94d 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f000 f808 	bl	800340c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033fc:	f7ff fdec 	bl	8002fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00

0800340c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_InitTick+0x54>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_InitTick+0x58>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003422:	fbb3 f3f1 	udiv	r3, r3, r1
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f965 	bl	80036fa <HAL_SYSTICK_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e00e      	b.n	8003458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b0f      	cmp	r3, #15
 800343e:	d80a      	bhi.n	8003456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003440:	2200      	movs	r2, #0
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	f000 f92d 	bl	80036a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800344c:	4a06      	ldr	r2, [pc, #24]	; (8003468 <HAL_InitTick+0x5c>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000008 	.word	0x20000008
 8003464:	20000010 	.word	0x20000010
 8003468:	2000000c 	.word	0x2000000c

0800346c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_IncTick+0x20>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_IncTick+0x24>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4413      	add	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_IncTick+0x24>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000010 	.word	0x20000010
 8003490:	2000239c 	.word	0x2000239c

08003494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return uwTick;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_GetTick+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	2000239c 	.word	0x2000239c

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff ffee 	bl	8003494 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d005      	beq.n	80034d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_Delay+0x40>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034d2:	bf00      	nop
 80034d4:	f7ff ffde 	bl	8003494 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d8f7      	bhi.n	80034d4 <HAL_Delay+0x28>
  {
  }
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000010 	.word	0x20000010

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	db0b      	blt.n	800357e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4907      	ldr	r1, [pc, #28]	; (800358c <__NVIC_EnableIRQ+0x38>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2001      	movs	r0, #1
 8003576:	fa00 f202 	lsl.w	r2, r0, r2
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000e100 	.word	0xe000e100

08003590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db0a      	blt.n	80035ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	490c      	ldr	r1, [pc, #48]	; (80035dc <__NVIC_SetPriority+0x4c>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	440b      	add	r3, r1
 80035b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b8:	e00a      	b.n	80035d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <__NVIC_SetPriority+0x50>)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3b04      	subs	r3, #4
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	761a      	strb	r2, [r3, #24]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000e100 	.word	0xe000e100
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f1c3 0307 	rsb	r3, r3, #7
 80035fe:	2b04      	cmp	r3, #4
 8003600:	bf28      	it	cs
 8003602:	2304      	movcs	r3, #4
 8003604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3304      	adds	r3, #4
 800360a:	2b06      	cmp	r3, #6
 800360c:	d902      	bls.n	8003614 <NVIC_EncodePriority+0x30>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3b03      	subs	r3, #3
 8003612:	e000      	b.n	8003616 <NVIC_EncodePriority+0x32>
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	401a      	ands	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800362c:	f04f 31ff 	mov.w	r1, #4294967295
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43d9      	mvns	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	4313      	orrs	r3, r2
         );
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365c:	d301      	bcc.n	8003662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <SysTick_Config+0x40>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366a:	210f      	movs	r1, #15
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	f7ff ff8e 	bl	8003590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <SysTick_Config+0x40>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <SysTick_Config+0x40>)
 800367c:	2207      	movs	r2, #7
 800367e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000e010 	.word	0xe000e010

08003690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff29 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff3e 	bl	8003538 <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff8e 	bl	80035e4 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5d 	bl	8003590 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff31 	bl	8003554 <__NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffa2 	bl	800364c <SysTick_Config>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e00c      	b.n	800374a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2205      	movs	r2, #5
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e159      	b.n	8003a28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	429a      	cmp	r2, r3
 800378e:	f040 8148 	bne.w	8003a22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d00b      	beq.n	80037b2 <HAL_GPIO_Init+0x5a>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d007      	beq.n	80037b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037a6:	2b11      	cmp	r3, #17
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b12      	cmp	r3, #18
 80037b0:	d130      	bne.n	8003814 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	2203      	movs	r2, #3
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e8:	2201      	movs	r2, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 0201 	and.w	r2, r3, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0xfc>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b12      	cmp	r3, #18
 8003852:	d123      	bne.n	800389c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	220f      	movs	r2, #15
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	08da      	lsrs	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3208      	adds	r2, #8
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80a2 	beq.w	8003a22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <HAL_GPIO_Init+0x2e4>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	4a55      	ldr	r2, [pc, #340]	; (8003a3c <HAL_GPIO_Init+0x2e4>)
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ec:	6453      	str	r3, [r2, #68]	; 0x44
 80038ee:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_GPIO_Init+0x2e4>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fa:	4a51      	ldr	r2, [pc, #324]	; (8003a40 <HAL_GPIO_Init+0x2e8>)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	220f      	movs	r2, #15
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a48      	ldr	r2, [pc, #288]	; (8003a44 <HAL_GPIO_Init+0x2ec>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d019      	beq.n	800395a <HAL_GPIO_Init+0x202>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a47      	ldr	r2, [pc, #284]	; (8003a48 <HAL_GPIO_Init+0x2f0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0x1fe>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <HAL_GPIO_Init+0x2f4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00d      	beq.n	8003952 <HAL_GPIO_Init+0x1fa>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a45      	ldr	r2, [pc, #276]	; (8003a50 <HAL_GPIO_Init+0x2f8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_GPIO_Init+0x1f6>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a44      	ldr	r2, [pc, #272]	; (8003a54 <HAL_GPIO_Init+0x2fc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_GPIO_Init+0x1f2>
 8003946:	2304      	movs	r3, #4
 8003948:	e008      	b.n	800395c <HAL_GPIO_Init+0x204>
 800394a:	2307      	movs	r3, #7
 800394c:	e006      	b.n	800395c <HAL_GPIO_Init+0x204>
 800394e:	2303      	movs	r3, #3
 8003950:	e004      	b.n	800395c <HAL_GPIO_Init+0x204>
 8003952:	2302      	movs	r3, #2
 8003954:	e002      	b.n	800395c <HAL_GPIO_Init+0x204>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_GPIO_Init+0x204>
 800395a:	2300      	movs	r3, #0
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	f002 0203 	and.w	r2, r2, #3
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	4093      	lsls	r3, r2
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800396c:	4934      	ldr	r1, [pc, #208]	; (8003a40 <HAL_GPIO_Init+0x2e8>)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3302      	adds	r3, #2
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_GPIO_Init+0x300>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800399e:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <HAL_GPIO_Init+0x300>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_GPIO_Init+0x300>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c8:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <HAL_GPIO_Init+0x300>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_GPIO_Init+0x300>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_GPIO_Init+0x300>)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039f8:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_GPIO_Init+0x300>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_GPIO_Init+0x300>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f67f aea2 	bls.w	8003774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	3724      	adds	r7, #36	; 0x24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40013800 	.word	0x40013800
 8003a44:	40020000 	.word	0x40020000
 8003a48:	40020400 	.word	0x40020400
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020c00 	.word	0x40020c00
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40013c00 	.word	0x40013c00

08003a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a78:	e003      	b.n	8003a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	041a      	lsls	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	619a      	str	r2, [r3, #24]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e11f      	b.n	8003ce2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fab6 	bl	8003028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af4:	f001 fbba 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a7b      	ldr	r2, [pc, #492]	; (8003cec <HAL_I2C_Init+0x25c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d807      	bhi.n	8003b14 <HAL_I2C_Init+0x84>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a7a      	ldr	r2, [pc, #488]	; (8003cf0 <HAL_I2C_Init+0x260>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf94      	ite	ls
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	2300      	movhi	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e006      	b.n	8003b22 <HAL_I2C_Init+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a77      	ldr	r2, [pc, #476]	; (8003cf4 <HAL_I2C_Init+0x264>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0db      	b.n	8003ce2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a72      	ldr	r2, [pc, #456]	; (8003cf8 <HAL_I2C_Init+0x268>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0c9b      	lsrs	r3, r3, #18
 8003b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a64      	ldr	r2, [pc, #400]	; (8003cec <HAL_I2C_Init+0x25c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <HAL_I2C_Init+0xd4>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e009      	b.n	8003b78 <HAL_I2C_Init+0xe8>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4a63      	ldr	r2, [pc, #396]	; (8003cfc <HAL_I2C_Init+0x26c>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	3301      	adds	r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4956      	ldr	r1, [pc, #344]	; (8003cec <HAL_I2C_Init+0x25c>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	d80d      	bhi.n	8003bb4 <HAL_I2C_Init+0x124>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e59      	subs	r1, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	bf38      	it	cc
 8003bb0:	2304      	movcc	r3, #4
 8003bb2:	e04f      	b.n	8003c54 <HAL_I2C_Init+0x1c4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <HAL_I2C_Init+0x150>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e58      	subs	r0, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e012      	b.n	8003c06 <HAL_I2C_Init+0x176>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Init+0x17e>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e022      	b.n	8003c54 <HAL_I2C_Init+0x1c4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10e      	bne.n	8003c34 <HAL_I2C_Init+0x1a4>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e58      	subs	r0, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	440b      	add	r3, r1
 8003c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c32:	e00f      	b.n	8003c54 <HAL_I2C_Init+0x1c4>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	0099      	lsls	r1, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	6809      	ldr	r1, [r1, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6911      	ldr	r1, [r2, #16]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	4311      	orrs	r1, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	000186a0 	.word	0x000186a0
 8003cf0:	001e847f 	.word	0x001e847f
 8003cf4:	003d08ff 	.word	0x003d08ff
 8003cf8:	431bde83 	.word	0x431bde83
 8003cfc:	10624dd3 	.word	0x10624dd3

08003d00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	817b      	strh	r3, [r7, #10]
 8003d12:	460b      	mov	r3, r1
 8003d14:	813b      	strh	r3, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d1a:	f7ff fbbb 	bl	8003494 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	f040 80d9 	bne.w	8003ee0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	2319      	movs	r3, #25
 8003d34:	2201      	movs	r2, #1
 8003d36:	496d      	ldr	r1, [pc, #436]	; (8003eec <HAL_I2C_Mem_Write+0x1ec>)
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 fc7f 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
 8003d46:	e0cc      	b.n	8003ee2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_I2C_Mem_Write+0x56>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e0c5      	b.n	8003ee2 <HAL_I2C_Mem_Write+0x1e2>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d007      	beq.n	8003d7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2221      	movs	r2, #33	; 0x21
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a4d      	ldr	r2, [pc, #308]	; (8003ef0 <HAL_I2C_Mem_Write+0x1f0>)
 8003dbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dbe:	88f8      	ldrh	r0, [r7, #6]
 8003dc0:	893a      	ldrh	r2, [r7, #8]
 8003dc2:	8979      	ldrh	r1, [r7, #10]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	4603      	mov	r3, r0
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fab6 	bl	8004340 <I2C_RequestMemoryWrite>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d052      	beq.n	8003e80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e081      	b.n	8003ee2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fd00 	bl	80047e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d107      	bne.n	8003e06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e06b      	b.n	8003ee2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	781a      	ldrb	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d11b      	bne.n	8003e80 <HAL_I2C_Mem_Write+0x180>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d017      	beq.n	8003e80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1aa      	bne.n	8003dde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fcec 	bl	800486a <I2C_WaitOnBTFFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d107      	bne.n	8003eb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e016      	b.n	8003ee2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	00100002 	.word	0x00100002
 8003ef0:	ffff0000 	.word	0xffff0000

08003ef4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	; 0x30
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	4608      	mov	r0, r1
 8003efe:	4611      	mov	r1, r2
 8003f00:	461a      	mov	r2, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	817b      	strh	r3, [r7, #10]
 8003f06:	460b      	mov	r3, r1
 8003f08:	813b      	strh	r3, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f0e:	f7ff fac1 	bl	8003494 <HAL_GetTick>
 8003f12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	f040 8208 	bne.w	8004332 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2319      	movs	r3, #25
 8003f28:	2201      	movs	r2, #1
 8003f2a:	497b      	ldr	r1, [pc, #492]	; (8004118 <HAL_I2C_Mem_Read+0x224>)
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fb85 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e1fb      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x56>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e1f4      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d007      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2222      	movs	r2, #34	; 0x22
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a5b      	ldr	r2, [pc, #364]	; (800411c <HAL_I2C_Mem_Read+0x228>)
 8003fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb2:	88f8      	ldrh	r0, [r7, #6]
 8003fb4:	893a      	ldrh	r2, [r7, #8]
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa52 	bl	800446c <I2C_RequestMemoryRead>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e1b0      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e184      	b.n	800430c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	2b01      	cmp	r3, #1
 8004008:	d11b      	bne.n	8004042 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e164      	b.n	800430c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	2b02      	cmp	r3, #2
 8004048:	d11b      	bne.n	8004082 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	e144      	b.n	800430c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004098:	e138      	b.n	800430c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	2b03      	cmp	r3, #3
 80040a0:	f200 80f1 	bhi.w	8004286 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d123      	bne.n	80040f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fc1b 	bl	80048ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e139      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f2:	e10b      	b.n	800430c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d14e      	bne.n	800419a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	2200      	movs	r2, #0
 8004104:	4906      	ldr	r1, [pc, #24]	; (8004120 <HAL_I2C_Mem_Read+0x22c>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa98 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e10e      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
 8004116:	bf00      	nop
 8004118:	00100002 	.word	0x00100002
 800411c:	ffff0000 	.word	0xffff0000
 8004120:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004198:	e0b8      	b.n	800430c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	2200      	movs	r2, #0
 80041a2:	4966      	ldr	r1, [pc, #408]	; (800433c <HAL_I2C_Mem_Read+0x448>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fa49 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0bf      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	2200      	movs	r2, #0
 80041fe:	494f      	ldr	r1, [pc, #316]	; (800433c <HAL_I2C_Mem_Read+0x448>)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fa1b 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e091      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004284:	e042      	b.n	800430c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fb2e 	bl	80048ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e04c      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d118      	bne.n	800430c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	f47f aec2 	bne.w	800409a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3728      	adds	r7, #40	; 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	00010004 	.word	0x00010004

08004340 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	4608      	mov	r0, r1
 800434a:	4611      	mov	r1, r2
 800434c:	461a      	mov	r2, r3
 800434e:	4603      	mov	r3, r0
 8004350:	817b      	strh	r3, [r7, #10]
 8004352:	460b      	mov	r3, r1
 8004354:	813b      	strh	r3, [r7, #8]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004368:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2200      	movs	r2, #0
 8004372:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f960 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004390:	d103      	bne.n	800439a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e05f      	b.n	800445e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800439e:	897b      	ldrh	r3, [r7, #10]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	492d      	ldr	r1, [pc, #180]	; (8004468 <I2C_RequestMemoryWrite+0x128>)
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f998 	bl	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e04c      	b.n	800445e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	6a39      	ldr	r1, [r7, #32]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa02 	bl	80047e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d107      	bne.n	8004402 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004400:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e02b      	b.n	800445e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	e021      	b.n	800445c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004418:	893b      	ldrh	r3, [r7, #8]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	b29b      	uxth	r3, r3
 800441e:	b2da      	uxtb	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	6a39      	ldr	r1, [r7, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f9dc 	bl	80047e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b04      	cmp	r3, #4
 800443c:	d107      	bne.n	800444e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e005      	b.n	800445e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004452:	893b      	ldrh	r3, [r7, #8]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	00010002 	.word	0x00010002

0800446c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	4608      	mov	r0, r1
 8004476:	4611      	mov	r1, r2
 8004478:	461a      	mov	r2, r3
 800447a:	4603      	mov	r3, r0
 800447c:	817b      	strh	r3, [r7, #10]
 800447e:	460b      	mov	r3, r1
 8004480:	813b      	strh	r3, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004494:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f8c2 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044cc:	d103      	bne.n	80044d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0aa      	b.n	8004630 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044da:	897b      	ldrh	r3, [r7, #10]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	4952      	ldr	r1, [pc, #328]	; (8004638 <I2C_RequestMemoryRead+0x1cc>)
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f8fa 	bl	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e097      	b.n	8004630 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f964 	bl	80047e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b04      	cmp	r3, #4
 800452c:	d107      	bne.n	800453e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e076      	b.n	8004630 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	611a      	str	r2, [r3, #16]
 8004552:	e021      	b.n	8004598 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004554:	893b      	ldrh	r3, [r7, #8]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b29b      	uxth	r3, r3
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f93e 	bl	80047e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e050      	b.n	8004630 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800458e:	893b      	ldrh	r3, [r7, #8]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459a:	6a39      	ldr	r1, [r7, #32]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f923 	bl	80047e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d107      	bne.n	80045c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e035      	b.n	8004630 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	2200      	movs	r2, #0
 80045dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f82b 	bl	800463c <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	d103      	bne.n	8004604 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e013      	b.n	8004630 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004608:	897b      	ldrh	r3, [r7, #10]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	6a3a      	ldr	r2, [r7, #32]
 800461c:	4906      	ldr	r1, [pc, #24]	; (8004638 <I2C_RequestMemoryRead+0x1cc>)
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f863 	bl	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	00010002 	.word	0x00010002

0800463c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800464c:	e025      	b.n	800469a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d021      	beq.n	800469a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004656:	f7fe ff1d 	bl	8003494 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d116      	bne.n	800469a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e023      	b.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10d      	bne.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	43da      	mvns	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	e00c      	b.n	80046da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	43da      	mvns	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d0b6      	beq.n	800464e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046f8:	e051      	b.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004708:	d123      	bne.n	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f043 0204 	orr.w	r2, r3, #4
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e046      	b.n	80047e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d021      	beq.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475a:	f7fe fe9b 	bl	8003494 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d302      	bcc.n	8004770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d116      	bne.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e020      	b.n	80047e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d10c      	bne.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	43da      	mvns	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4013      	ands	r3, r2
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf14      	ite	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	2300      	moveq	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e00b      	b.n	80047da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	43da      	mvns	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4013      	ands	r3, r2
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d18d      	bne.n	80046fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f4:	e02d      	b.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f8ce 	bl	8004998 <I2C_IsAcknowledgeFailed>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e02d      	b.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d021      	beq.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fe fe41 	bl	8003494 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d116      	bne.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e007      	b.n	8004862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	2b80      	cmp	r3, #128	; 0x80
 800485e:	d1ca      	bne.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004876:	e02d      	b.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f88d 	bl	8004998 <I2C_IsAcknowledgeFailed>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e02d      	b.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d021      	beq.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fe fe00 	bl	8003494 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d116      	bne.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e007      	b.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d1ca      	bne.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048f8:	e042      	b.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b10      	cmp	r3, #16
 8004906:	d119      	bne.n	800493c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0210 	mvn.w	r2, #16
 8004910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e029      	b.n	8004990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493c:	f7fe fdaa 	bl	8003494 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d116      	bne.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e007      	b.n	8004990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d1b5      	bne.n	80048fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ae:	d11b      	bne.n	80049e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f043 0204 	orr.w	r2, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e25b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d075      	beq.n	8004b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a16:	4ba3      	ldr	r3, [pc, #652]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00c      	beq.n	8004a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4ba0      	ldr	r3, [pc, #640]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d112      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4b9d      	ldr	r3, [pc, #628]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	4b99      	ldr	r3, [pc, #612]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05b      	beq.n	8004b00 <HAL_RCC_OscConfig+0x108>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d157      	bne.n	8004b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e236      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCC_OscConfig+0x74>
 8004a5e:	4b91      	ldr	r3, [pc, #580]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a90      	ldr	r2, [pc, #576]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x98>
 8004a76:	4b8b      	ldr	r3, [pc, #556]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a8a      	ldr	r2, [pc, #552]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a87      	ldr	r2, [pc, #540]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
 8004a90:	4b84      	ldr	r3, [pc, #528]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a83      	ldr	r2, [pc, #524]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b81      	ldr	r3, [pc, #516]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a80      	ldr	r2, [pc, #512]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fe fcf0 	bl	8003494 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fe fcec 	bl	8003494 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e1fb      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	4b76      	ldr	r3, [pc, #472]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xc0>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7fe fcdc 	bl	8003494 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fe fcd8 	bl	8003494 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1e7      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	4b6c      	ldr	r3, [pc, #432]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xe8>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d063      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b62      	ldr	r3, [pc, #392]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d11c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b26:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d116      	bne.n	8004b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b32:	4b5c      	ldr	r3, [pc, #368]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_RCC_OscConfig+0x152>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e1bb      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4a:	4b56      	ldr	r3, [pc, #344]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4952      	ldr	r1, [pc, #328]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	e03a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d020      	beq.n	8004baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b68:	4b4f      	ldr	r3, [pc, #316]	; (8004ca8 <HAL_RCC_OscConfig+0x2b0>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fe fc91 	bl	8003494 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b76:	f7fe fc8d 	bl	8003494 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e19c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b88:	4b46      	ldr	r3, [pc, #280]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b94:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4940      	ldr	r1, [pc, #256]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	600b      	str	r3, [r1, #0]
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004baa:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <HAL_RCC_OscConfig+0x2b0>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fe fc70 	bl	8003494 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7fe fc6c 	bl	8003494 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e17b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d030      	beq.n	8004c44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bea:	4b30      	ldr	r3, [pc, #192]	; (8004cac <HAL_RCC_OscConfig+0x2b4>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fe fc50 	bl	8003494 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7fe fc4c 	bl	8003494 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e15b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x200>
 8004c16:	e015      	b.n	8004c44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c18:	4b24      	ldr	r3, [pc, #144]	; (8004cac <HAL_RCC_OscConfig+0x2b4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe fc39 	bl	8003494 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c26:	f7fe fc35 	bl	8003494 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e144      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a0 	beq.w	8004d92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d121      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fe fbfb 	bl	8003494 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e011      	b.n	8004cc6 <HAL_RCC_OscConfig+0x2ce>
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	42470000 	.word	0x42470000
 8004cac:	42470e80 	.word	0x42470e80
 8004cb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb4:	f7fe fbee 	bl	8003494 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0fd      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc6:	4b81      	ldr	r3, [pc, #516]	; (8004ecc <HAL_RCC_OscConfig+0x4d4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d106      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2f0>
 8004cda:	4b7d      	ldr	r3, [pc, #500]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a7c      	ldr	r2, [pc, #496]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce6:	e01c      	b.n	8004d22 <HAL_RCC_OscConfig+0x32a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d10c      	bne.n	8004d0a <HAL_RCC_OscConfig+0x312>
 8004cf0:	4b77      	ldr	r3, [pc, #476]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	4a76      	ldr	r2, [pc, #472]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cf6:	f043 0304 	orr.w	r3, r3, #4
 8004cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfc:	4b74      	ldr	r3, [pc, #464]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	4a73      	ldr	r2, [pc, #460]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6713      	str	r3, [r2, #112]	; 0x70
 8004d08:	e00b      	b.n	8004d22 <HAL_RCC_OscConfig+0x32a>
 8004d0a:	4b71      	ldr	r3, [pc, #452]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6713      	str	r3, [r2, #112]	; 0x70
 8004d16:	4b6e      	ldr	r3, [pc, #440]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	4a6d      	ldr	r2, [pc, #436]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2a:	f7fe fbb3 	bl	8003494 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fe fbaf 	bl	8003494 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e0bc      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d48:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ee      	beq.n	8004d32 <HAL_RCC_OscConfig+0x33a>
 8004d54:	e014      	b.n	8004d80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d56:	f7fe fb9d 	bl	8003494 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fe fb99 	bl	8003494 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0a6      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d74:	4b56      	ldr	r3, [pc, #344]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ee      	bne.n	8004d5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a51      	ldr	r2, [pc, #324]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8092 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 030c 	and.w	r3, r3, #12
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d05c      	beq.n	8004e62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d141      	bne.n	8004e34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db0:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <HAL_RCC_OscConfig+0x4dc>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7fe fb6d 	bl	8003494 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7fe fb69 	bl	8003494 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e078      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd0:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	019b      	lsls	r3, r3, #6
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	3b01      	subs	r3, #1
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	4933      	ldr	r1, [pc, #204]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e06:	4b33      	ldr	r3, [pc, #204]	; (8004ed4 <HAL_RCC_OscConfig+0x4dc>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fb42 	bl	8003494 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe fb3e 	bl	8003494 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e04d      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x41c>
 8004e32:	e045      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e34:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_RCC_OscConfig+0x4dc>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fe fb2b 	bl	8003494 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fe fb27 	bl	8003494 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e036      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e54:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCC_OscConfig+0x44a>
 8004e60:	e02e      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e029      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <HAL_RCC_OscConfig+0x4d8>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d11c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d115      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	42470060 	.word	0x42470060

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0cc      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d90c      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b63      	ldr	r3, [pc, #396]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0b8      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d020      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f2c:	4b59      	ldr	r3, [pc, #356]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a58      	ldr	r2, [pc, #352]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a52      	ldr	r2, [pc, #328]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f50:	4b50      	ldr	r3, [pc, #320]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	494d      	ldr	r1, [pc, #308]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d044      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	4b47      	ldr	r3, [pc, #284]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d119      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa6:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e067      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb6:	4b37      	ldr	r3, [pc, #220]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4934      	ldr	r1, [pc, #208]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fe fa64 	bl	8003494 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f7fe fa60 	bl	8003494 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 020c 	and.w	r2, r3, #12
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1eb      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d20c      	bcs.n	8005020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e032      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4916      	ldr	r1, [pc, #88]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	490e      	ldr	r1, [pc, #56]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800505e:	f000 f821 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8005062:	4601      	mov	r1, r0
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	5cd3      	ldrb	r3, [r2, r3]
 8005072:	fa21 f303 	lsr.w	r3, r1, r3
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe f9c4 	bl	800340c <HAL_InitTick>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023c00 	.word	0x40023c00
 8005094:	40023800 	.word	0x40023800
 8005098:	0800ad80 	.word	0x0800ad80
 800509c:	20000008 	.word	0x20000008
 80050a0:	2000000c 	.word	0x2000000c

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	2300      	movs	r3, #0
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050ba:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d007      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0x32>
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d008      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x38>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 80b4 	bne.w	8005238 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d0:	4b5e      	ldr	r3, [pc, #376]	; (800524c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050d2:	60bb      	str	r3, [r7, #8]
       break;
 80050d4:	e0b3      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d6:	4b5e      	ldr	r3, [pc, #376]	; (8005250 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80050d8:	60bb      	str	r3, [r7, #8]
      break;
 80050da:	e0b0      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050dc:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e6:	4b58      	ldr	r3, [pc, #352]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d04a      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f2:	4b55      	ldr	r3, [pc, #340]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	f04f 0400 	mov.w	r4, #0
 80050fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	ea03 0501 	and.w	r5, r3, r1
 8005108:	ea04 0602 	and.w	r6, r4, r2
 800510c:	4629      	mov	r1, r5
 800510e:	4632      	mov	r2, r6
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	f04f 0400 	mov.w	r4, #0
 8005118:	0154      	lsls	r4, r2, #5
 800511a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800511e:	014b      	lsls	r3, r1, #5
 8005120:	4619      	mov	r1, r3
 8005122:	4622      	mov	r2, r4
 8005124:	1b49      	subs	r1, r1, r5
 8005126:	eb62 0206 	sbc.w	r2, r2, r6
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	f04f 0400 	mov.w	r4, #0
 8005132:	0194      	lsls	r4, r2, #6
 8005134:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005138:	018b      	lsls	r3, r1, #6
 800513a:	1a5b      	subs	r3, r3, r1
 800513c:	eb64 0402 	sbc.w	r4, r4, r2
 8005140:	f04f 0100 	mov.w	r1, #0
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	00e2      	lsls	r2, r4, #3
 800514a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800514e:	00d9      	lsls	r1, r3, #3
 8005150:	460b      	mov	r3, r1
 8005152:	4614      	mov	r4, r2
 8005154:	195b      	adds	r3, r3, r5
 8005156:	eb44 0406 	adc.w	r4, r4, r6
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	0262      	lsls	r2, r4, #9
 8005164:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005168:	0259      	lsls	r1, r3, #9
 800516a:	460b      	mov	r3, r1
 800516c:	4614      	mov	r4, r2
 800516e:	4618      	mov	r0, r3
 8005170:	4621      	mov	r1, r4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f04f 0400 	mov.w	r4, #0
 8005178:	461a      	mov	r2, r3
 800517a:	4623      	mov	r3, r4
 800517c:	f7fb fd8c 	bl	8000c98 <__aeabi_uldivmod>
 8005180:	4603      	mov	r3, r0
 8005182:	460c      	mov	r4, r1
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e049      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005188:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	099b      	lsrs	r3, r3, #6
 800518e:	f04f 0400 	mov.w	r4, #0
 8005192:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	ea03 0501 	and.w	r5, r3, r1
 800519e:	ea04 0602 	and.w	r6, r4, r2
 80051a2:	4629      	mov	r1, r5
 80051a4:	4632      	mov	r2, r6
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	f04f 0400 	mov.w	r4, #0
 80051ae:	0154      	lsls	r4, r2, #5
 80051b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051b4:	014b      	lsls	r3, r1, #5
 80051b6:	4619      	mov	r1, r3
 80051b8:	4622      	mov	r2, r4
 80051ba:	1b49      	subs	r1, r1, r5
 80051bc:	eb62 0206 	sbc.w	r2, r2, r6
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	0194      	lsls	r4, r2, #6
 80051ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051ce:	018b      	lsls	r3, r1, #6
 80051d0:	1a5b      	subs	r3, r3, r1
 80051d2:	eb64 0402 	sbc.w	r4, r4, r2
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	00e2      	lsls	r2, r4, #3
 80051e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051e4:	00d9      	lsls	r1, r3, #3
 80051e6:	460b      	mov	r3, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	195b      	adds	r3, r3, r5
 80051ec:	eb44 0406 	adc.w	r4, r4, r6
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	02a2      	lsls	r2, r4, #10
 80051fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051fe:	0299      	lsls	r1, r3, #10
 8005200:	460b      	mov	r3, r1
 8005202:	4614      	mov	r4, r2
 8005204:	4618      	mov	r0, r3
 8005206:	4621      	mov	r1, r4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	461a      	mov	r2, r3
 8005210:	4623      	mov	r3, r4
 8005212:	f7fb fd41 	bl	8000c98 <__aeabi_uldivmod>
 8005216:	4603      	mov	r3, r0
 8005218:	460c      	mov	r4, r1
 800521a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	60bb      	str	r3, [r7, #8]
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800523a:	60bb      	str	r3, [r7, #8]
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	68bb      	ldr	r3, [r7, #8]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	00f42400 	.word	0x00f42400
 8005250:	007a1200 	.word	0x007a1200

08005254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <HAL_RCC_GetHCLKFreq+0x14>)
 800525a:	681b      	ldr	r3, [r3, #0]
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000008 	.word	0x20000008

0800526c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005270:	f7ff fff0 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 8005274:	4601      	mov	r1, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0a9b      	lsrs	r3, r3, #10
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4a03      	ldr	r2, [pc, #12]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40023800 	.word	0x40023800
 8005290:	0800ad90 	.word	0x0800ad90

08005294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005298:	f7ff ffdc 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 800529c:	4601      	mov	r1, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0b5b      	lsrs	r3, r3, #13
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4a03      	ldr	r2, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052aa:	5cd3      	ldrb	r3, [r2, r3]
 80052ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	0800ad90 	.word	0x0800ad90

080052bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e01d      	b.n	800530a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fd fee8 	bl	80030b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f000 f82e 	bl	800535c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d007      	beq.n	8005344 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a34      	ldr	r2, [pc, #208]	; (8005440 <TIM_Base_SetConfig+0xe4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00f      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d00b      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a31      	ldr	r2, [pc, #196]	; (8005444 <TIM_Base_SetConfig+0xe8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a30      	ldr	r2, [pc, #192]	; (8005448 <TIM_Base_SetConfig+0xec>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2f      	ldr	r2, [pc, #188]	; (800544c <TIM_Base_SetConfig+0xf0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d108      	bne.n	80053a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a25      	ldr	r2, [pc, #148]	; (8005440 <TIM_Base_SetConfig+0xe4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01b      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d017      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <TIM_Base_SetConfig+0xe8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a21      	ldr	r2, [pc, #132]	; (8005448 <TIM_Base_SetConfig+0xec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a20      	ldr	r2, [pc, #128]	; (800544c <TIM_Base_SetConfig+0xf0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <TIM_Base_SetConfig+0xf4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <TIM_Base_SetConfig+0xf8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <TIM_Base_SetConfig+0xfc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d108      	bne.n	80053f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <TIM_Base_SetConfig+0xe4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	615a      	str	r2, [r3, #20]
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800

0800545c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e03f      	b.n	80054ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd fe3a 	bl	80030fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2224      	movs	r2, #36	; 0x24
 800548c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800549e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fb4b 	bl	8005b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b088      	sub	sp, #32
 80054fa:	af02      	add	r7, sp, #8
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	603b      	str	r3, [r7, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	f040 8083 	bne.w	800561e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_UART_Transmit+0x2e>
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e07b      	b.n	8005620 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_UART_Transmit+0x40>
 8005532:	2302      	movs	r3, #2
 8005534:	e074      	b.n	8005620 <HAL_UART_Transmit+0x12a>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2221      	movs	r2, #33	; 0x21
 8005548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800554c:	f7fd ffa2 	bl	8003494 <HAL_GetTick>
 8005550:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005566:	e042      	b.n	80055ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557e:	d122      	bne.n	80055c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	2180      	movs	r1, #128	; 0x80
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f96a 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e042      	b.n	8005620 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3302      	adds	r3, #2
 80055ba:	60bb      	str	r3, [r7, #8]
 80055bc:	e017      	b.n	80055ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	3301      	adds	r3, #1
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	e013      	b.n	80055ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f947 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e01f      	b.n	8005620 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	60ba      	str	r2, [r7, #8]
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1b7      	bne.n	8005568 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2200      	movs	r2, #0
 8005600:	2140      	movs	r1, #64	; 0x40
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f92e 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e006      	b.n	8005620 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
  }
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_UART_IRQHandler+0x52>
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f9e0 	bl	8005a38 <UART_Receive_IT>
      return;
 8005678:	e0d1      	b.n	800581e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80b0 	beq.w	80057e2 <HAL_UART_IRQHandler+0x1ba>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <HAL_UART_IRQHandler+0x70>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80a5 	beq.w	80057e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_UART_IRQHandler+0x90>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	f043 0201 	orr.w	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_UART_IRQHandler+0xb0>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	f043 0202 	orr.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_UART_IRQHandler+0xd0>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f0:	f043 0204 	orr.w	r2, r3, #4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00f      	beq.n	8005722 <HAL_UART_IRQHandler+0xfa>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <HAL_UART_IRQHandler+0xee>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	f043 0208 	orr.w	r2, r3, #8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d078      	beq.n	800581c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_UART_IRQHandler+0x11c>
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f97a 	bl	8005a38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <HAL_UART_IRQHandler+0x144>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d031      	beq.n	80057d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8c3 	bl	80058f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	d123      	bne.n	80057c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	2b00      	cmp	r3, #0
 8005796:	d013      	beq.n	80057c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_UART_IRQHandler+0x1fc>)
 800579e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fd ffb4 	bl	8003712 <HAL_DMA_Abort_IT>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d016      	beq.n	80057de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ba:	4610      	mov	r0, r2
 80057bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057be:	e00e      	b.n	80057de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f845 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c6:	e00a      	b.n	80057de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f841 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ce:	e006      	b.n	80057de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f83d 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80057dc:	e01e      	b.n	800581c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057de:	bf00      	nop
    return;
 80057e0:	e01c      	b.n	800581c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_UART_IRQHandler+0x1d6>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8b0 	bl	800595c <UART_Transmit_IT>
    return;
 80057fc:	e00f      	b.n	800581e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_UART_IRQHandler+0x1f6>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8f8 	bl	8005a08 <UART_EndTransmit_IT>
    return;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <HAL_UART_IRQHandler+0x1f6>
    return;
 800581c:	bf00      	nop
  }
}
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	08005935 	.word	0x08005935

08005828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005874:	e02c      	b.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d028      	beq.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <UART_WaitOnFlagUntilTimeout+0x30>
 8005884:	f7fd fe06 	bl	8003494 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	429a      	cmp	r2, r3
 8005892:	d21d      	bcs.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e00f      	b.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d0c3      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800590e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff ff7e 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b21      	cmp	r3, #33	; 0x21
 800596e:	d144      	bne.n	80059fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005978:	d11a      	bne.n	80059b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800598e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	1c9a      	adds	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]
 80059a2:	e00e      	b.n	80059c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	621a      	str	r2, [r3, #32]
 80059ae:	e008      	b.n	80059c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6211      	str	r1, [r2, #32]
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4619      	mov	r1, r3
 80059d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10f      	bne.n	80059f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff fefd 	bl	8005828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b22      	cmp	r3, #34	; 0x22
 8005a4a:	d171      	bne.n	8005b30 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a54:	d123      	bne.n	8005a9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10e      	bne.n	8005a82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a80:	e029      	b.n	8005ad6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a9c:	e01b      	b.n	8005ad6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6858      	ldr	r0, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6291      	str	r1, [r2, #40]	; 0x28
 8005ab6:	b2c2      	uxtb	r2, r0
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	e00c      	b.n	8005ad6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	1c58      	adds	r0, r3, #1
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	6288      	str	r0, [r1, #40]	; 0x28
 8005ace:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d120      	bne.n	8005b2c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0220 	bic.w	r2, r2, #32
 8005af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff fe8a 	bl	800583c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e002      	b.n	8005b32 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b7e:	f023 030c 	bic.w	r3, r3, #12
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005baa:	f040 818b 	bne.w	8005ec4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4ac1      	ldr	r2, [pc, #772]	; (8005eb8 <UART_SetConfig+0x37c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d005      	beq.n	8005bc4 <UART_SetConfig+0x88>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4abf      	ldr	r2, [pc, #764]	; (8005ebc <UART_SetConfig+0x380>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f040 80bd 	bne.w	8005d3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bc4:	f7ff fb66 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 8005bc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	461d      	mov	r5, r3
 8005bce:	f04f 0600 	mov.w	r6, #0
 8005bd2:	46a8      	mov	r8, r5
 8005bd4:	46b1      	mov	r9, r6
 8005bd6:	eb18 0308 	adds.w	r3, r8, r8
 8005bda:	eb49 0409 	adc.w	r4, r9, r9
 8005bde:	4698      	mov	r8, r3
 8005be0:	46a1      	mov	r9, r4
 8005be2:	eb18 0805 	adds.w	r8, r8, r5
 8005be6:	eb49 0906 	adc.w	r9, r9, r6
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bfe:	4688      	mov	r8, r1
 8005c00:	4691      	mov	r9, r2
 8005c02:	eb18 0005 	adds.w	r0, r8, r5
 8005c06:	eb49 0106 	adc.w	r1, r9, r6
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	461d      	mov	r5, r3
 8005c10:	f04f 0600 	mov.w	r6, #0
 8005c14:	196b      	adds	r3, r5, r5
 8005c16:	eb46 0406 	adc.w	r4, r6, r6
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4623      	mov	r3, r4
 8005c1e:	f7fb f83b 	bl	8000c98 <__aeabi_uldivmod>
 8005c22:	4603      	mov	r3, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	461a      	mov	r2, r3
 8005c28:	4ba5      	ldr	r3, [pc, #660]	; (8005ec0 <UART_SetConfig+0x384>)
 8005c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	461d      	mov	r5, r3
 8005c38:	f04f 0600 	mov.w	r6, #0
 8005c3c:	46a9      	mov	r9, r5
 8005c3e:	46b2      	mov	sl, r6
 8005c40:	eb19 0309 	adds.w	r3, r9, r9
 8005c44:	eb4a 040a 	adc.w	r4, sl, sl
 8005c48:	4699      	mov	r9, r3
 8005c4a:	46a2      	mov	sl, r4
 8005c4c:	eb19 0905 	adds.w	r9, r9, r5
 8005c50:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c68:	4689      	mov	r9, r1
 8005c6a:	4692      	mov	sl, r2
 8005c6c:	eb19 0005 	adds.w	r0, r9, r5
 8005c70:	eb4a 0106 	adc.w	r1, sl, r6
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	461d      	mov	r5, r3
 8005c7a:	f04f 0600 	mov.w	r6, #0
 8005c7e:	196b      	adds	r3, r5, r5
 8005c80:	eb46 0406 	adc.w	r4, r6, r6
 8005c84:	461a      	mov	r2, r3
 8005c86:	4623      	mov	r3, r4
 8005c88:	f7fb f806 	bl	8000c98 <__aeabi_uldivmod>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b8b      	ldr	r3, [pc, #556]	; (8005ec0 <UART_SetConfig+0x384>)
 8005c94:	fba3 1302 	umull	r1, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	2164      	movs	r1, #100	; 0x64
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	3332      	adds	r3, #50	; 0x32
 8005ca6:	4a86      	ldr	r2, [pc, #536]	; (8005ec0 <UART_SetConfig+0x384>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cb4:	4498      	add	r8, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	461d      	mov	r5, r3
 8005cba:	f04f 0600 	mov.w	r6, #0
 8005cbe:	46a9      	mov	r9, r5
 8005cc0:	46b2      	mov	sl, r6
 8005cc2:	eb19 0309 	adds.w	r3, r9, r9
 8005cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8005cca:	4699      	mov	r9, r3
 8005ccc:	46a2      	mov	sl, r4
 8005cce:	eb19 0905 	adds.w	r9, r9, r5
 8005cd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cd6:	f04f 0100 	mov.w	r1, #0
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cea:	4689      	mov	r9, r1
 8005cec:	4692      	mov	sl, r2
 8005cee:	eb19 0005 	adds.w	r0, r9, r5
 8005cf2:	eb4a 0106 	adc.w	r1, sl, r6
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	f04f 0600 	mov.w	r6, #0
 8005d00:	196b      	adds	r3, r5, r5
 8005d02:	eb46 0406 	adc.w	r4, r6, r6
 8005d06:	461a      	mov	r2, r3
 8005d08:	4623      	mov	r3, r4
 8005d0a:	f7fa ffc5 	bl	8000c98 <__aeabi_uldivmod>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	460c      	mov	r4, r1
 8005d12:	461a      	mov	r2, r3
 8005d14:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <UART_SetConfig+0x384>)
 8005d16:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	2164      	movs	r1, #100	; 0x64
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	3332      	adds	r3, #50	; 0x32
 8005d28:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <UART_SetConfig+0x384>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	f003 0207 	and.w	r2, r3, #7
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4442      	add	r2, r8
 8005d3a:	609a      	str	r2, [r3, #8]
 8005d3c:	e26f      	b.n	800621e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d3e:	f7ff fa95 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 8005d42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	461d      	mov	r5, r3
 8005d48:	f04f 0600 	mov.w	r6, #0
 8005d4c:	46a8      	mov	r8, r5
 8005d4e:	46b1      	mov	r9, r6
 8005d50:	eb18 0308 	adds.w	r3, r8, r8
 8005d54:	eb49 0409 	adc.w	r4, r9, r9
 8005d58:	4698      	mov	r8, r3
 8005d5a:	46a1      	mov	r9, r4
 8005d5c:	eb18 0805 	adds.w	r8, r8, r5
 8005d60:	eb49 0906 	adc.w	r9, r9, r6
 8005d64:	f04f 0100 	mov.w	r1, #0
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d78:	4688      	mov	r8, r1
 8005d7a:	4691      	mov	r9, r2
 8005d7c:	eb18 0005 	adds.w	r0, r8, r5
 8005d80:	eb49 0106 	adc.w	r1, r9, r6
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	461d      	mov	r5, r3
 8005d8a:	f04f 0600 	mov.w	r6, #0
 8005d8e:	196b      	adds	r3, r5, r5
 8005d90:	eb46 0406 	adc.w	r4, r6, r6
 8005d94:	461a      	mov	r2, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	f7fa ff7e 	bl	8000c98 <__aeabi_uldivmod>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	461a      	mov	r2, r3
 8005da2:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <UART_SetConfig+0x384>)
 8005da4:	fba3 2302 	umull	r2, r3, r3, r2
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	461d      	mov	r5, r3
 8005db2:	f04f 0600 	mov.w	r6, #0
 8005db6:	46a9      	mov	r9, r5
 8005db8:	46b2      	mov	sl, r6
 8005dba:	eb19 0309 	adds.w	r3, r9, r9
 8005dbe:	eb4a 040a 	adc.w	r4, sl, sl
 8005dc2:	4699      	mov	r9, r3
 8005dc4:	46a2      	mov	sl, r4
 8005dc6:	eb19 0905 	adds.w	r9, r9, r5
 8005dca:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dce:	f04f 0100 	mov.w	r1, #0
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005de2:	4689      	mov	r9, r1
 8005de4:	4692      	mov	sl, r2
 8005de6:	eb19 0005 	adds.w	r0, r9, r5
 8005dea:	eb4a 0106 	adc.w	r1, sl, r6
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	461d      	mov	r5, r3
 8005df4:	f04f 0600 	mov.w	r6, #0
 8005df8:	196b      	adds	r3, r5, r5
 8005dfa:	eb46 0406 	adc.w	r4, r6, r6
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4623      	mov	r3, r4
 8005e02:	f7fa ff49 	bl	8000c98 <__aeabi_uldivmod>
 8005e06:	4603      	mov	r3, r0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ec0 <UART_SetConfig+0x384>)
 8005e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2164      	movs	r1, #100	; 0x64
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	3332      	adds	r3, #50	; 0x32
 8005e20:	4a27      	ldr	r2, [pc, #156]	; (8005ec0 <UART_SetConfig+0x384>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e2e:	4498      	add	r8, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	461d      	mov	r5, r3
 8005e34:	f04f 0600 	mov.w	r6, #0
 8005e38:	46a9      	mov	r9, r5
 8005e3a:	46b2      	mov	sl, r6
 8005e3c:	eb19 0309 	adds.w	r3, r9, r9
 8005e40:	eb4a 040a 	adc.w	r4, sl, sl
 8005e44:	4699      	mov	r9, r3
 8005e46:	46a2      	mov	sl, r4
 8005e48:	eb19 0905 	adds.w	r9, r9, r5
 8005e4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e64:	4689      	mov	r9, r1
 8005e66:	4692      	mov	sl, r2
 8005e68:	eb19 0005 	adds.w	r0, r9, r5
 8005e6c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	461d      	mov	r5, r3
 8005e76:	f04f 0600 	mov.w	r6, #0
 8005e7a:	196b      	adds	r3, r5, r5
 8005e7c:	eb46 0406 	adc.w	r4, r6, r6
 8005e80:	461a      	mov	r2, r3
 8005e82:	4623      	mov	r3, r4
 8005e84:	f7fa ff08 	bl	8000c98 <__aeabi_uldivmod>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <UART_SetConfig+0x384>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <UART_SetConfig+0x384>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 0207 	and.w	r2, r3, #7
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4442      	add	r2, r8
 8005eb4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005eb6:	e1b2      	b.n	800621e <UART_SetConfig+0x6e2>
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	40011400 	.word	0x40011400
 8005ec0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4ad7      	ldr	r2, [pc, #860]	; (8006228 <UART_SetConfig+0x6ec>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d005      	beq.n	8005eda <UART_SetConfig+0x39e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4ad6      	ldr	r2, [pc, #856]	; (800622c <UART_SetConfig+0x6f0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	f040 80d1 	bne.w	800607c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eda:	f7ff f9db 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 8005ede:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	469a      	mov	sl, r3
 8005ee4:	f04f 0b00 	mov.w	fp, #0
 8005ee8:	46d0      	mov	r8, sl
 8005eea:	46d9      	mov	r9, fp
 8005eec:	eb18 0308 	adds.w	r3, r8, r8
 8005ef0:	eb49 0409 	adc.w	r4, r9, r9
 8005ef4:	4698      	mov	r8, r3
 8005ef6:	46a1      	mov	r9, r4
 8005ef8:	eb18 080a 	adds.w	r8, r8, sl
 8005efc:	eb49 090b 	adc.w	r9, r9, fp
 8005f00:	f04f 0100 	mov.w	r1, #0
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f14:	4688      	mov	r8, r1
 8005f16:	4691      	mov	r9, r2
 8005f18:	eb1a 0508 	adds.w	r5, sl, r8
 8005f1c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4619      	mov	r1, r3
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	f04f 0400 	mov.w	r4, #0
 8005f32:	0094      	lsls	r4, r2, #2
 8005f34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f38:	008b      	lsls	r3, r1, #2
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	4631      	mov	r1, r6
 8005f42:	f7fa fea9 	bl	8000c98 <__aeabi_uldivmod>
 8005f46:	4603      	mov	r3, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4bb8      	ldr	r3, [pc, #736]	; (8006230 <UART_SetConfig+0x6f4>)
 8005f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	469b      	mov	fp, r3
 8005f5c:	f04f 0c00 	mov.w	ip, #0
 8005f60:	46d9      	mov	r9, fp
 8005f62:	46e2      	mov	sl, ip
 8005f64:	eb19 0309 	adds.w	r3, r9, r9
 8005f68:	eb4a 040a 	adc.w	r4, sl, sl
 8005f6c:	4699      	mov	r9, r3
 8005f6e:	46a2      	mov	sl, r4
 8005f70:	eb19 090b 	adds.w	r9, r9, fp
 8005f74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	4692      	mov	sl, r2
 8005f90:	eb1b 0509 	adds.w	r5, fp, r9
 8005f94:	eb4c 060a 	adc.w	r6, ip, sl
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	f04f 0400 	mov.w	r4, #0
 8005faa:	0094      	lsls	r4, r2, #2
 8005fac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fb0:	008b      	lsls	r3, r1, #2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	4631      	mov	r1, r6
 8005fba:	f7fa fe6d 	bl	8000c98 <__aeabi_uldivmod>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4b9a      	ldr	r3, [pc, #616]	; (8006230 <UART_SetConfig+0x6f4>)
 8005fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2164      	movs	r1, #100	; 0x64
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	3332      	adds	r3, #50	; 0x32
 8005fd8:	4a95      	ldr	r2, [pc, #596]	; (8006230 <UART_SetConfig+0x6f4>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fe4:	4498      	add	r8, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	469b      	mov	fp, r3
 8005fea:	f04f 0c00 	mov.w	ip, #0
 8005fee:	46d9      	mov	r9, fp
 8005ff0:	46e2      	mov	sl, ip
 8005ff2:	eb19 0309 	adds.w	r3, r9, r9
 8005ff6:	eb4a 040a 	adc.w	r4, sl, sl
 8005ffa:	4699      	mov	r9, r3
 8005ffc:	46a2      	mov	sl, r4
 8005ffe:	eb19 090b 	adds.w	r9, r9, fp
 8006002:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006012:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800601a:	4689      	mov	r9, r1
 800601c:	4692      	mov	sl, r2
 800601e:	eb1b 0509 	adds.w	r5, fp, r9
 8006022:	eb4c 060a 	adc.w	r6, ip, sl
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4619      	mov	r1, r3
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	f04f 0400 	mov.w	r4, #0
 8006038:	0094      	lsls	r4, r2, #2
 800603a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800603e:	008b      	lsls	r3, r1, #2
 8006040:	461a      	mov	r2, r3
 8006042:	4623      	mov	r3, r4
 8006044:	4628      	mov	r0, r5
 8006046:	4631      	mov	r1, r6
 8006048:	f7fa fe26 	bl	8000c98 <__aeabi_uldivmod>
 800604c:	4603      	mov	r3, r0
 800604e:	460c      	mov	r4, r1
 8006050:	461a      	mov	r2, r3
 8006052:	4b77      	ldr	r3, [pc, #476]	; (8006230 <UART_SetConfig+0x6f4>)
 8006054:	fba3 1302 	umull	r1, r3, r3, r2
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	2164      	movs	r1, #100	; 0x64
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	3332      	adds	r3, #50	; 0x32
 8006066:	4a72      	ldr	r2, [pc, #456]	; (8006230 <UART_SetConfig+0x6f4>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4442      	add	r2, r8
 8006078:	609a      	str	r2, [r3, #8]
 800607a:	e0d0      	b.n	800621e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7ff f8f6 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 8006080:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	469a      	mov	sl, r3
 8006086:	f04f 0b00 	mov.w	fp, #0
 800608a:	46d0      	mov	r8, sl
 800608c:	46d9      	mov	r9, fp
 800608e:	eb18 0308 	adds.w	r3, r8, r8
 8006092:	eb49 0409 	adc.w	r4, r9, r9
 8006096:	4698      	mov	r8, r3
 8006098:	46a1      	mov	r9, r4
 800609a:	eb18 080a 	adds.w	r8, r8, sl
 800609e:	eb49 090b 	adc.w	r9, r9, fp
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060b6:	4688      	mov	r8, r1
 80060b8:	4691      	mov	r9, r2
 80060ba:	eb1a 0508 	adds.w	r5, sl, r8
 80060be:	eb4b 0609 	adc.w	r6, fp, r9
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4619      	mov	r1, r3
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	f04f 0400 	mov.w	r4, #0
 80060d4:	0094      	lsls	r4, r2, #2
 80060d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060da:	008b      	lsls	r3, r1, #2
 80060dc:	461a      	mov	r2, r3
 80060de:	4623      	mov	r3, r4
 80060e0:	4628      	mov	r0, r5
 80060e2:	4631      	mov	r1, r6
 80060e4:	f7fa fdd8 	bl	8000c98 <__aeabi_uldivmod>
 80060e8:	4603      	mov	r3, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	461a      	mov	r2, r3
 80060ee:	4b50      	ldr	r3, [pc, #320]	; (8006230 <UART_SetConfig+0x6f4>)
 80060f0:	fba3 2302 	umull	r2, r3, r3, r2
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	469b      	mov	fp, r3
 80060fe:	f04f 0c00 	mov.w	ip, #0
 8006102:	46d9      	mov	r9, fp
 8006104:	46e2      	mov	sl, ip
 8006106:	eb19 0309 	adds.w	r3, r9, r9
 800610a:	eb4a 040a 	adc.w	r4, sl, sl
 800610e:	4699      	mov	r9, r3
 8006110:	46a2      	mov	sl, r4
 8006112:	eb19 090b 	adds.w	r9, r9, fp
 8006116:	eb4a 0a0c 	adc.w	sl, sl, ip
 800611a:	f04f 0100 	mov.w	r1, #0
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800612a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800612e:	4689      	mov	r9, r1
 8006130:	4692      	mov	sl, r2
 8006132:	eb1b 0509 	adds.w	r5, fp, r9
 8006136:	eb4c 060a 	adc.w	r6, ip, sl
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4619      	mov	r1, r3
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	f04f 0400 	mov.w	r4, #0
 800614c:	0094      	lsls	r4, r2, #2
 800614e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006152:	008b      	lsls	r3, r1, #2
 8006154:	461a      	mov	r2, r3
 8006156:	4623      	mov	r3, r4
 8006158:	4628      	mov	r0, r5
 800615a:	4631      	mov	r1, r6
 800615c:	f7fa fd9c 	bl	8000c98 <__aeabi_uldivmod>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	461a      	mov	r2, r3
 8006166:	4b32      	ldr	r3, [pc, #200]	; (8006230 <UART_SetConfig+0x6f4>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	; 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	3332      	adds	r3, #50	; 0x32
 800617a:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <UART_SetConfig+0x6f4>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006186:	4498      	add	r8, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	469b      	mov	fp, r3
 800618c:	f04f 0c00 	mov.w	ip, #0
 8006190:	46d9      	mov	r9, fp
 8006192:	46e2      	mov	sl, ip
 8006194:	eb19 0309 	adds.w	r3, r9, r9
 8006198:	eb4a 040a 	adc.w	r4, sl, sl
 800619c:	4699      	mov	r9, r3
 800619e:	46a2      	mov	sl, r4
 80061a0:	eb19 090b 	adds.w	r9, r9, fp
 80061a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061a8:	f04f 0100 	mov.w	r1, #0
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061bc:	4689      	mov	r9, r1
 80061be:	4692      	mov	sl, r2
 80061c0:	eb1b 0509 	adds.w	r5, fp, r9
 80061c4:	eb4c 060a 	adc.w	r6, ip, sl
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4619      	mov	r1, r3
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	f04f 0400 	mov.w	r4, #0
 80061da:	0094      	lsls	r4, r2, #2
 80061dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061e0:	008b      	lsls	r3, r1, #2
 80061e2:	461a      	mov	r2, r3
 80061e4:	4623      	mov	r3, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	4631      	mov	r1, r6
 80061ea:	f7fa fd55 	bl	8000c98 <__aeabi_uldivmod>
 80061ee:	4603      	mov	r3, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <UART_SetConfig+0x6f4>)
 80061f6:	fba3 1302 	umull	r1, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2164      	movs	r1, #100	; 0x64
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	3332      	adds	r3, #50	; 0x32
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <UART_SetConfig+0x6f4>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	f003 020f 	and.w	r2, r3, #15
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4442      	add	r2, r8
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	e7ff      	b.n	800621e <UART_SetConfig+0x6e2>
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	40011000 	.word	0x40011000
 800622c:	40011400 	.word	0x40011400
 8006230:	51eb851f 	.word	0x51eb851f

08006234 <__errno>:
 8006234:	4b01      	ldr	r3, [pc, #4]	; (800623c <__errno+0x8>)
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000014 	.word	0x20000014

08006240 <__libc_init_array>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	4e0d      	ldr	r6, [pc, #52]	; (8006278 <__libc_init_array+0x38>)
 8006244:	4c0d      	ldr	r4, [pc, #52]	; (800627c <__libc_init_array+0x3c>)
 8006246:	1ba4      	subs	r4, r4, r6
 8006248:	10a4      	asrs	r4, r4, #2
 800624a:	2500      	movs	r5, #0
 800624c:	42a5      	cmp	r5, r4
 800624e:	d109      	bne.n	8006264 <__libc_init_array+0x24>
 8006250:	4e0b      	ldr	r6, [pc, #44]	; (8006280 <__libc_init_array+0x40>)
 8006252:	4c0c      	ldr	r4, [pc, #48]	; (8006284 <__libc_init_array+0x44>)
 8006254:	f004 f884 	bl	800a360 <_init>
 8006258:	1ba4      	subs	r4, r4, r6
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	2500      	movs	r5, #0
 800625e:	42a5      	cmp	r5, r4
 8006260:	d105      	bne.n	800626e <__libc_init_array+0x2e>
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006268:	4798      	blx	r3
 800626a:	3501      	adds	r5, #1
 800626c:	e7ee      	b.n	800624c <__libc_init_array+0xc>
 800626e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006272:	4798      	blx	r3
 8006274:	3501      	adds	r5, #1
 8006276:	e7f2      	b.n	800625e <__libc_init_array+0x1e>
 8006278:	0800b05c 	.word	0x0800b05c
 800627c:	0800b05c 	.word	0x0800b05c
 8006280:	0800b05c 	.word	0x0800b05c
 8006284:	0800b060 	.word	0x0800b060

08006288 <memcpy>:
 8006288:	b510      	push	{r4, lr}
 800628a:	1e43      	subs	r3, r0, #1
 800628c:	440a      	add	r2, r1
 800628e:	4291      	cmp	r1, r2
 8006290:	d100      	bne.n	8006294 <memcpy+0xc>
 8006292:	bd10      	pop	{r4, pc}
 8006294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800629c:	e7f7      	b.n	800628e <memcpy+0x6>

0800629e <memset>:
 800629e:	4402      	add	r2, r0
 80062a0:	4603      	mov	r3, r0
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d100      	bne.n	80062a8 <memset+0xa>
 80062a6:	4770      	bx	lr
 80062a8:	f803 1b01 	strb.w	r1, [r3], #1
 80062ac:	e7f9      	b.n	80062a2 <memset+0x4>

080062ae <__cvt>:
 80062ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b2:	ec55 4b10 	vmov	r4, r5, d0
 80062b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80062b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062bc:	2d00      	cmp	r5, #0
 80062be:	460e      	mov	r6, r1
 80062c0:	4691      	mov	r9, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	bfb8      	it	lt
 80062c6:	4622      	movlt	r2, r4
 80062c8:	462b      	mov	r3, r5
 80062ca:	f027 0720 	bic.w	r7, r7, #32
 80062ce:	bfbb      	ittet	lt
 80062d0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062d4:	461d      	movlt	r5, r3
 80062d6:	2300      	movge	r3, #0
 80062d8:	232d      	movlt	r3, #45	; 0x2d
 80062da:	bfb8      	it	lt
 80062dc:	4614      	movlt	r4, r2
 80062de:	2f46      	cmp	r7, #70	; 0x46
 80062e0:	700b      	strb	r3, [r1, #0]
 80062e2:	d004      	beq.n	80062ee <__cvt+0x40>
 80062e4:	2f45      	cmp	r7, #69	; 0x45
 80062e6:	d100      	bne.n	80062ea <__cvt+0x3c>
 80062e8:	3601      	adds	r6, #1
 80062ea:	2102      	movs	r1, #2
 80062ec:	e000      	b.n	80062f0 <__cvt+0x42>
 80062ee:	2103      	movs	r1, #3
 80062f0:	ab03      	add	r3, sp, #12
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	ab02      	add	r3, sp, #8
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4632      	mov	r2, r6
 80062fa:	4653      	mov	r3, sl
 80062fc:	ec45 4b10 	vmov	d0, r4, r5
 8006300:	f001 fd76 	bl	8007df0 <_dtoa_r>
 8006304:	2f47      	cmp	r7, #71	; 0x47
 8006306:	4680      	mov	r8, r0
 8006308:	d102      	bne.n	8006310 <__cvt+0x62>
 800630a:	f019 0f01 	tst.w	r9, #1
 800630e:	d026      	beq.n	800635e <__cvt+0xb0>
 8006310:	2f46      	cmp	r7, #70	; 0x46
 8006312:	eb08 0906 	add.w	r9, r8, r6
 8006316:	d111      	bne.n	800633c <__cvt+0x8e>
 8006318:	f898 3000 	ldrb.w	r3, [r8]
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d10a      	bne.n	8006336 <__cvt+0x88>
 8006320:	2200      	movs	r2, #0
 8006322:	2300      	movs	r3, #0
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7fa fbd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800632c:	b918      	cbnz	r0, 8006336 <__cvt+0x88>
 800632e:	f1c6 0601 	rsb	r6, r6, #1
 8006332:	f8ca 6000 	str.w	r6, [sl]
 8006336:	f8da 3000 	ldr.w	r3, [sl]
 800633a:	4499      	add	r9, r3
 800633c:	2200      	movs	r2, #0
 800633e:	2300      	movs	r3, #0
 8006340:	4620      	mov	r0, r4
 8006342:	4629      	mov	r1, r5
 8006344:	f7fa fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006348:	b938      	cbnz	r0, 800635a <__cvt+0xac>
 800634a:	2230      	movs	r2, #48	; 0x30
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	454b      	cmp	r3, r9
 8006350:	d205      	bcs.n	800635e <__cvt+0xb0>
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	9103      	str	r1, [sp, #12]
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e7f8      	b.n	800634c <__cvt+0x9e>
 800635a:	f8cd 900c 	str.w	r9, [sp, #12]
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006362:	eba3 0308 	sub.w	r3, r3, r8
 8006366:	4640      	mov	r0, r8
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	b004      	add	sp, #16
 800636c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006370 <__exponent>:
 8006370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006372:	2900      	cmp	r1, #0
 8006374:	4604      	mov	r4, r0
 8006376:	bfba      	itte	lt
 8006378:	4249      	neglt	r1, r1
 800637a:	232d      	movlt	r3, #45	; 0x2d
 800637c:	232b      	movge	r3, #43	; 0x2b
 800637e:	2909      	cmp	r1, #9
 8006380:	f804 2b02 	strb.w	r2, [r4], #2
 8006384:	7043      	strb	r3, [r0, #1]
 8006386:	dd20      	ble.n	80063ca <__exponent+0x5a>
 8006388:	f10d 0307 	add.w	r3, sp, #7
 800638c:	461f      	mov	r7, r3
 800638e:	260a      	movs	r6, #10
 8006390:	fb91 f5f6 	sdiv	r5, r1, r6
 8006394:	fb06 1115 	mls	r1, r6, r5, r1
 8006398:	3130      	adds	r1, #48	; 0x30
 800639a:	2d09      	cmp	r5, #9
 800639c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063a0:	f103 32ff 	add.w	r2, r3, #4294967295
 80063a4:	4629      	mov	r1, r5
 80063a6:	dc09      	bgt.n	80063bc <__exponent+0x4c>
 80063a8:	3130      	adds	r1, #48	; 0x30
 80063aa:	3b02      	subs	r3, #2
 80063ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063b0:	42bb      	cmp	r3, r7
 80063b2:	4622      	mov	r2, r4
 80063b4:	d304      	bcc.n	80063c0 <__exponent+0x50>
 80063b6:	1a10      	subs	r0, r2, r0
 80063b8:	b003      	add	sp, #12
 80063ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063bc:	4613      	mov	r3, r2
 80063be:	e7e7      	b.n	8006390 <__exponent+0x20>
 80063c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c4:	f804 2b01 	strb.w	r2, [r4], #1
 80063c8:	e7f2      	b.n	80063b0 <__exponent+0x40>
 80063ca:	2330      	movs	r3, #48	; 0x30
 80063cc:	4419      	add	r1, r3
 80063ce:	7083      	strb	r3, [r0, #2]
 80063d0:	1d02      	adds	r2, r0, #4
 80063d2:	70c1      	strb	r1, [r0, #3]
 80063d4:	e7ef      	b.n	80063b6 <__exponent+0x46>
	...

080063d8 <_printf_float>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	b08d      	sub	sp, #52	; 0x34
 80063de:	460c      	mov	r4, r1
 80063e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80063e4:	4616      	mov	r6, r2
 80063e6:	461f      	mov	r7, r3
 80063e8:	4605      	mov	r5, r0
 80063ea:	f002 fde5 	bl	8008fb8 <_localeconv_r>
 80063ee:	6803      	ldr	r3, [r0, #0]
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7f9 fef4 	bl	80001e0 <strlen>
 80063f8:	2300      	movs	r3, #0
 80063fa:	930a      	str	r3, [sp, #40]	; 0x28
 80063fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006400:	9005      	str	r0, [sp, #20]
 8006402:	3307      	adds	r3, #7
 8006404:	f023 0307 	bic.w	r3, r3, #7
 8006408:	f103 0208 	add.w	r2, r3, #8
 800640c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006410:	f8d4 b000 	ldr.w	fp, [r4]
 8006414:	f8c8 2000 	str.w	r2, [r8]
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006420:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006424:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006428:	9307      	str	r3, [sp, #28]
 800642a:	f8cd 8018 	str.w	r8, [sp, #24]
 800642e:	f04f 32ff 	mov.w	r2, #4294967295
 8006432:	4ba7      	ldr	r3, [pc, #668]	; (80066d0 <_printf_float+0x2f8>)
 8006434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006438:	f7fa fb80 	bl	8000b3c <__aeabi_dcmpun>
 800643c:	bb70      	cbnz	r0, 800649c <_printf_float+0xc4>
 800643e:	f04f 32ff 	mov.w	r2, #4294967295
 8006442:	4ba3      	ldr	r3, [pc, #652]	; (80066d0 <_printf_float+0x2f8>)
 8006444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006448:	f7fa fb5a 	bl	8000b00 <__aeabi_dcmple>
 800644c:	bb30      	cbnz	r0, 800649c <_printf_float+0xc4>
 800644e:	2200      	movs	r2, #0
 8006450:	2300      	movs	r3, #0
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	f7fa fb49 	bl	8000aec <__aeabi_dcmplt>
 800645a:	b110      	cbz	r0, 8006462 <_printf_float+0x8a>
 800645c:	232d      	movs	r3, #45	; 0x2d
 800645e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006462:	4a9c      	ldr	r2, [pc, #624]	; (80066d4 <_printf_float+0x2fc>)
 8006464:	4b9c      	ldr	r3, [pc, #624]	; (80066d8 <_printf_float+0x300>)
 8006466:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800646a:	bf8c      	ite	hi
 800646c:	4690      	movhi	r8, r2
 800646e:	4698      	movls	r8, r3
 8006470:	2303      	movs	r3, #3
 8006472:	f02b 0204 	bic.w	r2, fp, #4
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	f04f 0900 	mov.w	r9, #0
 800647e:	9700      	str	r7, [sp, #0]
 8006480:	4633      	mov	r3, r6
 8006482:	aa0b      	add	r2, sp, #44	; 0x2c
 8006484:	4621      	mov	r1, r4
 8006486:	4628      	mov	r0, r5
 8006488:	f000 f9e6 	bl	8006858 <_printf_common>
 800648c:	3001      	adds	r0, #1
 800648e:	f040 808d 	bne.w	80065ac <_printf_float+0x1d4>
 8006492:	f04f 30ff 	mov.w	r0, #4294967295
 8006496:	b00d      	add	sp, #52	; 0x34
 8006498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	4640      	mov	r0, r8
 80064a2:	4649      	mov	r1, r9
 80064a4:	f7fa fb4a 	bl	8000b3c <__aeabi_dcmpun>
 80064a8:	b110      	cbz	r0, 80064b0 <_printf_float+0xd8>
 80064aa:	4a8c      	ldr	r2, [pc, #560]	; (80066dc <_printf_float+0x304>)
 80064ac:	4b8c      	ldr	r3, [pc, #560]	; (80066e0 <_printf_float+0x308>)
 80064ae:	e7da      	b.n	8006466 <_printf_float+0x8e>
 80064b0:	6861      	ldr	r1, [r4, #4]
 80064b2:	1c4b      	adds	r3, r1, #1
 80064b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80064b8:	a80a      	add	r0, sp, #40	; 0x28
 80064ba:	d13e      	bne.n	800653a <_printf_float+0x162>
 80064bc:	2306      	movs	r3, #6
 80064be:	6063      	str	r3, [r4, #4]
 80064c0:	2300      	movs	r3, #0
 80064c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80064c6:	ab09      	add	r3, sp, #36	; 0x24
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	ec49 8b10 	vmov	d0, r8, r9
 80064ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	f8cd a004 	str.w	sl, [sp, #4]
 80064d8:	6861      	ldr	r1, [r4, #4]
 80064da:	4628      	mov	r0, r5
 80064dc:	f7ff fee7 	bl	80062ae <__cvt>
 80064e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80064e4:	2b47      	cmp	r3, #71	; 0x47
 80064e6:	4680      	mov	r8, r0
 80064e8:	d109      	bne.n	80064fe <_printf_float+0x126>
 80064ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ec:	1cd8      	adds	r0, r3, #3
 80064ee:	db02      	blt.n	80064f6 <_printf_float+0x11e>
 80064f0:	6862      	ldr	r2, [r4, #4]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	dd47      	ble.n	8006586 <_printf_float+0x1ae>
 80064f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80064fa:	fa5f fa8a 	uxtb.w	sl, sl
 80064fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006504:	d824      	bhi.n	8006550 <_printf_float+0x178>
 8006506:	3901      	subs	r1, #1
 8006508:	4652      	mov	r2, sl
 800650a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800650e:	9109      	str	r1, [sp, #36]	; 0x24
 8006510:	f7ff ff2e 	bl	8006370 <__exponent>
 8006514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006516:	1813      	adds	r3, r2, r0
 8006518:	2a01      	cmp	r2, #1
 800651a:	4681      	mov	r9, r0
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	dc02      	bgt.n	8006526 <_printf_float+0x14e>
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	07d1      	lsls	r1, r2, #31
 8006524:	d501      	bpl.n	800652a <_printf_float+0x152>
 8006526:	3301      	adds	r3, #1
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0a5      	beq.n	800647e <_printf_float+0xa6>
 8006532:	232d      	movs	r3, #45	; 0x2d
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006538:	e7a1      	b.n	800647e <_printf_float+0xa6>
 800653a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800653e:	f000 8177 	beq.w	8006830 <_printf_float+0x458>
 8006542:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006546:	d1bb      	bne.n	80064c0 <_printf_float+0xe8>
 8006548:	2900      	cmp	r1, #0
 800654a:	d1b9      	bne.n	80064c0 <_printf_float+0xe8>
 800654c:	2301      	movs	r3, #1
 800654e:	e7b6      	b.n	80064be <_printf_float+0xe6>
 8006550:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006554:	d119      	bne.n	800658a <_printf_float+0x1b2>
 8006556:	2900      	cmp	r1, #0
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	dd0c      	ble.n	8006576 <_printf_float+0x19e>
 800655c:	6121      	str	r1, [r4, #16]
 800655e:	b913      	cbnz	r3, 8006566 <_printf_float+0x18e>
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	07d2      	lsls	r2, r2, #31
 8006564:	d502      	bpl.n	800656c <_printf_float+0x194>
 8006566:	3301      	adds	r3, #1
 8006568:	440b      	add	r3, r1
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006570:	f04f 0900 	mov.w	r9, #0
 8006574:	e7d9      	b.n	800652a <_printf_float+0x152>
 8006576:	b913      	cbnz	r3, 800657e <_printf_float+0x1a6>
 8006578:	6822      	ldr	r2, [r4, #0]
 800657a:	07d0      	lsls	r0, r2, #31
 800657c:	d501      	bpl.n	8006582 <_printf_float+0x1aa>
 800657e:	3302      	adds	r3, #2
 8006580:	e7f3      	b.n	800656a <_printf_float+0x192>
 8006582:	2301      	movs	r3, #1
 8006584:	e7f1      	b.n	800656a <_printf_float+0x192>
 8006586:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800658a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800658e:	4293      	cmp	r3, r2
 8006590:	db05      	blt.n	800659e <_printf_float+0x1c6>
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	07d1      	lsls	r1, r2, #31
 8006598:	d5e8      	bpl.n	800656c <_printf_float+0x194>
 800659a:	3301      	adds	r3, #1
 800659c:	e7e5      	b.n	800656a <_printf_float+0x192>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfd4      	ite	le
 80065a2:	f1c3 0302 	rsble	r3, r3, #2
 80065a6:	2301      	movgt	r3, #1
 80065a8:	4413      	add	r3, r2
 80065aa:	e7de      	b.n	800656a <_printf_float+0x192>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	055a      	lsls	r2, r3, #21
 80065b0:	d407      	bmi.n	80065c2 <_printf_float+0x1ea>
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	4642      	mov	r2, r8
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	d12b      	bne.n	8006618 <_printf_float+0x240>
 80065c0:	e767      	b.n	8006492 <_printf_float+0xba>
 80065c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80065c6:	f240 80dc 	bls.w	8006782 <_printf_float+0x3aa>
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065d2:	f7fa fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d033      	beq.n	8006642 <_printf_float+0x26a>
 80065da:	2301      	movs	r3, #1
 80065dc:	4a41      	ldr	r2, [pc, #260]	; (80066e4 <_printf_float+0x30c>)
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f af54 	beq.w	8006492 <_printf_float+0xba>
 80065ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ee:	429a      	cmp	r2, r3
 80065f0:	db02      	blt.n	80065f8 <_printf_float+0x220>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	07d8      	lsls	r0, r3, #31
 80065f6:	d50f      	bpl.n	8006618 <_printf_float+0x240>
 80065f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af45 	beq.w	8006492 <_printf_float+0xba>
 8006608:	f04f 0800 	mov.w	r8, #0
 800660c:	f104 091a 	add.w	r9, r4, #26
 8006610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006612:	3b01      	subs	r3, #1
 8006614:	4543      	cmp	r3, r8
 8006616:	dc09      	bgt.n	800662c <_printf_float+0x254>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	079b      	lsls	r3, r3, #30
 800661c:	f100 8103 	bmi.w	8006826 <_printf_float+0x44e>
 8006620:	68e0      	ldr	r0, [r4, #12]
 8006622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006624:	4298      	cmp	r0, r3
 8006626:	bfb8      	it	lt
 8006628:	4618      	movlt	r0, r3
 800662a:	e734      	b.n	8006496 <_printf_float+0xbe>
 800662c:	2301      	movs	r3, #1
 800662e:	464a      	mov	r2, r9
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f af2b 	beq.w	8006492 <_printf_float+0xba>
 800663c:	f108 0801 	add.w	r8, r8, #1
 8006640:	e7e6      	b.n	8006610 <_printf_float+0x238>
 8006642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	dc2b      	bgt.n	80066a0 <_printf_float+0x2c8>
 8006648:	2301      	movs	r3, #1
 800664a:	4a26      	ldr	r2, [pc, #152]	; (80066e4 <_printf_float+0x30c>)
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	f43f af1d 	beq.w	8006492 <_printf_float+0xba>
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	b923      	cbnz	r3, 8006666 <_printf_float+0x28e>
 800665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665e:	b913      	cbnz	r3, 8006666 <_printf_float+0x28e>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	07d9      	lsls	r1, r3, #31
 8006664:	d5d8      	bpl.n	8006618 <_printf_float+0x240>
 8006666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f af0e 	beq.w	8006492 <_printf_float+0xba>
 8006676:	f04f 0900 	mov.w	r9, #0
 800667a:	f104 0a1a 	add.w	sl, r4, #26
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	425b      	negs	r3, r3
 8006682:	454b      	cmp	r3, r9
 8006684:	dc01      	bgt.n	800668a <_printf_float+0x2b2>
 8006686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006688:	e794      	b.n	80065b4 <_printf_float+0x1dc>
 800668a:	2301      	movs	r3, #1
 800668c:	4652      	mov	r2, sl
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f aefc 	beq.w	8006492 <_printf_float+0xba>
 800669a:	f109 0901 	add.w	r9, r9, #1
 800669e:	e7ee      	b.n	800667e <_printf_float+0x2a6>
 80066a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bfa8      	it	ge
 80066a8:	461a      	movge	r2, r3
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	4691      	mov	r9, r2
 80066ae:	dd07      	ble.n	80066c0 <_printf_float+0x2e8>
 80066b0:	4613      	mov	r3, r2
 80066b2:	4631      	mov	r1, r6
 80066b4:	4642      	mov	r2, r8
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	f43f aee9 	beq.w	8006492 <_printf_float+0xba>
 80066c0:	f104 031a 	add.w	r3, r4, #26
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066cc:	9306      	str	r3, [sp, #24]
 80066ce:	e015      	b.n	80066fc <_printf_float+0x324>
 80066d0:	7fefffff 	.word	0x7fefffff
 80066d4:	0800ad9c 	.word	0x0800ad9c
 80066d8:	0800ad98 	.word	0x0800ad98
 80066dc:	0800ada4 	.word	0x0800ada4
 80066e0:	0800ada0 	.word	0x0800ada0
 80066e4:	0800ada8 	.word	0x0800ada8
 80066e8:	2301      	movs	r3, #1
 80066ea:	9a06      	ldr	r2, [sp, #24]
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f aecd 	beq.w	8006492 <_printf_float+0xba>
 80066f8:	f10b 0b01 	add.w	fp, fp, #1
 80066fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006700:	ebaa 0309 	sub.w	r3, sl, r9
 8006704:	455b      	cmp	r3, fp
 8006706:	dcef      	bgt.n	80066e8 <_printf_float+0x310>
 8006708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800670c:	429a      	cmp	r2, r3
 800670e:	44d0      	add	r8, sl
 8006710:	db15      	blt.n	800673e <_printf_float+0x366>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	07da      	lsls	r2, r3, #31
 8006716:	d412      	bmi.n	800673e <_printf_float+0x366>
 8006718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800671c:	eba3 020a 	sub.w	r2, r3, sl
 8006720:	eba3 0a01 	sub.w	sl, r3, r1
 8006724:	4592      	cmp	sl, r2
 8006726:	bfa8      	it	ge
 8006728:	4692      	movge	sl, r2
 800672a:	f1ba 0f00 	cmp.w	sl, #0
 800672e:	dc0e      	bgt.n	800674e <_printf_float+0x376>
 8006730:	f04f 0800 	mov.w	r8, #0
 8006734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006738:	f104 091a 	add.w	r9, r4, #26
 800673c:	e019      	b.n	8006772 <_printf_float+0x39a>
 800673e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006742:	4631      	mov	r1, r6
 8006744:	4628      	mov	r0, r5
 8006746:	47b8      	blx	r7
 8006748:	3001      	adds	r0, #1
 800674a:	d1e5      	bne.n	8006718 <_printf_float+0x340>
 800674c:	e6a1      	b.n	8006492 <_printf_float+0xba>
 800674e:	4653      	mov	r3, sl
 8006750:	4642      	mov	r2, r8
 8006752:	4631      	mov	r1, r6
 8006754:	4628      	mov	r0, r5
 8006756:	47b8      	blx	r7
 8006758:	3001      	adds	r0, #1
 800675a:	d1e9      	bne.n	8006730 <_printf_float+0x358>
 800675c:	e699      	b.n	8006492 <_printf_float+0xba>
 800675e:	2301      	movs	r3, #1
 8006760:	464a      	mov	r2, r9
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	f43f ae92 	beq.w	8006492 <_printf_float+0xba>
 800676e:	f108 0801 	add.w	r8, r8, #1
 8006772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	eba3 030a 	sub.w	r3, r3, sl
 800677c:	4543      	cmp	r3, r8
 800677e:	dcee      	bgt.n	800675e <_printf_float+0x386>
 8006780:	e74a      	b.n	8006618 <_printf_float+0x240>
 8006782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006784:	2a01      	cmp	r2, #1
 8006786:	dc01      	bgt.n	800678c <_printf_float+0x3b4>
 8006788:	07db      	lsls	r3, r3, #31
 800678a:	d53a      	bpl.n	8006802 <_printf_float+0x42a>
 800678c:	2301      	movs	r3, #1
 800678e:	4642      	mov	r2, r8
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	f43f ae7b 	beq.w	8006492 <_printf_float+0xba>
 800679c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f108 0801 	add.w	r8, r8, #1
 80067ac:	f43f ae71 	beq.w	8006492 <_printf_float+0xba>
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	2200      	movs	r2, #0
 80067b4:	f103 3aff 	add.w	sl, r3, #4294967295
 80067b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067bc:	2300      	movs	r3, #0
 80067be:	f7fa f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c2:	b9c8      	cbnz	r0, 80067f8 <_printf_float+0x420>
 80067c4:	4653      	mov	r3, sl
 80067c6:	4642      	mov	r2, r8
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	d10e      	bne.n	80067f0 <_printf_float+0x418>
 80067d2:	e65e      	b.n	8006492 <_printf_float+0xba>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4652      	mov	r2, sl
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f ae57 	beq.w	8006492 <_printf_float+0xba>
 80067e4:	f108 0801 	add.w	r8, r8, #1
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4543      	cmp	r3, r8
 80067ee:	dcf1      	bgt.n	80067d4 <_printf_float+0x3fc>
 80067f0:	464b      	mov	r3, r9
 80067f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067f6:	e6de      	b.n	80065b6 <_printf_float+0x1de>
 80067f8:	f04f 0800 	mov.w	r8, #0
 80067fc:	f104 0a1a 	add.w	sl, r4, #26
 8006800:	e7f2      	b.n	80067e8 <_printf_float+0x410>
 8006802:	2301      	movs	r3, #1
 8006804:	e7df      	b.n	80067c6 <_printf_float+0x3ee>
 8006806:	2301      	movs	r3, #1
 8006808:	464a      	mov	r2, r9
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae3e 	beq.w	8006492 <_printf_float+0xba>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	4543      	cmp	r3, r8
 8006822:	dcf0      	bgt.n	8006806 <_printf_float+0x42e>
 8006824:	e6fc      	b.n	8006620 <_printf_float+0x248>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0919 	add.w	r9, r4, #25
 800682e:	e7f4      	b.n	800681a <_printf_float+0x442>
 8006830:	2900      	cmp	r1, #0
 8006832:	f43f ae8b 	beq.w	800654c <_printf_float+0x174>
 8006836:	2300      	movs	r3, #0
 8006838:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800683c:	ab09      	add	r3, sp, #36	; 0x24
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	ec49 8b10 	vmov	d0, r8, r9
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	f8cd a004 	str.w	sl, [sp, #4]
 800684a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800684e:	4628      	mov	r0, r5
 8006850:	f7ff fd2d 	bl	80062ae <__cvt>
 8006854:	4680      	mov	r8, r0
 8006856:	e648      	b.n	80064ea <_printf_float+0x112>

08006858 <_printf_common>:
 8006858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	4691      	mov	r9, r2
 800685e:	461f      	mov	r7, r3
 8006860:	688a      	ldr	r2, [r1, #8]
 8006862:	690b      	ldr	r3, [r1, #16]
 8006864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006868:	4293      	cmp	r3, r2
 800686a:	bfb8      	it	lt
 800686c:	4613      	movlt	r3, r2
 800686e:	f8c9 3000 	str.w	r3, [r9]
 8006872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006876:	4606      	mov	r6, r0
 8006878:	460c      	mov	r4, r1
 800687a:	b112      	cbz	r2, 8006882 <_printf_common+0x2a>
 800687c:	3301      	adds	r3, #1
 800687e:	f8c9 3000 	str.w	r3, [r9]
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	0699      	lsls	r1, r3, #26
 8006886:	bf42      	ittt	mi
 8006888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800688c:	3302      	addmi	r3, #2
 800688e:	f8c9 3000 	strmi.w	r3, [r9]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d107      	bne.n	80068aa <_printf_common+0x52>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	f8d9 2000 	ldr.w	r2, [r9]
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	42ab      	cmp	r3, r5
 80068a8:	dc28      	bgt.n	80068fc <_printf_common+0xa4>
 80068aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	3300      	adds	r3, #0
 80068b2:	bf18      	it	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	0692      	lsls	r2, r2, #26
 80068b8:	d42d      	bmi.n	8006916 <_printf_common+0xbe>
 80068ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068be:	4639      	mov	r1, r7
 80068c0:	4630      	mov	r0, r6
 80068c2:	47c0      	blx	r8
 80068c4:	3001      	adds	r0, #1
 80068c6:	d020      	beq.n	800690a <_printf_common+0xb2>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	68e5      	ldr	r5, [r4, #12]
 80068cc:	f8d9 2000 	ldr.w	r2, [r9]
 80068d0:	f003 0306 	and.w	r3, r3, #6
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	bf08      	it	eq
 80068d8:	1aad      	subeq	r5, r5, r2
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	6922      	ldr	r2, [r4, #16]
 80068de:	bf0c      	ite	eq
 80068e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e4:	2500      	movne	r5, #0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	bfc4      	itt	gt
 80068ea:	1a9b      	subgt	r3, r3, r2
 80068ec:	18ed      	addgt	r5, r5, r3
 80068ee:	f04f 0900 	mov.w	r9, #0
 80068f2:	341a      	adds	r4, #26
 80068f4:	454d      	cmp	r5, r9
 80068f6:	d11a      	bne.n	800692e <_printf_common+0xd6>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e008      	b.n	800690e <_printf_common+0xb6>
 80068fc:	2301      	movs	r3, #1
 80068fe:	4652      	mov	r2, sl
 8006900:	4639      	mov	r1, r7
 8006902:	4630      	mov	r0, r6
 8006904:	47c0      	blx	r8
 8006906:	3001      	adds	r0, #1
 8006908:	d103      	bne.n	8006912 <_printf_common+0xba>
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006912:	3501      	adds	r5, #1
 8006914:	e7c3      	b.n	800689e <_printf_common+0x46>
 8006916:	18e1      	adds	r1, r4, r3
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	2030      	movs	r0, #48	; 0x30
 800691c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006920:	4422      	add	r2, r4
 8006922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800692a:	3302      	adds	r3, #2
 800692c:	e7c5      	b.n	80068ba <_printf_common+0x62>
 800692e:	2301      	movs	r3, #1
 8006930:	4622      	mov	r2, r4
 8006932:	4639      	mov	r1, r7
 8006934:	4630      	mov	r0, r6
 8006936:	47c0      	blx	r8
 8006938:	3001      	adds	r0, #1
 800693a:	d0e6      	beq.n	800690a <_printf_common+0xb2>
 800693c:	f109 0901 	add.w	r9, r9, #1
 8006940:	e7d8      	b.n	80068f4 <_printf_common+0x9c>
	...

08006944 <_printf_i>:
 8006944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006948:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800694c:	460c      	mov	r4, r1
 800694e:	7e09      	ldrb	r1, [r1, #24]
 8006950:	b085      	sub	sp, #20
 8006952:	296e      	cmp	r1, #110	; 0x6e
 8006954:	4617      	mov	r7, r2
 8006956:	4606      	mov	r6, r0
 8006958:	4698      	mov	r8, r3
 800695a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800695c:	f000 80b3 	beq.w	8006ac6 <_printf_i+0x182>
 8006960:	d822      	bhi.n	80069a8 <_printf_i+0x64>
 8006962:	2963      	cmp	r1, #99	; 0x63
 8006964:	d036      	beq.n	80069d4 <_printf_i+0x90>
 8006966:	d80a      	bhi.n	800697e <_printf_i+0x3a>
 8006968:	2900      	cmp	r1, #0
 800696a:	f000 80b9 	beq.w	8006ae0 <_printf_i+0x19c>
 800696e:	2958      	cmp	r1, #88	; 0x58
 8006970:	f000 8083 	beq.w	8006a7a <_printf_i+0x136>
 8006974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006978:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800697c:	e032      	b.n	80069e4 <_printf_i+0xa0>
 800697e:	2964      	cmp	r1, #100	; 0x64
 8006980:	d001      	beq.n	8006986 <_printf_i+0x42>
 8006982:	2969      	cmp	r1, #105	; 0x69
 8006984:	d1f6      	bne.n	8006974 <_printf_i+0x30>
 8006986:	6820      	ldr	r0, [r4, #0]
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	0605      	lsls	r5, r0, #24
 800698c:	f103 0104 	add.w	r1, r3, #4
 8006990:	d52a      	bpl.n	80069e8 <_printf_i+0xa4>
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6011      	str	r1, [r2, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	da03      	bge.n	80069a2 <_printf_i+0x5e>
 800699a:	222d      	movs	r2, #45	; 0x2d
 800699c:	425b      	negs	r3, r3
 800699e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069a2:	486f      	ldr	r0, [pc, #444]	; (8006b60 <_printf_i+0x21c>)
 80069a4:	220a      	movs	r2, #10
 80069a6:	e039      	b.n	8006a1c <_printf_i+0xd8>
 80069a8:	2973      	cmp	r1, #115	; 0x73
 80069aa:	f000 809d 	beq.w	8006ae8 <_printf_i+0x1a4>
 80069ae:	d808      	bhi.n	80069c2 <_printf_i+0x7e>
 80069b0:	296f      	cmp	r1, #111	; 0x6f
 80069b2:	d020      	beq.n	80069f6 <_printf_i+0xb2>
 80069b4:	2970      	cmp	r1, #112	; 0x70
 80069b6:	d1dd      	bne.n	8006974 <_printf_i+0x30>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	f043 0320 	orr.w	r3, r3, #32
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	e003      	b.n	80069ca <_printf_i+0x86>
 80069c2:	2975      	cmp	r1, #117	; 0x75
 80069c4:	d017      	beq.n	80069f6 <_printf_i+0xb2>
 80069c6:	2978      	cmp	r1, #120	; 0x78
 80069c8:	d1d4      	bne.n	8006974 <_printf_i+0x30>
 80069ca:	2378      	movs	r3, #120	; 0x78
 80069cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069d0:	4864      	ldr	r0, [pc, #400]	; (8006b64 <_printf_i+0x220>)
 80069d2:	e055      	b.n	8006a80 <_printf_i+0x13c>
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	1d19      	adds	r1, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6011      	str	r1, [r2, #0]
 80069dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e4:	2301      	movs	r3, #1
 80069e6:	e08c      	b.n	8006b02 <_printf_i+0x1be>
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6011      	str	r1, [r2, #0]
 80069ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069f0:	bf18      	it	ne
 80069f2:	b21b      	sxthne	r3, r3
 80069f4:	e7cf      	b.n	8006996 <_printf_i+0x52>
 80069f6:	6813      	ldr	r3, [r2, #0]
 80069f8:	6825      	ldr	r5, [r4, #0]
 80069fa:	1d18      	adds	r0, r3, #4
 80069fc:	6010      	str	r0, [r2, #0]
 80069fe:	0628      	lsls	r0, r5, #24
 8006a00:	d501      	bpl.n	8006a06 <_printf_i+0xc2>
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	e002      	b.n	8006a0c <_printf_i+0xc8>
 8006a06:	0668      	lsls	r0, r5, #25
 8006a08:	d5fb      	bpl.n	8006a02 <_printf_i+0xbe>
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	4854      	ldr	r0, [pc, #336]	; (8006b60 <_printf_i+0x21c>)
 8006a0e:	296f      	cmp	r1, #111	; 0x6f
 8006a10:	bf14      	ite	ne
 8006a12:	220a      	movne	r2, #10
 8006a14:	2208      	moveq	r2, #8
 8006a16:	2100      	movs	r1, #0
 8006a18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a1c:	6865      	ldr	r5, [r4, #4]
 8006a1e:	60a5      	str	r5, [r4, #8]
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	f2c0 8095 	blt.w	8006b50 <_printf_i+0x20c>
 8006a26:	6821      	ldr	r1, [r4, #0]
 8006a28:	f021 0104 	bic.w	r1, r1, #4
 8006a2c:	6021      	str	r1, [r4, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d13d      	bne.n	8006aae <_printf_i+0x16a>
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	f040 808e 	bne.w	8006b54 <_printf_i+0x210>
 8006a38:	4665      	mov	r5, ip
 8006a3a:	2a08      	cmp	r2, #8
 8006a3c:	d10b      	bne.n	8006a56 <_printf_i+0x112>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	07db      	lsls	r3, r3, #31
 8006a42:	d508      	bpl.n	8006a56 <_printf_i+0x112>
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	6862      	ldr	r2, [r4, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	bfde      	ittt	le
 8006a4c:	2330      	movle	r3, #48	; 0x30
 8006a4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a56:	ebac 0305 	sub.w	r3, ip, r5
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	f8cd 8000 	str.w	r8, [sp]
 8006a60:	463b      	mov	r3, r7
 8006a62:	aa03      	add	r2, sp, #12
 8006a64:	4621      	mov	r1, r4
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff fef6 	bl	8006858 <_printf_common>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d14d      	bne.n	8006b0c <_printf_i+0x1c8>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b005      	add	sp, #20
 8006a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a7a:	4839      	ldr	r0, [pc, #228]	; (8006b60 <_printf_i+0x21c>)
 8006a7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a80:	6813      	ldr	r3, [r2, #0]
 8006a82:	6821      	ldr	r1, [r4, #0]
 8006a84:	1d1d      	adds	r5, r3, #4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6015      	str	r5, [r2, #0]
 8006a8a:	060a      	lsls	r2, r1, #24
 8006a8c:	d50b      	bpl.n	8006aa6 <_printf_i+0x162>
 8006a8e:	07ca      	lsls	r2, r1, #31
 8006a90:	bf44      	itt	mi
 8006a92:	f041 0120 	orrmi.w	r1, r1, #32
 8006a96:	6021      	strmi	r1, [r4, #0]
 8006a98:	b91b      	cbnz	r3, 8006aa2 <_printf_i+0x15e>
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	f022 0220 	bic.w	r2, r2, #32
 8006aa0:	6022      	str	r2, [r4, #0]
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	e7b7      	b.n	8006a16 <_printf_i+0xd2>
 8006aa6:	064d      	lsls	r5, r1, #25
 8006aa8:	bf48      	it	mi
 8006aaa:	b29b      	uxthmi	r3, r3
 8006aac:	e7ef      	b.n	8006a8e <_printf_i+0x14a>
 8006aae:	4665      	mov	r5, ip
 8006ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ab4:	fb02 3311 	mls	r3, r2, r1, r3
 8006ab8:	5cc3      	ldrb	r3, [r0, r3]
 8006aba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006abe:	460b      	mov	r3, r1
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d1f5      	bne.n	8006ab0 <_printf_i+0x16c>
 8006ac4:	e7b9      	b.n	8006a3a <_printf_i+0xf6>
 8006ac6:	6813      	ldr	r3, [r2, #0]
 8006ac8:	6825      	ldr	r5, [r4, #0]
 8006aca:	6961      	ldr	r1, [r4, #20]
 8006acc:	1d18      	adds	r0, r3, #4
 8006ace:	6010      	str	r0, [r2, #0]
 8006ad0:	0628      	lsls	r0, r5, #24
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	d501      	bpl.n	8006ada <_printf_i+0x196>
 8006ad6:	6019      	str	r1, [r3, #0]
 8006ad8:	e002      	b.n	8006ae0 <_printf_i+0x19c>
 8006ada:	066a      	lsls	r2, r5, #25
 8006adc:	d5fb      	bpl.n	8006ad6 <_printf_i+0x192>
 8006ade:	8019      	strh	r1, [r3, #0]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	6123      	str	r3, [r4, #16]
 8006ae4:	4665      	mov	r5, ip
 8006ae6:	e7b9      	b.n	8006a5c <_printf_i+0x118>
 8006ae8:	6813      	ldr	r3, [r2, #0]
 8006aea:	1d19      	adds	r1, r3, #4
 8006aec:	6011      	str	r1, [r2, #0]
 8006aee:	681d      	ldr	r5, [r3, #0]
 8006af0:	6862      	ldr	r2, [r4, #4]
 8006af2:	2100      	movs	r1, #0
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7f9 fb7b 	bl	80001f0 <memchr>
 8006afa:	b108      	cbz	r0, 8006b00 <_printf_i+0x1bc>
 8006afc:	1b40      	subs	r0, r0, r5
 8006afe:	6060      	str	r0, [r4, #4]
 8006b00:	6863      	ldr	r3, [r4, #4]
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	2300      	movs	r3, #0
 8006b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b0a:	e7a7      	b.n	8006a5c <_printf_i+0x118>
 8006b0c:	6923      	ldr	r3, [r4, #16]
 8006b0e:	462a      	mov	r2, r5
 8006b10:	4639      	mov	r1, r7
 8006b12:	4630      	mov	r0, r6
 8006b14:	47c0      	blx	r8
 8006b16:	3001      	adds	r0, #1
 8006b18:	d0aa      	beq.n	8006a70 <_printf_i+0x12c>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	079b      	lsls	r3, r3, #30
 8006b1e:	d413      	bmi.n	8006b48 <_printf_i+0x204>
 8006b20:	68e0      	ldr	r0, [r4, #12]
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	4298      	cmp	r0, r3
 8006b26:	bfb8      	it	lt
 8006b28:	4618      	movlt	r0, r3
 8006b2a:	e7a3      	b.n	8006a74 <_printf_i+0x130>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	464a      	mov	r2, r9
 8006b30:	4639      	mov	r1, r7
 8006b32:	4630      	mov	r0, r6
 8006b34:	47c0      	blx	r8
 8006b36:	3001      	adds	r0, #1
 8006b38:	d09a      	beq.n	8006a70 <_printf_i+0x12c>
 8006b3a:	3501      	adds	r5, #1
 8006b3c:	68e3      	ldr	r3, [r4, #12]
 8006b3e:	9a03      	ldr	r2, [sp, #12]
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	42ab      	cmp	r3, r5
 8006b44:	dcf2      	bgt.n	8006b2c <_printf_i+0x1e8>
 8006b46:	e7eb      	b.n	8006b20 <_printf_i+0x1dc>
 8006b48:	2500      	movs	r5, #0
 8006b4a:	f104 0919 	add.w	r9, r4, #25
 8006b4e:	e7f5      	b.n	8006b3c <_printf_i+0x1f8>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1ac      	bne.n	8006aae <_printf_i+0x16a>
 8006b54:	7803      	ldrb	r3, [r0, #0]
 8006b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b5e:	e76c      	b.n	8006a3a <_printf_i+0xf6>
 8006b60:	0800adaa 	.word	0x0800adaa
 8006b64:	0800adbb 	.word	0x0800adbb

08006b68 <_scanf_float>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	469a      	mov	sl, r3
 8006b6e:	688b      	ldr	r3, [r1, #8]
 8006b70:	4616      	mov	r6, r2
 8006b72:	1e5a      	subs	r2, r3, #1
 8006b74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b78:	b087      	sub	sp, #28
 8006b7a:	bf83      	ittte	hi
 8006b7c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006b80:	189b      	addhi	r3, r3, r2
 8006b82:	9301      	strhi	r3, [sp, #4]
 8006b84:	2300      	movls	r3, #0
 8006b86:	bf86      	itte	hi
 8006b88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b8c:	608b      	strhi	r3, [r1, #8]
 8006b8e:	9301      	strls	r3, [sp, #4]
 8006b90:	680b      	ldr	r3, [r1, #0]
 8006b92:	4688      	mov	r8, r1
 8006b94:	f04f 0b00 	mov.w	fp, #0
 8006b98:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b9c:	f848 3b1c 	str.w	r3, [r8], #28
 8006ba0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	4645      	mov	r5, r8
 8006baa:	465a      	mov	r2, fp
 8006bac:	46d9      	mov	r9, fp
 8006bae:	f8cd b008 	str.w	fp, [sp, #8]
 8006bb2:	68a1      	ldr	r1, [r4, #8]
 8006bb4:	b181      	cbz	r1, 8006bd8 <_scanf_float+0x70>
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b49      	cmp	r3, #73	; 0x49
 8006bbc:	d071      	beq.n	8006ca2 <_scanf_float+0x13a>
 8006bbe:	d84d      	bhi.n	8006c5c <_scanf_float+0xf4>
 8006bc0:	2b39      	cmp	r3, #57	; 0x39
 8006bc2:	d840      	bhi.n	8006c46 <_scanf_float+0xde>
 8006bc4:	2b31      	cmp	r3, #49	; 0x31
 8006bc6:	f080 8088 	bcs.w	8006cda <_scanf_float+0x172>
 8006bca:	2b2d      	cmp	r3, #45	; 0x2d
 8006bcc:	f000 8090 	beq.w	8006cf0 <_scanf_float+0x188>
 8006bd0:	d815      	bhi.n	8006bfe <_scanf_float+0x96>
 8006bd2:	2b2b      	cmp	r3, #43	; 0x2b
 8006bd4:	f000 808c 	beq.w	8006cf0 <_scanf_float+0x188>
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	d003      	beq.n	8006be6 <_scanf_float+0x7e>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	3a01      	subs	r2, #1
 8006be8:	2a01      	cmp	r2, #1
 8006bea:	f200 80ea 	bhi.w	8006dc2 <_scanf_float+0x25a>
 8006bee:	4545      	cmp	r5, r8
 8006bf0:	f200 80dc 	bhi.w	8006dac <_scanf_float+0x244>
 8006bf4:	2601      	movs	r6, #1
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	b007      	add	sp, #28
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006c00:	f000 809f 	beq.w	8006d42 <_scanf_float+0x1da>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d1e7      	bne.n	8006bd8 <_scanf_float+0x70>
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006c0e:	d064      	beq.n	8006cda <_scanf_float+0x172>
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006c16:	6020      	str	r0, [r4, #0]
 8006c18:	f109 0901 	add.w	r9, r9, #1
 8006c1c:	b11b      	cbz	r3, 8006c26 <_scanf_float+0xbe>
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	3101      	adds	r1, #1
 8006c22:	9301      	str	r3, [sp, #4]
 8006c24:	60a1      	str	r1, [r4, #8]
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	6123      	str	r3, [r4, #16]
 8006c32:	6873      	ldr	r3, [r6, #4]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	6073      	str	r3, [r6, #4]
 8006c3a:	f340 80ac 	ble.w	8006d96 <_scanf_float+0x22e>
 8006c3e:	6833      	ldr	r3, [r6, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	e7b5      	b.n	8006bb2 <_scanf_float+0x4a>
 8006c46:	2b45      	cmp	r3, #69	; 0x45
 8006c48:	f000 8085 	beq.w	8006d56 <_scanf_float+0x1ee>
 8006c4c:	2b46      	cmp	r3, #70	; 0x46
 8006c4e:	d06a      	beq.n	8006d26 <_scanf_float+0x1be>
 8006c50:	2b41      	cmp	r3, #65	; 0x41
 8006c52:	d1c1      	bne.n	8006bd8 <_scanf_float+0x70>
 8006c54:	2a01      	cmp	r2, #1
 8006c56:	d1bf      	bne.n	8006bd8 <_scanf_float+0x70>
 8006c58:	2202      	movs	r2, #2
 8006c5a:	e046      	b.n	8006cea <_scanf_float+0x182>
 8006c5c:	2b65      	cmp	r3, #101	; 0x65
 8006c5e:	d07a      	beq.n	8006d56 <_scanf_float+0x1ee>
 8006c60:	d818      	bhi.n	8006c94 <_scanf_float+0x12c>
 8006c62:	2b54      	cmp	r3, #84	; 0x54
 8006c64:	d066      	beq.n	8006d34 <_scanf_float+0x1cc>
 8006c66:	d811      	bhi.n	8006c8c <_scanf_float+0x124>
 8006c68:	2b4e      	cmp	r3, #78	; 0x4e
 8006c6a:	d1b5      	bne.n	8006bd8 <_scanf_float+0x70>
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	d146      	bne.n	8006cfe <_scanf_float+0x196>
 8006c70:	f1b9 0f00 	cmp.w	r9, #0
 8006c74:	d145      	bne.n	8006d02 <_scanf_float+0x19a>
 8006c76:	6821      	ldr	r1, [r4, #0]
 8006c78:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006c7c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006c80:	d13f      	bne.n	8006d02 <_scanf_float+0x19a>
 8006c82:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006c86:	6021      	str	r1, [r4, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	e02e      	b.n	8006cea <_scanf_float+0x182>
 8006c8c:	2b59      	cmp	r3, #89	; 0x59
 8006c8e:	d01e      	beq.n	8006cce <_scanf_float+0x166>
 8006c90:	2b61      	cmp	r3, #97	; 0x61
 8006c92:	e7de      	b.n	8006c52 <_scanf_float+0xea>
 8006c94:	2b6e      	cmp	r3, #110	; 0x6e
 8006c96:	d0e9      	beq.n	8006c6c <_scanf_float+0x104>
 8006c98:	d815      	bhi.n	8006cc6 <_scanf_float+0x15e>
 8006c9a:	2b66      	cmp	r3, #102	; 0x66
 8006c9c:	d043      	beq.n	8006d26 <_scanf_float+0x1be>
 8006c9e:	2b69      	cmp	r3, #105	; 0x69
 8006ca0:	d19a      	bne.n	8006bd8 <_scanf_float+0x70>
 8006ca2:	f1bb 0f00 	cmp.w	fp, #0
 8006ca6:	d138      	bne.n	8006d1a <_scanf_float+0x1b2>
 8006ca8:	f1b9 0f00 	cmp.w	r9, #0
 8006cac:	d197      	bne.n	8006bde <_scanf_float+0x76>
 8006cae:	6821      	ldr	r1, [r4, #0]
 8006cb0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006cb4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006cb8:	d195      	bne.n	8006be6 <_scanf_float+0x7e>
 8006cba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006cbe:	6021      	str	r1, [r4, #0]
 8006cc0:	f04f 0b01 	mov.w	fp, #1
 8006cc4:	e011      	b.n	8006cea <_scanf_float+0x182>
 8006cc6:	2b74      	cmp	r3, #116	; 0x74
 8006cc8:	d034      	beq.n	8006d34 <_scanf_float+0x1cc>
 8006cca:	2b79      	cmp	r3, #121	; 0x79
 8006ccc:	d184      	bne.n	8006bd8 <_scanf_float+0x70>
 8006cce:	f1bb 0f07 	cmp.w	fp, #7
 8006cd2:	d181      	bne.n	8006bd8 <_scanf_float+0x70>
 8006cd4:	f04f 0b08 	mov.w	fp, #8
 8006cd8:	e007      	b.n	8006cea <_scanf_float+0x182>
 8006cda:	eb12 0f0b 	cmn.w	r2, fp
 8006cde:	f47f af7b 	bne.w	8006bd8 <_scanf_float+0x70>
 8006ce2:	6821      	ldr	r1, [r4, #0]
 8006ce4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006ce8:	6021      	str	r1, [r4, #0]
 8006cea:	702b      	strb	r3, [r5, #0]
 8006cec:	3501      	adds	r5, #1
 8006cee:	e79a      	b.n	8006c26 <_scanf_float+0xbe>
 8006cf0:	6821      	ldr	r1, [r4, #0]
 8006cf2:	0608      	lsls	r0, r1, #24
 8006cf4:	f57f af70 	bpl.w	8006bd8 <_scanf_float+0x70>
 8006cf8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006cfc:	e7f4      	b.n	8006ce8 <_scanf_float+0x180>
 8006cfe:	2a02      	cmp	r2, #2
 8006d00:	d047      	beq.n	8006d92 <_scanf_float+0x22a>
 8006d02:	f1bb 0f01 	cmp.w	fp, #1
 8006d06:	d003      	beq.n	8006d10 <_scanf_float+0x1a8>
 8006d08:	f1bb 0f04 	cmp.w	fp, #4
 8006d0c:	f47f af64 	bne.w	8006bd8 <_scanf_float+0x70>
 8006d10:	f10b 0b01 	add.w	fp, fp, #1
 8006d14:	fa5f fb8b 	uxtb.w	fp, fp
 8006d18:	e7e7      	b.n	8006cea <_scanf_float+0x182>
 8006d1a:	f1bb 0f03 	cmp.w	fp, #3
 8006d1e:	d0f7      	beq.n	8006d10 <_scanf_float+0x1a8>
 8006d20:	f1bb 0f05 	cmp.w	fp, #5
 8006d24:	e7f2      	b.n	8006d0c <_scanf_float+0x1a4>
 8006d26:	f1bb 0f02 	cmp.w	fp, #2
 8006d2a:	f47f af55 	bne.w	8006bd8 <_scanf_float+0x70>
 8006d2e:	f04f 0b03 	mov.w	fp, #3
 8006d32:	e7da      	b.n	8006cea <_scanf_float+0x182>
 8006d34:	f1bb 0f06 	cmp.w	fp, #6
 8006d38:	f47f af4e 	bne.w	8006bd8 <_scanf_float+0x70>
 8006d3c:	f04f 0b07 	mov.w	fp, #7
 8006d40:	e7d3      	b.n	8006cea <_scanf_float+0x182>
 8006d42:	6821      	ldr	r1, [r4, #0]
 8006d44:	0588      	lsls	r0, r1, #22
 8006d46:	f57f af47 	bpl.w	8006bd8 <_scanf_float+0x70>
 8006d4a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006d4e:	6021      	str	r1, [r4, #0]
 8006d50:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d54:	e7c9      	b.n	8006cea <_scanf_float+0x182>
 8006d56:	6821      	ldr	r1, [r4, #0]
 8006d58:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006d5c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006d60:	d006      	beq.n	8006d70 <_scanf_float+0x208>
 8006d62:	0548      	lsls	r0, r1, #21
 8006d64:	f57f af38 	bpl.w	8006bd8 <_scanf_float+0x70>
 8006d68:	f1b9 0f00 	cmp.w	r9, #0
 8006d6c:	f43f af3b 	beq.w	8006be6 <_scanf_float+0x7e>
 8006d70:	0588      	lsls	r0, r1, #22
 8006d72:	bf58      	it	pl
 8006d74:	9802      	ldrpl	r0, [sp, #8]
 8006d76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d7a:	bf58      	it	pl
 8006d7c:	eba9 0000 	subpl.w	r0, r9, r0
 8006d80:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006d84:	bf58      	it	pl
 8006d86:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006d8a:	6021      	str	r1, [r4, #0]
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	e7ab      	b.n	8006cea <_scanf_float+0x182>
 8006d92:	2203      	movs	r2, #3
 8006d94:	e7a9      	b.n	8006cea <_scanf_float+0x182>
 8006d96:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d9a:	9205      	str	r2, [sp, #20]
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4638      	mov	r0, r7
 8006da0:	4798      	blx	r3
 8006da2:	9a05      	ldr	r2, [sp, #20]
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f43f af04 	beq.w	8006bb2 <_scanf_float+0x4a>
 8006daa:	e715      	b.n	8006bd8 <_scanf_float+0x70>
 8006dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006db0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006db4:	4632      	mov	r2, r6
 8006db6:	4638      	mov	r0, r7
 8006db8:	4798      	blx	r3
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	6123      	str	r3, [r4, #16]
 8006dc0:	e715      	b.n	8006bee <_scanf_float+0x86>
 8006dc2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006dc6:	2b06      	cmp	r3, #6
 8006dc8:	d80a      	bhi.n	8006de0 <_scanf_float+0x278>
 8006dca:	f1bb 0f02 	cmp.w	fp, #2
 8006dce:	d968      	bls.n	8006ea2 <_scanf_float+0x33a>
 8006dd0:	f1ab 0b03 	sub.w	fp, fp, #3
 8006dd4:	fa5f fb8b 	uxtb.w	fp, fp
 8006dd8:	eba5 0b0b 	sub.w	fp, r5, fp
 8006ddc:	455d      	cmp	r5, fp
 8006dde:	d14b      	bne.n	8006e78 <_scanf_float+0x310>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	05da      	lsls	r2, r3, #23
 8006de4:	d51f      	bpl.n	8006e26 <_scanf_float+0x2be>
 8006de6:	055b      	lsls	r3, r3, #21
 8006de8:	d468      	bmi.n	8006ebc <_scanf_float+0x354>
 8006dea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	2965      	cmp	r1, #101	; 0x65
 8006df2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006df6:	f105 3bff 	add.w	fp, r5, #4294967295
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	d00d      	beq.n	8006e1a <_scanf_float+0x2b2>
 8006dfe:	2945      	cmp	r1, #69	; 0x45
 8006e00:	d00b      	beq.n	8006e1a <_scanf_float+0x2b2>
 8006e02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e06:	4632      	mov	r2, r6
 8006e08:	4638      	mov	r0, r7
 8006e0a:	4798      	blx	r3
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	f1a5 0b02 	sub.w	fp, r5, #2
 8006e18:	6123      	str	r3, [r4, #16]
 8006e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e1e:	4632      	mov	r2, r6
 8006e20:	4638      	mov	r0, r7
 8006e22:	4798      	blx	r3
 8006e24:	465d      	mov	r5, fp
 8006e26:	6826      	ldr	r6, [r4, #0]
 8006e28:	f016 0610 	ands.w	r6, r6, #16
 8006e2c:	d17a      	bne.n	8006f24 <_scanf_float+0x3bc>
 8006e2e:	702e      	strb	r6, [r5, #0]
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3a:	d142      	bne.n	8006ec2 <_scanf_float+0x35a>
 8006e3c:	9b02      	ldr	r3, [sp, #8]
 8006e3e:	eba9 0303 	sub.w	r3, r9, r3
 8006e42:	425a      	negs	r2, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d149      	bne.n	8006edc <_scanf_float+0x374>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	f000 fea3 	bl	8007b98 <_strtod_r>
 8006e52:	6825      	ldr	r5, [r4, #0]
 8006e54:	f8da 3000 	ldr.w	r3, [sl]
 8006e58:	f015 0f02 	tst.w	r5, #2
 8006e5c:	f103 0204 	add.w	r2, r3, #4
 8006e60:	ec59 8b10 	vmov	r8, r9, d0
 8006e64:	f8ca 2000 	str.w	r2, [sl]
 8006e68:	d043      	beq.n	8006ef2 <_scanf_float+0x38a>
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	e9c3 8900 	strd	r8, r9, [r3]
 8006e70:	68e3      	ldr	r3, [r4, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60e3      	str	r3, [r4, #12]
 8006e76:	e6be      	b.n	8006bf6 <_scanf_float+0x8e>
 8006e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e80:	4632      	mov	r2, r6
 8006e82:	4638      	mov	r0, r7
 8006e84:	4798      	blx	r3
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	6123      	str	r3, [r4, #16]
 8006e8c:	e7a6      	b.n	8006ddc <_scanf_float+0x274>
 8006e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e92:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e96:	4632      	mov	r2, r6
 8006e98:	4638      	mov	r0, r7
 8006e9a:	4798      	blx	r3
 8006e9c:	6923      	ldr	r3, [r4, #16]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	6123      	str	r3, [r4, #16]
 8006ea2:	4545      	cmp	r5, r8
 8006ea4:	d8f3      	bhi.n	8006e8e <_scanf_float+0x326>
 8006ea6:	e6a5      	b.n	8006bf4 <_scanf_float+0x8c>
 8006ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	4798      	blx	r3
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	4545      	cmp	r5, r8
 8006ebe:	d8f3      	bhi.n	8006ea8 <_scanf_float+0x340>
 8006ec0:	e698      	b.n	8006bf4 <_scanf_float+0x8c>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0bf      	beq.n	8006e48 <_scanf_float+0x2e0>
 8006ec8:	9904      	ldr	r1, [sp, #16]
 8006eca:	230a      	movs	r3, #10
 8006ecc:	4632      	mov	r2, r6
 8006ece:	3101      	adds	r1, #1
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f000 feed 	bl	8007cb0 <_strtol_r>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	9d04      	ldr	r5, [sp, #16]
 8006eda:	1ac2      	subs	r2, r0, r3
 8006edc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ee0:	429d      	cmp	r5, r3
 8006ee2:	bf28      	it	cs
 8006ee4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006ee8:	490f      	ldr	r1, [pc, #60]	; (8006f28 <_scanf_float+0x3c0>)
 8006eea:	4628      	mov	r0, r5
 8006eec:	f000 f824 	bl	8006f38 <siprintf>
 8006ef0:	e7aa      	b.n	8006e48 <_scanf_float+0x2e0>
 8006ef2:	f015 0504 	ands.w	r5, r5, #4
 8006ef6:	d1b8      	bne.n	8006e6a <_scanf_float+0x302>
 8006ef8:	681f      	ldr	r7, [r3, #0]
 8006efa:	ee10 2a10 	vmov	r2, s0
 8006efe:	464b      	mov	r3, r9
 8006f00:	ee10 0a10 	vmov	r0, s0
 8006f04:	4649      	mov	r1, r9
 8006f06:	f7f9 fe19 	bl	8000b3c <__aeabi_dcmpun>
 8006f0a:	b128      	cbz	r0, 8006f18 <_scanf_float+0x3b0>
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f000 f80d 	bl	8006f2c <nanf>
 8006f12:	ed87 0a00 	vstr	s0, [r7]
 8006f16:	e7ab      	b.n	8006e70 <_scanf_float+0x308>
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	f7f9 fe6c 	bl	8000bf8 <__aeabi_d2f>
 8006f20:	6038      	str	r0, [r7, #0]
 8006f22:	e7a5      	b.n	8006e70 <_scanf_float+0x308>
 8006f24:	2600      	movs	r6, #0
 8006f26:	e666      	b.n	8006bf6 <_scanf_float+0x8e>
 8006f28:	0800adcc 	.word	0x0800adcc

08006f2c <nanf>:
 8006f2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f34 <nanf+0x8>
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	7fc00000 	.word	0x7fc00000

08006f38 <siprintf>:
 8006f38:	b40e      	push	{r1, r2, r3}
 8006f3a:	b500      	push	{lr}
 8006f3c:	b09c      	sub	sp, #112	; 0x70
 8006f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f40:	9002      	str	r0, [sp, #8]
 8006f42:	9006      	str	r0, [sp, #24]
 8006f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f48:	4809      	ldr	r0, [pc, #36]	; (8006f70 <siprintf+0x38>)
 8006f4a:	9107      	str	r1, [sp, #28]
 8006f4c:	9104      	str	r1, [sp, #16]
 8006f4e:	4909      	ldr	r1, [pc, #36]	; (8006f74 <siprintf+0x3c>)
 8006f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f54:	9105      	str	r1, [sp, #20]
 8006f56:	6800      	ldr	r0, [r0, #0]
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	a902      	add	r1, sp, #8
 8006f5c:	f002 fd64 	bl	8009a28 <_svfiprintf_r>
 8006f60:	9b02      	ldr	r3, [sp, #8]
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	b01c      	add	sp, #112	; 0x70
 8006f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f6c:	b003      	add	sp, #12
 8006f6e:	4770      	bx	lr
 8006f70:	20000014 	.word	0x20000014
 8006f74:	ffff0208 	.word	0xffff0208

08006f78 <sulp>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	460d      	mov	r5, r1
 8006f7e:	ec45 4b10 	vmov	d0, r4, r5
 8006f82:	4616      	mov	r6, r2
 8006f84:	f002 fb0c 	bl	80095a0 <__ulp>
 8006f88:	ec51 0b10 	vmov	r0, r1, d0
 8006f8c:	b17e      	cbz	r6, 8006fae <sulp+0x36>
 8006f8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006f92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dd09      	ble.n	8006fae <sulp+0x36>
 8006f9a:	051b      	lsls	r3, r3, #20
 8006f9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fa0:	2400      	movs	r4, #0
 8006fa2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	462b      	mov	r3, r5
 8006faa:	f7f9 fb2d 	bl	8000608 <__aeabi_dmul>
 8006fae:	bd70      	pop	{r4, r5, r6, pc}

08006fb0 <_strtod_l>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	461f      	mov	r7, r3
 8006fb6:	b0a1      	sub	sp, #132	; 0x84
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4681      	mov	r9, r0
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	460e      	mov	r6, r1
 8006fc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fc2:	931c      	str	r3, [sp, #112]	; 0x70
 8006fc4:	f001 fff5 	bl	8008fb2 <__localeconv_l>
 8006fc8:	4680      	mov	r8, r0
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	f7f9 f908 	bl	80001e0 <strlen>
 8006fd0:	f04f 0a00 	mov.w	sl, #0
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	f04f 0b00 	mov.w	fp, #0
 8006fda:	961b      	str	r6, [sp, #108]	; 0x6c
 8006fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fde:	781a      	ldrb	r2, [r3, #0]
 8006fe0:	2a0d      	cmp	r2, #13
 8006fe2:	d832      	bhi.n	800704a <_strtod_l+0x9a>
 8006fe4:	2a09      	cmp	r2, #9
 8006fe6:	d236      	bcs.n	8007056 <_strtod_l+0xa6>
 8006fe8:	2a00      	cmp	r2, #0
 8006fea:	d03e      	beq.n	800706a <_strtod_l+0xba>
 8006fec:	2300      	movs	r3, #0
 8006fee:	930d      	str	r3, [sp, #52]	; 0x34
 8006ff0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006ff2:	782b      	ldrb	r3, [r5, #0]
 8006ff4:	2b30      	cmp	r3, #48	; 0x30
 8006ff6:	f040 80ac 	bne.w	8007152 <_strtod_l+0x1a2>
 8006ffa:	786b      	ldrb	r3, [r5, #1]
 8006ffc:	2b58      	cmp	r3, #88	; 0x58
 8006ffe:	d001      	beq.n	8007004 <_strtod_l+0x54>
 8007000:	2b78      	cmp	r3, #120	; 0x78
 8007002:	d167      	bne.n	80070d4 <_strtod_l+0x124>
 8007004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	ab1c      	add	r3, sp, #112	; 0x70
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	9702      	str	r7, [sp, #8]
 800700e:	ab1d      	add	r3, sp, #116	; 0x74
 8007010:	4a88      	ldr	r2, [pc, #544]	; (8007234 <_strtod_l+0x284>)
 8007012:	a91b      	add	r1, sp, #108	; 0x6c
 8007014:	4648      	mov	r0, r9
 8007016:	f001 fcf2 	bl	80089fe <__gethex>
 800701a:	f010 0407 	ands.w	r4, r0, #7
 800701e:	4606      	mov	r6, r0
 8007020:	d005      	beq.n	800702e <_strtod_l+0x7e>
 8007022:	2c06      	cmp	r4, #6
 8007024:	d12b      	bne.n	800707e <_strtod_l+0xce>
 8007026:	3501      	adds	r5, #1
 8007028:	2300      	movs	r3, #0
 800702a:	951b      	str	r5, [sp, #108]	; 0x6c
 800702c:	930d      	str	r3, [sp, #52]	; 0x34
 800702e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 859a 	bne.w	8007b6a <_strtod_l+0xbba>
 8007036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007038:	b1e3      	cbz	r3, 8007074 <_strtod_l+0xc4>
 800703a:	4652      	mov	r2, sl
 800703c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007040:	ec43 2b10 	vmov	d0, r2, r3
 8007044:	b021      	add	sp, #132	; 0x84
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704a:	2a2b      	cmp	r2, #43	; 0x2b
 800704c:	d015      	beq.n	800707a <_strtod_l+0xca>
 800704e:	2a2d      	cmp	r2, #45	; 0x2d
 8007050:	d004      	beq.n	800705c <_strtod_l+0xac>
 8007052:	2a20      	cmp	r2, #32
 8007054:	d1ca      	bne.n	8006fec <_strtod_l+0x3c>
 8007056:	3301      	adds	r3, #1
 8007058:	931b      	str	r3, [sp, #108]	; 0x6c
 800705a:	e7bf      	b.n	8006fdc <_strtod_l+0x2c>
 800705c:	2201      	movs	r2, #1
 800705e:	920d      	str	r2, [sp, #52]	; 0x34
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	921b      	str	r2, [sp, #108]	; 0x6c
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1c2      	bne.n	8006ff0 <_strtod_l+0x40>
 800706a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800706c:	961b      	str	r6, [sp, #108]	; 0x6c
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 8579 	bne.w	8007b66 <_strtod_l+0xbb6>
 8007074:	4652      	mov	r2, sl
 8007076:	465b      	mov	r3, fp
 8007078:	e7e2      	b.n	8007040 <_strtod_l+0x90>
 800707a:	2200      	movs	r2, #0
 800707c:	e7ef      	b.n	800705e <_strtod_l+0xae>
 800707e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007080:	b13a      	cbz	r2, 8007092 <_strtod_l+0xe2>
 8007082:	2135      	movs	r1, #53	; 0x35
 8007084:	a81e      	add	r0, sp, #120	; 0x78
 8007086:	f002 fb83 	bl	8009790 <__copybits>
 800708a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800708c:	4648      	mov	r0, r9
 800708e:	f001 ffef 	bl	8009070 <_Bfree>
 8007092:	3c01      	subs	r4, #1
 8007094:	2c04      	cmp	r4, #4
 8007096:	d806      	bhi.n	80070a6 <_strtod_l+0xf6>
 8007098:	e8df f004 	tbb	[pc, r4]
 800709c:	1714030a 	.word	0x1714030a
 80070a0:	0a          	.byte	0x0a
 80070a1:	00          	.byte	0x00
 80070a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80070a6:	0730      	lsls	r0, r6, #28
 80070a8:	d5c1      	bpl.n	800702e <_strtod_l+0x7e>
 80070aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80070ae:	e7be      	b.n	800702e <_strtod_l+0x7e>
 80070b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80070b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80070c2:	e7f0      	b.n	80070a6 <_strtod_l+0xf6>
 80070c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007238 <_strtod_l+0x288>
 80070c8:	e7ed      	b.n	80070a6 <_strtod_l+0xf6>
 80070ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80070ce:	f04f 3aff 	mov.w	sl, #4294967295
 80070d2:	e7e8      	b.n	80070a6 <_strtod_l+0xf6>
 80070d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b30      	cmp	r3, #48	; 0x30
 80070de:	d0f9      	beq.n	80070d4 <_strtod_l+0x124>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0a4      	beq.n	800702e <_strtod_l+0x7e>
 80070e4:	2301      	movs	r3, #1
 80070e6:	2500      	movs	r5, #0
 80070e8:	9306      	str	r3, [sp, #24]
 80070ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070ec:	9308      	str	r3, [sp, #32]
 80070ee:	9507      	str	r5, [sp, #28]
 80070f0:	9505      	str	r5, [sp, #20]
 80070f2:	220a      	movs	r2, #10
 80070f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80070f6:	7807      	ldrb	r7, [r0, #0]
 80070f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80070fc:	b2d9      	uxtb	r1, r3
 80070fe:	2909      	cmp	r1, #9
 8007100:	d929      	bls.n	8007156 <_strtod_l+0x1a6>
 8007102:	4622      	mov	r2, r4
 8007104:	f8d8 1000 	ldr.w	r1, [r8]
 8007108:	f002 fd96 	bl	8009c38 <strncmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	d031      	beq.n	8007174 <_strtod_l+0x1c4>
 8007110:	2000      	movs	r0, #0
 8007112:	9c05      	ldr	r4, [sp, #20]
 8007114:	9004      	str	r0, [sp, #16]
 8007116:	463b      	mov	r3, r7
 8007118:	4602      	mov	r2, r0
 800711a:	2b65      	cmp	r3, #101	; 0x65
 800711c:	d001      	beq.n	8007122 <_strtod_l+0x172>
 800711e:	2b45      	cmp	r3, #69	; 0x45
 8007120:	d114      	bne.n	800714c <_strtod_l+0x19c>
 8007122:	b924      	cbnz	r4, 800712e <_strtod_l+0x17e>
 8007124:	b910      	cbnz	r0, 800712c <_strtod_l+0x17c>
 8007126:	9b06      	ldr	r3, [sp, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d09e      	beq.n	800706a <_strtod_l+0xba>
 800712c:	2400      	movs	r4, #0
 800712e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007130:	1c73      	adds	r3, r6, #1
 8007132:	931b      	str	r3, [sp, #108]	; 0x6c
 8007134:	7873      	ldrb	r3, [r6, #1]
 8007136:	2b2b      	cmp	r3, #43	; 0x2b
 8007138:	d078      	beq.n	800722c <_strtod_l+0x27c>
 800713a:	2b2d      	cmp	r3, #45	; 0x2d
 800713c:	d070      	beq.n	8007220 <_strtod_l+0x270>
 800713e:	f04f 0c00 	mov.w	ip, #0
 8007142:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007146:	2f09      	cmp	r7, #9
 8007148:	d97c      	bls.n	8007244 <_strtod_l+0x294>
 800714a:	961b      	str	r6, [sp, #108]	; 0x6c
 800714c:	f04f 0e00 	mov.w	lr, #0
 8007150:	e09a      	b.n	8007288 <_strtod_l+0x2d8>
 8007152:	2300      	movs	r3, #0
 8007154:	e7c7      	b.n	80070e6 <_strtod_l+0x136>
 8007156:	9905      	ldr	r1, [sp, #20]
 8007158:	2908      	cmp	r1, #8
 800715a:	bfdd      	ittte	le
 800715c:	9907      	ldrle	r1, [sp, #28]
 800715e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007162:	9307      	strle	r3, [sp, #28]
 8007164:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007168:	9b05      	ldr	r3, [sp, #20]
 800716a:	3001      	adds	r0, #1
 800716c:	3301      	adds	r3, #1
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	901b      	str	r0, [sp, #108]	; 0x6c
 8007172:	e7bf      	b.n	80070f4 <_strtod_l+0x144>
 8007174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007176:	191a      	adds	r2, r3, r4
 8007178:	921b      	str	r2, [sp, #108]	; 0x6c
 800717a:	9a05      	ldr	r2, [sp, #20]
 800717c:	5d1b      	ldrb	r3, [r3, r4]
 800717e:	2a00      	cmp	r2, #0
 8007180:	d037      	beq.n	80071f2 <_strtod_l+0x242>
 8007182:	9c05      	ldr	r4, [sp, #20]
 8007184:	4602      	mov	r2, r0
 8007186:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800718a:	2909      	cmp	r1, #9
 800718c:	d913      	bls.n	80071b6 <_strtod_l+0x206>
 800718e:	2101      	movs	r1, #1
 8007190:	9104      	str	r1, [sp, #16]
 8007192:	e7c2      	b.n	800711a <_strtod_l+0x16a>
 8007194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	921b      	str	r2, [sp, #108]	; 0x6c
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	3001      	adds	r0, #1
 800719e:	2b30      	cmp	r3, #48	; 0x30
 80071a0:	d0f8      	beq.n	8007194 <_strtod_l+0x1e4>
 80071a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80071a6:	2a08      	cmp	r2, #8
 80071a8:	f200 84e4 	bhi.w	8007b74 <_strtod_l+0xbc4>
 80071ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071ae:	9208      	str	r2, [sp, #32]
 80071b0:	4602      	mov	r2, r0
 80071b2:	2000      	movs	r0, #0
 80071b4:	4604      	mov	r4, r0
 80071b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80071ba:	f100 0101 	add.w	r1, r0, #1
 80071be:	d012      	beq.n	80071e6 <_strtod_l+0x236>
 80071c0:	440a      	add	r2, r1
 80071c2:	eb00 0c04 	add.w	ip, r0, r4
 80071c6:	4621      	mov	r1, r4
 80071c8:	270a      	movs	r7, #10
 80071ca:	458c      	cmp	ip, r1
 80071cc:	d113      	bne.n	80071f6 <_strtod_l+0x246>
 80071ce:	1821      	adds	r1, r4, r0
 80071d0:	2908      	cmp	r1, #8
 80071d2:	f104 0401 	add.w	r4, r4, #1
 80071d6:	4404      	add	r4, r0
 80071d8:	dc19      	bgt.n	800720e <_strtod_l+0x25e>
 80071da:	9b07      	ldr	r3, [sp, #28]
 80071dc:	210a      	movs	r1, #10
 80071de:	fb01 e303 	mla	r3, r1, r3, lr
 80071e2:	9307      	str	r3, [sp, #28]
 80071e4:	2100      	movs	r1, #0
 80071e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071e8:	1c58      	adds	r0, r3, #1
 80071ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	4608      	mov	r0, r1
 80071f0:	e7c9      	b.n	8007186 <_strtod_l+0x1d6>
 80071f2:	9805      	ldr	r0, [sp, #20]
 80071f4:	e7d3      	b.n	800719e <_strtod_l+0x1ee>
 80071f6:	2908      	cmp	r1, #8
 80071f8:	f101 0101 	add.w	r1, r1, #1
 80071fc:	dc03      	bgt.n	8007206 <_strtod_l+0x256>
 80071fe:	9b07      	ldr	r3, [sp, #28]
 8007200:	437b      	muls	r3, r7
 8007202:	9307      	str	r3, [sp, #28]
 8007204:	e7e1      	b.n	80071ca <_strtod_l+0x21a>
 8007206:	2910      	cmp	r1, #16
 8007208:	bfd8      	it	le
 800720a:	437d      	mulle	r5, r7
 800720c:	e7dd      	b.n	80071ca <_strtod_l+0x21a>
 800720e:	2c10      	cmp	r4, #16
 8007210:	bfdc      	itt	le
 8007212:	210a      	movle	r1, #10
 8007214:	fb01 e505 	mlale	r5, r1, r5, lr
 8007218:	e7e4      	b.n	80071e4 <_strtod_l+0x234>
 800721a:	2301      	movs	r3, #1
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	e781      	b.n	8007124 <_strtod_l+0x174>
 8007220:	f04f 0c01 	mov.w	ip, #1
 8007224:	1cb3      	adds	r3, r6, #2
 8007226:	931b      	str	r3, [sp, #108]	; 0x6c
 8007228:	78b3      	ldrb	r3, [r6, #2]
 800722a:	e78a      	b.n	8007142 <_strtod_l+0x192>
 800722c:	f04f 0c00 	mov.w	ip, #0
 8007230:	e7f8      	b.n	8007224 <_strtod_l+0x274>
 8007232:	bf00      	nop
 8007234:	0800add4 	.word	0x0800add4
 8007238:	7ff00000 	.word	0x7ff00000
 800723c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800723e:	1c5f      	adds	r7, r3, #1
 8007240:	971b      	str	r7, [sp, #108]	; 0x6c
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b30      	cmp	r3, #48	; 0x30
 8007246:	d0f9      	beq.n	800723c <_strtod_l+0x28c>
 8007248:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800724c:	2f08      	cmp	r7, #8
 800724e:	f63f af7d 	bhi.w	800714c <_strtod_l+0x19c>
 8007252:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007256:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007258:	930a      	str	r3, [sp, #40]	; 0x28
 800725a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800725c:	1c5f      	adds	r7, r3, #1
 800725e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007266:	f1b8 0f09 	cmp.w	r8, #9
 800726a:	d937      	bls.n	80072dc <_strtod_l+0x32c>
 800726c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800726e:	1a7f      	subs	r7, r7, r1
 8007270:	2f08      	cmp	r7, #8
 8007272:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007276:	dc37      	bgt.n	80072e8 <_strtod_l+0x338>
 8007278:	45be      	cmp	lr, r7
 800727a:	bfa8      	it	ge
 800727c:	46be      	movge	lr, r7
 800727e:	f1bc 0f00 	cmp.w	ip, #0
 8007282:	d001      	beq.n	8007288 <_strtod_l+0x2d8>
 8007284:	f1ce 0e00 	rsb	lr, lr, #0
 8007288:	2c00      	cmp	r4, #0
 800728a:	d151      	bne.n	8007330 <_strtod_l+0x380>
 800728c:	2800      	cmp	r0, #0
 800728e:	f47f aece 	bne.w	800702e <_strtod_l+0x7e>
 8007292:	9a06      	ldr	r2, [sp, #24]
 8007294:	2a00      	cmp	r2, #0
 8007296:	f47f aeca 	bne.w	800702e <_strtod_l+0x7e>
 800729a:	9a04      	ldr	r2, [sp, #16]
 800729c:	2a00      	cmp	r2, #0
 800729e:	f47f aee4 	bne.w	800706a <_strtod_l+0xba>
 80072a2:	2b4e      	cmp	r3, #78	; 0x4e
 80072a4:	d027      	beq.n	80072f6 <_strtod_l+0x346>
 80072a6:	dc21      	bgt.n	80072ec <_strtod_l+0x33c>
 80072a8:	2b49      	cmp	r3, #73	; 0x49
 80072aa:	f47f aede 	bne.w	800706a <_strtod_l+0xba>
 80072ae:	49a0      	ldr	r1, [pc, #640]	; (8007530 <_strtod_l+0x580>)
 80072b0:	a81b      	add	r0, sp, #108	; 0x6c
 80072b2:	f001 fdd7 	bl	8008e64 <__match>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f43f aed7 	beq.w	800706a <_strtod_l+0xba>
 80072bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072be:	499d      	ldr	r1, [pc, #628]	; (8007534 <_strtod_l+0x584>)
 80072c0:	3b01      	subs	r3, #1
 80072c2:	a81b      	add	r0, sp, #108	; 0x6c
 80072c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80072c6:	f001 fdcd 	bl	8008e64 <__match>
 80072ca:	b910      	cbnz	r0, 80072d2 <_strtod_l+0x322>
 80072cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072ce:	3301      	adds	r3, #1
 80072d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80072d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007548 <_strtod_l+0x598>
 80072d6:	f04f 0a00 	mov.w	sl, #0
 80072da:	e6a8      	b.n	800702e <_strtod_l+0x7e>
 80072dc:	210a      	movs	r1, #10
 80072de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80072e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80072e6:	e7b8      	b.n	800725a <_strtod_l+0x2aa>
 80072e8:	46be      	mov	lr, r7
 80072ea:	e7c8      	b.n	800727e <_strtod_l+0x2ce>
 80072ec:	2b69      	cmp	r3, #105	; 0x69
 80072ee:	d0de      	beq.n	80072ae <_strtod_l+0x2fe>
 80072f0:	2b6e      	cmp	r3, #110	; 0x6e
 80072f2:	f47f aeba 	bne.w	800706a <_strtod_l+0xba>
 80072f6:	4990      	ldr	r1, [pc, #576]	; (8007538 <_strtod_l+0x588>)
 80072f8:	a81b      	add	r0, sp, #108	; 0x6c
 80072fa:	f001 fdb3 	bl	8008e64 <__match>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f aeb3 	beq.w	800706a <_strtod_l+0xba>
 8007304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b28      	cmp	r3, #40	; 0x28
 800730a:	d10e      	bne.n	800732a <_strtod_l+0x37a>
 800730c:	aa1e      	add	r2, sp, #120	; 0x78
 800730e:	498b      	ldr	r1, [pc, #556]	; (800753c <_strtod_l+0x58c>)
 8007310:	a81b      	add	r0, sp, #108	; 0x6c
 8007312:	f001 fdbb 	bl	8008e8c <__hexnan>
 8007316:	2805      	cmp	r0, #5
 8007318:	d107      	bne.n	800732a <_strtod_l+0x37a>
 800731a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800731c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007320:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007324:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007328:	e681      	b.n	800702e <_strtod_l+0x7e>
 800732a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007550 <_strtod_l+0x5a0>
 800732e:	e7d2      	b.n	80072d6 <_strtod_l+0x326>
 8007330:	ebae 0302 	sub.w	r3, lr, r2
 8007334:	9306      	str	r3, [sp, #24]
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	9807      	ldr	r0, [sp, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf08      	it	eq
 800733e:	4623      	moveq	r3, r4
 8007340:	2c10      	cmp	r4, #16
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	46a0      	mov	r8, r4
 8007346:	bfa8      	it	ge
 8007348:	f04f 0810 	movge.w	r8, #16
 800734c:	f7f9 f8e2 	bl	8000514 <__aeabi_ui2d>
 8007350:	2c09      	cmp	r4, #9
 8007352:	4682      	mov	sl, r0
 8007354:	468b      	mov	fp, r1
 8007356:	dc13      	bgt.n	8007380 <_strtod_l+0x3d0>
 8007358:	9b06      	ldr	r3, [sp, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f43f ae67 	beq.w	800702e <_strtod_l+0x7e>
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	dd7a      	ble.n	800745a <_strtod_l+0x4aa>
 8007364:	2b16      	cmp	r3, #22
 8007366:	dc61      	bgt.n	800742c <_strtod_l+0x47c>
 8007368:	4a75      	ldr	r2, [pc, #468]	; (8007540 <_strtod_l+0x590>)
 800736a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800736e:	e9de 0100 	ldrd	r0, r1, [lr]
 8007372:	4652      	mov	r2, sl
 8007374:	465b      	mov	r3, fp
 8007376:	f7f9 f947 	bl	8000608 <__aeabi_dmul>
 800737a:	4682      	mov	sl, r0
 800737c:	468b      	mov	fp, r1
 800737e:	e656      	b.n	800702e <_strtod_l+0x7e>
 8007380:	4b6f      	ldr	r3, [pc, #444]	; (8007540 <_strtod_l+0x590>)
 8007382:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007386:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800738a:	f7f9 f93d 	bl	8000608 <__aeabi_dmul>
 800738e:	4606      	mov	r6, r0
 8007390:	4628      	mov	r0, r5
 8007392:	460f      	mov	r7, r1
 8007394:	f7f9 f8be 	bl	8000514 <__aeabi_ui2d>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f8 ff7c 	bl	800029c <__adddf3>
 80073a4:	2c0f      	cmp	r4, #15
 80073a6:	4682      	mov	sl, r0
 80073a8:	468b      	mov	fp, r1
 80073aa:	ddd5      	ble.n	8007358 <_strtod_l+0x3a8>
 80073ac:	9b06      	ldr	r3, [sp, #24]
 80073ae:	eba4 0808 	sub.w	r8, r4, r8
 80073b2:	4498      	add	r8, r3
 80073b4:	f1b8 0f00 	cmp.w	r8, #0
 80073b8:	f340 8096 	ble.w	80074e8 <_strtod_l+0x538>
 80073bc:	f018 030f 	ands.w	r3, r8, #15
 80073c0:	d00a      	beq.n	80073d8 <_strtod_l+0x428>
 80073c2:	495f      	ldr	r1, [pc, #380]	; (8007540 <_strtod_l+0x590>)
 80073c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073c8:	4652      	mov	r2, sl
 80073ca:	465b      	mov	r3, fp
 80073cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073d0:	f7f9 f91a 	bl	8000608 <__aeabi_dmul>
 80073d4:	4682      	mov	sl, r0
 80073d6:	468b      	mov	fp, r1
 80073d8:	f038 080f 	bics.w	r8, r8, #15
 80073dc:	d073      	beq.n	80074c6 <_strtod_l+0x516>
 80073de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80073e2:	dd47      	ble.n	8007474 <_strtod_l+0x4c4>
 80073e4:	2400      	movs	r4, #0
 80073e6:	46a0      	mov	r8, r4
 80073e8:	9407      	str	r4, [sp, #28]
 80073ea:	9405      	str	r4, [sp, #20]
 80073ec:	2322      	movs	r3, #34	; 0x22
 80073ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007548 <_strtod_l+0x598>
 80073f2:	f8c9 3000 	str.w	r3, [r9]
 80073f6:	f04f 0a00 	mov.w	sl, #0
 80073fa:	9b07      	ldr	r3, [sp, #28]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f43f ae16 	beq.w	800702e <_strtod_l+0x7e>
 8007402:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007404:	4648      	mov	r0, r9
 8007406:	f001 fe33 	bl	8009070 <_Bfree>
 800740a:	9905      	ldr	r1, [sp, #20]
 800740c:	4648      	mov	r0, r9
 800740e:	f001 fe2f 	bl	8009070 <_Bfree>
 8007412:	4641      	mov	r1, r8
 8007414:	4648      	mov	r0, r9
 8007416:	f001 fe2b 	bl	8009070 <_Bfree>
 800741a:	9907      	ldr	r1, [sp, #28]
 800741c:	4648      	mov	r0, r9
 800741e:	f001 fe27 	bl	8009070 <_Bfree>
 8007422:	4621      	mov	r1, r4
 8007424:	4648      	mov	r0, r9
 8007426:	f001 fe23 	bl	8009070 <_Bfree>
 800742a:	e600      	b.n	800702e <_strtod_l+0x7e>
 800742c:	9a06      	ldr	r2, [sp, #24]
 800742e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007432:	4293      	cmp	r3, r2
 8007434:	dbba      	blt.n	80073ac <_strtod_l+0x3fc>
 8007436:	4d42      	ldr	r5, [pc, #264]	; (8007540 <_strtod_l+0x590>)
 8007438:	f1c4 040f 	rsb	r4, r4, #15
 800743c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007440:	4652      	mov	r2, sl
 8007442:	465b      	mov	r3, fp
 8007444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007448:	f7f9 f8de 	bl	8000608 <__aeabi_dmul>
 800744c:	9b06      	ldr	r3, [sp, #24]
 800744e:	1b1c      	subs	r4, r3, r4
 8007450:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007454:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007458:	e78d      	b.n	8007376 <_strtod_l+0x3c6>
 800745a:	f113 0f16 	cmn.w	r3, #22
 800745e:	dba5      	blt.n	80073ac <_strtod_l+0x3fc>
 8007460:	4a37      	ldr	r2, [pc, #220]	; (8007540 <_strtod_l+0x590>)
 8007462:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007466:	e9d2 2300 	ldrd	r2, r3, [r2]
 800746a:	4650      	mov	r0, sl
 800746c:	4659      	mov	r1, fp
 800746e:	f7f9 f9f5 	bl	800085c <__aeabi_ddiv>
 8007472:	e782      	b.n	800737a <_strtod_l+0x3ca>
 8007474:	2300      	movs	r3, #0
 8007476:	4e33      	ldr	r6, [pc, #204]	; (8007544 <_strtod_l+0x594>)
 8007478:	ea4f 1828 	mov.w	r8, r8, asr #4
 800747c:	4650      	mov	r0, sl
 800747e:	4659      	mov	r1, fp
 8007480:	461d      	mov	r5, r3
 8007482:	f1b8 0f01 	cmp.w	r8, #1
 8007486:	dc21      	bgt.n	80074cc <_strtod_l+0x51c>
 8007488:	b10b      	cbz	r3, 800748e <_strtod_l+0x4de>
 800748a:	4682      	mov	sl, r0
 800748c:	468b      	mov	fp, r1
 800748e:	4b2d      	ldr	r3, [pc, #180]	; (8007544 <_strtod_l+0x594>)
 8007490:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007494:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007498:	4652      	mov	r2, sl
 800749a:	465b      	mov	r3, fp
 800749c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80074a0:	f7f9 f8b2 	bl	8000608 <__aeabi_dmul>
 80074a4:	4b28      	ldr	r3, [pc, #160]	; (8007548 <_strtod_l+0x598>)
 80074a6:	460a      	mov	r2, r1
 80074a8:	400b      	ands	r3, r1
 80074aa:	4928      	ldr	r1, [pc, #160]	; (800754c <_strtod_l+0x59c>)
 80074ac:	428b      	cmp	r3, r1
 80074ae:	4682      	mov	sl, r0
 80074b0:	d898      	bhi.n	80073e4 <_strtod_l+0x434>
 80074b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074b6:	428b      	cmp	r3, r1
 80074b8:	bf86      	itte	hi
 80074ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007554 <_strtod_l+0x5a4>
 80074be:	f04f 3aff 	movhi.w	sl, #4294967295
 80074c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80074c6:	2300      	movs	r3, #0
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	e077      	b.n	80075bc <_strtod_l+0x60c>
 80074cc:	f018 0f01 	tst.w	r8, #1
 80074d0:	d006      	beq.n	80074e0 <_strtod_l+0x530>
 80074d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80074d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074da:	f7f9 f895 	bl	8000608 <__aeabi_dmul>
 80074de:	2301      	movs	r3, #1
 80074e0:	3501      	adds	r5, #1
 80074e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074e6:	e7cc      	b.n	8007482 <_strtod_l+0x4d2>
 80074e8:	d0ed      	beq.n	80074c6 <_strtod_l+0x516>
 80074ea:	f1c8 0800 	rsb	r8, r8, #0
 80074ee:	f018 020f 	ands.w	r2, r8, #15
 80074f2:	d00a      	beq.n	800750a <_strtod_l+0x55a>
 80074f4:	4b12      	ldr	r3, [pc, #72]	; (8007540 <_strtod_l+0x590>)
 80074f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074fa:	4650      	mov	r0, sl
 80074fc:	4659      	mov	r1, fp
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f9 f9ab 	bl	800085c <__aeabi_ddiv>
 8007506:	4682      	mov	sl, r0
 8007508:	468b      	mov	fp, r1
 800750a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800750e:	d0da      	beq.n	80074c6 <_strtod_l+0x516>
 8007510:	f1b8 0f1f 	cmp.w	r8, #31
 8007514:	dd20      	ble.n	8007558 <_strtod_l+0x5a8>
 8007516:	2400      	movs	r4, #0
 8007518:	46a0      	mov	r8, r4
 800751a:	9407      	str	r4, [sp, #28]
 800751c:	9405      	str	r4, [sp, #20]
 800751e:	2322      	movs	r3, #34	; 0x22
 8007520:	f04f 0a00 	mov.w	sl, #0
 8007524:	f04f 0b00 	mov.w	fp, #0
 8007528:	f8c9 3000 	str.w	r3, [r9]
 800752c:	e765      	b.n	80073fa <_strtod_l+0x44a>
 800752e:	bf00      	nop
 8007530:	0800ad9d 	.word	0x0800ad9d
 8007534:	0800ae2b 	.word	0x0800ae2b
 8007538:	0800ada5 	.word	0x0800ada5
 800753c:	0800ade8 	.word	0x0800ade8
 8007540:	0800ae68 	.word	0x0800ae68
 8007544:	0800ae40 	.word	0x0800ae40
 8007548:	7ff00000 	.word	0x7ff00000
 800754c:	7ca00000 	.word	0x7ca00000
 8007550:	fff80000 	.word	0xfff80000
 8007554:	7fefffff 	.word	0x7fefffff
 8007558:	f018 0310 	ands.w	r3, r8, #16
 800755c:	bf18      	it	ne
 800755e:	236a      	movne	r3, #106	; 0x6a
 8007560:	4da0      	ldr	r5, [pc, #640]	; (80077e4 <_strtod_l+0x834>)
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	4650      	mov	r0, sl
 8007566:	4659      	mov	r1, fp
 8007568:	2300      	movs	r3, #0
 800756a:	f1b8 0f00 	cmp.w	r8, #0
 800756e:	f300 810a 	bgt.w	8007786 <_strtod_l+0x7d6>
 8007572:	b10b      	cbz	r3, 8007578 <_strtod_l+0x5c8>
 8007574:	4682      	mov	sl, r0
 8007576:	468b      	mov	fp, r1
 8007578:	9b04      	ldr	r3, [sp, #16]
 800757a:	b1bb      	cbz	r3, 80075ac <_strtod_l+0x5fc>
 800757c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007580:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007584:	2b00      	cmp	r3, #0
 8007586:	4659      	mov	r1, fp
 8007588:	dd10      	ble.n	80075ac <_strtod_l+0x5fc>
 800758a:	2b1f      	cmp	r3, #31
 800758c:	f340 8107 	ble.w	800779e <_strtod_l+0x7ee>
 8007590:	2b34      	cmp	r3, #52	; 0x34
 8007592:	bfde      	ittt	le
 8007594:	3b20      	suble	r3, #32
 8007596:	f04f 32ff 	movle.w	r2, #4294967295
 800759a:	fa02 f303 	lslle.w	r3, r2, r3
 800759e:	f04f 0a00 	mov.w	sl, #0
 80075a2:	bfcc      	ite	gt
 80075a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80075a8:	ea03 0b01 	andle.w	fp, r3, r1
 80075ac:	2200      	movs	r2, #0
 80075ae:	2300      	movs	r3, #0
 80075b0:	4650      	mov	r0, sl
 80075b2:	4659      	mov	r1, fp
 80075b4:	f7f9 fa90 	bl	8000ad8 <__aeabi_dcmpeq>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d1ac      	bne.n	8007516 <_strtod_l+0x566>
 80075bc:	9b07      	ldr	r3, [sp, #28]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	9a05      	ldr	r2, [sp, #20]
 80075c2:	9908      	ldr	r1, [sp, #32]
 80075c4:	4623      	mov	r3, r4
 80075c6:	4648      	mov	r0, r9
 80075c8:	f001 fda4 	bl	8009114 <__s2b>
 80075cc:	9007      	str	r0, [sp, #28]
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f43f af08 	beq.w	80073e4 <_strtod_l+0x434>
 80075d4:	9a06      	ldr	r2, [sp, #24]
 80075d6:	9b06      	ldr	r3, [sp, #24]
 80075d8:	2a00      	cmp	r2, #0
 80075da:	f1c3 0300 	rsb	r3, r3, #0
 80075de:	bfa8      	it	ge
 80075e0:	2300      	movge	r3, #0
 80075e2:	930e      	str	r3, [sp, #56]	; 0x38
 80075e4:	2400      	movs	r4, #0
 80075e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80075ea:	9316      	str	r3, [sp, #88]	; 0x58
 80075ec:	46a0      	mov	r8, r4
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	4648      	mov	r0, r9
 80075f2:	6859      	ldr	r1, [r3, #4]
 80075f4:	f001 fd08 	bl	8009008 <_Balloc>
 80075f8:	9005      	str	r0, [sp, #20]
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f aef6 	beq.w	80073ec <_strtod_l+0x43c>
 8007600:	9b07      	ldr	r3, [sp, #28]
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	3202      	adds	r2, #2
 8007606:	f103 010c 	add.w	r1, r3, #12
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	300c      	adds	r0, #12
 800760e:	f7fe fe3b 	bl	8006288 <memcpy>
 8007612:	aa1e      	add	r2, sp, #120	; 0x78
 8007614:	a91d      	add	r1, sp, #116	; 0x74
 8007616:	ec4b ab10 	vmov	d0, sl, fp
 800761a:	4648      	mov	r0, r9
 800761c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007620:	f002 f834 	bl	800968c <__d2b>
 8007624:	901c      	str	r0, [sp, #112]	; 0x70
 8007626:	2800      	cmp	r0, #0
 8007628:	f43f aee0 	beq.w	80073ec <_strtod_l+0x43c>
 800762c:	2101      	movs	r1, #1
 800762e:	4648      	mov	r0, r9
 8007630:	f001 fdfc 	bl	800922c <__i2b>
 8007634:	4680      	mov	r8, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f aed8 	beq.w	80073ec <_strtod_l+0x43c>
 800763c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800763e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007640:	2e00      	cmp	r6, #0
 8007642:	bfab      	itete	ge
 8007644:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007646:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007648:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800764a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800764c:	bfac      	ite	ge
 800764e:	18f7      	addge	r7, r6, r3
 8007650:	1b9d      	sublt	r5, r3, r6
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	1af6      	subs	r6, r6, r3
 8007656:	4416      	add	r6, r2
 8007658:	4b63      	ldr	r3, [pc, #396]	; (80077e8 <_strtod_l+0x838>)
 800765a:	3e01      	subs	r6, #1
 800765c:	429e      	cmp	r6, r3
 800765e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007662:	f280 80af 	bge.w	80077c4 <_strtod_l+0x814>
 8007666:	1b9b      	subs	r3, r3, r6
 8007668:	2b1f      	cmp	r3, #31
 800766a:	eba2 0203 	sub.w	r2, r2, r3
 800766e:	f04f 0101 	mov.w	r1, #1
 8007672:	f300 809b 	bgt.w	80077ac <_strtod_l+0x7fc>
 8007676:	fa01 f303 	lsl.w	r3, r1, r3
 800767a:	930f      	str	r3, [sp, #60]	; 0x3c
 800767c:	2300      	movs	r3, #0
 800767e:	930a      	str	r3, [sp, #40]	; 0x28
 8007680:	18be      	adds	r6, r7, r2
 8007682:	9b04      	ldr	r3, [sp, #16]
 8007684:	42b7      	cmp	r7, r6
 8007686:	4415      	add	r5, r2
 8007688:	441d      	add	r5, r3
 800768a:	463b      	mov	r3, r7
 800768c:	bfa8      	it	ge
 800768e:	4633      	movge	r3, r6
 8007690:	42ab      	cmp	r3, r5
 8007692:	bfa8      	it	ge
 8007694:	462b      	movge	r3, r5
 8007696:	2b00      	cmp	r3, #0
 8007698:	bfc2      	ittt	gt
 800769a:	1af6      	subgt	r6, r6, r3
 800769c:	1aed      	subgt	r5, r5, r3
 800769e:	1aff      	subgt	r7, r7, r3
 80076a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076a2:	b1bb      	cbz	r3, 80076d4 <_strtod_l+0x724>
 80076a4:	4641      	mov	r1, r8
 80076a6:	461a      	mov	r2, r3
 80076a8:	4648      	mov	r0, r9
 80076aa:	f001 fe5f 	bl	800936c <__pow5mult>
 80076ae:	4680      	mov	r8, r0
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f43f ae9b 	beq.w	80073ec <_strtod_l+0x43c>
 80076b6:	4601      	mov	r1, r0
 80076b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076ba:	4648      	mov	r0, r9
 80076bc:	f001 fdbf 	bl	800923e <__multiply>
 80076c0:	900c      	str	r0, [sp, #48]	; 0x30
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f43f ae92 	beq.w	80073ec <_strtod_l+0x43c>
 80076c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076ca:	4648      	mov	r0, r9
 80076cc:	f001 fcd0 	bl	8009070 <_Bfree>
 80076d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076d2:	931c      	str	r3, [sp, #112]	; 0x70
 80076d4:	2e00      	cmp	r6, #0
 80076d6:	dc7a      	bgt.n	80077ce <_strtod_l+0x81e>
 80076d8:	9b06      	ldr	r3, [sp, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dd08      	ble.n	80076f0 <_strtod_l+0x740>
 80076de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076e0:	9905      	ldr	r1, [sp, #20]
 80076e2:	4648      	mov	r0, r9
 80076e4:	f001 fe42 	bl	800936c <__pow5mult>
 80076e8:	9005      	str	r0, [sp, #20]
 80076ea:	2800      	cmp	r0, #0
 80076ec:	f43f ae7e 	beq.w	80073ec <_strtod_l+0x43c>
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	dd08      	ble.n	8007706 <_strtod_l+0x756>
 80076f4:	462a      	mov	r2, r5
 80076f6:	9905      	ldr	r1, [sp, #20]
 80076f8:	4648      	mov	r0, r9
 80076fa:	f001 fe85 	bl	8009408 <__lshift>
 80076fe:	9005      	str	r0, [sp, #20]
 8007700:	2800      	cmp	r0, #0
 8007702:	f43f ae73 	beq.w	80073ec <_strtod_l+0x43c>
 8007706:	2f00      	cmp	r7, #0
 8007708:	dd08      	ble.n	800771c <_strtod_l+0x76c>
 800770a:	4641      	mov	r1, r8
 800770c:	463a      	mov	r2, r7
 800770e:	4648      	mov	r0, r9
 8007710:	f001 fe7a 	bl	8009408 <__lshift>
 8007714:	4680      	mov	r8, r0
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f ae68 	beq.w	80073ec <_strtod_l+0x43c>
 800771c:	9a05      	ldr	r2, [sp, #20]
 800771e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007720:	4648      	mov	r0, r9
 8007722:	f001 fedf 	bl	80094e4 <__mdiff>
 8007726:	4604      	mov	r4, r0
 8007728:	2800      	cmp	r0, #0
 800772a:	f43f ae5f 	beq.w	80073ec <_strtod_l+0x43c>
 800772e:	68c3      	ldr	r3, [r0, #12]
 8007730:	930c      	str	r3, [sp, #48]	; 0x30
 8007732:	2300      	movs	r3, #0
 8007734:	60c3      	str	r3, [r0, #12]
 8007736:	4641      	mov	r1, r8
 8007738:	f001 feba 	bl	80094b0 <__mcmp>
 800773c:	2800      	cmp	r0, #0
 800773e:	da55      	bge.n	80077ec <_strtod_l+0x83c>
 8007740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007742:	b9e3      	cbnz	r3, 800777e <_strtod_l+0x7ce>
 8007744:	f1ba 0f00 	cmp.w	sl, #0
 8007748:	d119      	bne.n	800777e <_strtod_l+0x7ce>
 800774a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800774e:	b9b3      	cbnz	r3, 800777e <_strtod_l+0x7ce>
 8007750:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007754:	0d1b      	lsrs	r3, r3, #20
 8007756:	051b      	lsls	r3, r3, #20
 8007758:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800775c:	d90f      	bls.n	800777e <_strtod_l+0x7ce>
 800775e:	6963      	ldr	r3, [r4, #20]
 8007760:	b913      	cbnz	r3, 8007768 <_strtod_l+0x7b8>
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	2b01      	cmp	r3, #1
 8007766:	dd0a      	ble.n	800777e <_strtod_l+0x7ce>
 8007768:	4621      	mov	r1, r4
 800776a:	2201      	movs	r2, #1
 800776c:	4648      	mov	r0, r9
 800776e:	f001 fe4b 	bl	8009408 <__lshift>
 8007772:	4641      	mov	r1, r8
 8007774:	4604      	mov	r4, r0
 8007776:	f001 fe9b 	bl	80094b0 <__mcmp>
 800777a:	2800      	cmp	r0, #0
 800777c:	dc67      	bgt.n	800784e <_strtod_l+0x89e>
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d171      	bne.n	8007868 <_strtod_l+0x8b8>
 8007784:	e63d      	b.n	8007402 <_strtod_l+0x452>
 8007786:	f018 0f01 	tst.w	r8, #1
 800778a:	d004      	beq.n	8007796 <_strtod_l+0x7e6>
 800778c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007790:	f7f8 ff3a 	bl	8000608 <__aeabi_dmul>
 8007794:	2301      	movs	r3, #1
 8007796:	ea4f 0868 	mov.w	r8, r8, asr #1
 800779a:	3508      	adds	r5, #8
 800779c:	e6e5      	b.n	800756a <_strtod_l+0x5ba>
 800779e:	f04f 32ff 	mov.w	r2, #4294967295
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	ea03 0a0a 	and.w	sl, r3, sl
 80077aa:	e6ff      	b.n	80075ac <_strtod_l+0x5fc>
 80077ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80077b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80077b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80077b8:	36e2      	adds	r6, #226	; 0xe2
 80077ba:	fa01 f306 	lsl.w	r3, r1, r6
 80077be:	930a      	str	r3, [sp, #40]	; 0x28
 80077c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80077c2:	e75d      	b.n	8007680 <_strtod_l+0x6d0>
 80077c4:	2300      	movs	r3, #0
 80077c6:	930a      	str	r3, [sp, #40]	; 0x28
 80077c8:	2301      	movs	r3, #1
 80077ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80077cc:	e758      	b.n	8007680 <_strtod_l+0x6d0>
 80077ce:	4632      	mov	r2, r6
 80077d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077d2:	4648      	mov	r0, r9
 80077d4:	f001 fe18 	bl	8009408 <__lshift>
 80077d8:	901c      	str	r0, [sp, #112]	; 0x70
 80077da:	2800      	cmp	r0, #0
 80077dc:	f47f af7c 	bne.w	80076d8 <_strtod_l+0x728>
 80077e0:	e604      	b.n	80073ec <_strtod_l+0x43c>
 80077e2:	bf00      	nop
 80077e4:	0800ae00 	.word	0x0800ae00
 80077e8:	fffffc02 	.word	0xfffffc02
 80077ec:	465d      	mov	r5, fp
 80077ee:	f040 8086 	bne.w	80078fe <_strtod_l+0x94e>
 80077f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077f8:	b32a      	cbz	r2, 8007846 <_strtod_l+0x896>
 80077fa:	4aaf      	ldr	r2, [pc, #700]	; (8007ab8 <_strtod_l+0xb08>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d153      	bne.n	80078a8 <_strtod_l+0x8f8>
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	4650      	mov	r0, sl
 8007804:	b1d3      	cbz	r3, 800783c <_strtod_l+0x88c>
 8007806:	4aad      	ldr	r2, [pc, #692]	; (8007abc <_strtod_l+0xb0c>)
 8007808:	402a      	ands	r2, r5
 800780a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800780e:	f04f 31ff 	mov.w	r1, #4294967295
 8007812:	d816      	bhi.n	8007842 <_strtod_l+0x892>
 8007814:	0d12      	lsrs	r2, r2, #20
 8007816:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	4298      	cmp	r0, r3
 8007820:	d142      	bne.n	80078a8 <_strtod_l+0x8f8>
 8007822:	4ba7      	ldr	r3, [pc, #668]	; (8007ac0 <_strtod_l+0xb10>)
 8007824:	429d      	cmp	r5, r3
 8007826:	d102      	bne.n	800782e <_strtod_l+0x87e>
 8007828:	3001      	adds	r0, #1
 800782a:	f43f addf 	beq.w	80073ec <_strtod_l+0x43c>
 800782e:	4ba3      	ldr	r3, [pc, #652]	; (8007abc <_strtod_l+0xb0c>)
 8007830:	402b      	ands	r3, r5
 8007832:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007836:	f04f 0a00 	mov.w	sl, #0
 800783a:	e7a0      	b.n	800777e <_strtod_l+0x7ce>
 800783c:	f04f 33ff 	mov.w	r3, #4294967295
 8007840:	e7ed      	b.n	800781e <_strtod_l+0x86e>
 8007842:	460b      	mov	r3, r1
 8007844:	e7eb      	b.n	800781e <_strtod_l+0x86e>
 8007846:	bb7b      	cbnz	r3, 80078a8 <_strtod_l+0x8f8>
 8007848:	f1ba 0f00 	cmp.w	sl, #0
 800784c:	d12c      	bne.n	80078a8 <_strtod_l+0x8f8>
 800784e:	9904      	ldr	r1, [sp, #16]
 8007850:	4a9a      	ldr	r2, [pc, #616]	; (8007abc <_strtod_l+0xb0c>)
 8007852:	465b      	mov	r3, fp
 8007854:	b1f1      	cbz	r1, 8007894 <_strtod_l+0x8e4>
 8007856:	ea02 010b 	and.w	r1, r2, fp
 800785a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800785e:	dc19      	bgt.n	8007894 <_strtod_l+0x8e4>
 8007860:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007864:	f77f ae5b 	ble.w	800751e <_strtod_l+0x56e>
 8007868:	4a96      	ldr	r2, [pc, #600]	; (8007ac4 <_strtod_l+0xb14>)
 800786a:	2300      	movs	r3, #0
 800786c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007870:	4650      	mov	r0, sl
 8007872:	4659      	mov	r1, fp
 8007874:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007878:	f7f8 fec6 	bl	8000608 <__aeabi_dmul>
 800787c:	4682      	mov	sl, r0
 800787e:	468b      	mov	fp, r1
 8007880:	2900      	cmp	r1, #0
 8007882:	f47f adbe 	bne.w	8007402 <_strtod_l+0x452>
 8007886:	2800      	cmp	r0, #0
 8007888:	f47f adbb 	bne.w	8007402 <_strtod_l+0x452>
 800788c:	2322      	movs	r3, #34	; 0x22
 800788e:	f8c9 3000 	str.w	r3, [r9]
 8007892:	e5b6      	b.n	8007402 <_strtod_l+0x452>
 8007894:	4013      	ands	r3, r2
 8007896:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800789a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800789e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80078a2:	f04f 3aff 	mov.w	sl, #4294967295
 80078a6:	e76a      	b.n	800777e <_strtod_l+0x7ce>
 80078a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078aa:	b193      	cbz	r3, 80078d2 <_strtod_l+0x922>
 80078ac:	422b      	tst	r3, r5
 80078ae:	f43f af66 	beq.w	800777e <_strtod_l+0x7ce>
 80078b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b4:	9a04      	ldr	r2, [sp, #16]
 80078b6:	4650      	mov	r0, sl
 80078b8:	4659      	mov	r1, fp
 80078ba:	b173      	cbz	r3, 80078da <_strtod_l+0x92a>
 80078bc:	f7ff fb5c 	bl	8006f78 <sulp>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078c8:	f7f8 fce8 	bl	800029c <__adddf3>
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	e755      	b.n	800777e <_strtod_l+0x7ce>
 80078d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d4:	ea13 0f0a 	tst.w	r3, sl
 80078d8:	e7e9      	b.n	80078ae <_strtod_l+0x8fe>
 80078da:	f7ff fb4d 	bl	8006f78 <sulp>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078e6:	f7f8 fcd7 	bl	8000298 <__aeabi_dsub>
 80078ea:	2200      	movs	r2, #0
 80078ec:	2300      	movs	r3, #0
 80078ee:	4682      	mov	sl, r0
 80078f0:	468b      	mov	fp, r1
 80078f2:	f7f9 f8f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f47f ae11 	bne.w	800751e <_strtod_l+0x56e>
 80078fc:	e73f      	b.n	800777e <_strtod_l+0x7ce>
 80078fe:	4641      	mov	r1, r8
 8007900:	4620      	mov	r0, r4
 8007902:	f001 ff12 	bl	800972a <__ratio>
 8007906:	ec57 6b10 	vmov	r6, r7, d0
 800790a:	2200      	movs	r2, #0
 800790c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007910:	ee10 0a10 	vmov	r0, s0
 8007914:	4639      	mov	r1, r7
 8007916:	f7f9 f8f3 	bl	8000b00 <__aeabi_dcmple>
 800791a:	2800      	cmp	r0, #0
 800791c:	d077      	beq.n	8007a0e <_strtod_l+0xa5e>
 800791e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007920:	2b00      	cmp	r3, #0
 8007922:	d04a      	beq.n	80079ba <_strtod_l+0xa0a>
 8007924:	4b68      	ldr	r3, [pc, #416]	; (8007ac8 <_strtod_l+0xb18>)
 8007926:	2200      	movs	r2, #0
 8007928:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800792c:	4f66      	ldr	r7, [pc, #408]	; (8007ac8 <_strtod_l+0xb18>)
 800792e:	2600      	movs	r6, #0
 8007930:	4b62      	ldr	r3, [pc, #392]	; (8007abc <_strtod_l+0xb0c>)
 8007932:	402b      	ands	r3, r5
 8007934:	930f      	str	r3, [sp, #60]	; 0x3c
 8007936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007938:	4b64      	ldr	r3, [pc, #400]	; (8007acc <_strtod_l+0xb1c>)
 800793a:	429a      	cmp	r2, r3
 800793c:	f040 80ce 	bne.w	8007adc <_strtod_l+0xb2c>
 8007940:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007948:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800794c:	ec4b ab10 	vmov	d0, sl, fp
 8007950:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007954:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007958:	f001 fe22 	bl	80095a0 <__ulp>
 800795c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007960:	ec53 2b10 	vmov	r2, r3, d0
 8007964:	f7f8 fe50 	bl	8000608 <__aeabi_dmul>
 8007968:	4652      	mov	r2, sl
 800796a:	465b      	mov	r3, fp
 800796c:	f7f8 fc96 	bl	800029c <__adddf3>
 8007970:	460b      	mov	r3, r1
 8007972:	4952      	ldr	r1, [pc, #328]	; (8007abc <_strtod_l+0xb0c>)
 8007974:	4a56      	ldr	r2, [pc, #344]	; (8007ad0 <_strtod_l+0xb20>)
 8007976:	4019      	ands	r1, r3
 8007978:	4291      	cmp	r1, r2
 800797a:	4682      	mov	sl, r0
 800797c:	d95b      	bls.n	8007a36 <_strtod_l+0xa86>
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007984:	4293      	cmp	r3, r2
 8007986:	d103      	bne.n	8007990 <_strtod_l+0x9e0>
 8007988:	9b08      	ldr	r3, [sp, #32]
 800798a:	3301      	adds	r3, #1
 800798c:	f43f ad2e 	beq.w	80073ec <_strtod_l+0x43c>
 8007990:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007ac0 <_strtod_l+0xb10>
 8007994:	f04f 3aff 	mov.w	sl, #4294967295
 8007998:	991c      	ldr	r1, [sp, #112]	; 0x70
 800799a:	4648      	mov	r0, r9
 800799c:	f001 fb68 	bl	8009070 <_Bfree>
 80079a0:	9905      	ldr	r1, [sp, #20]
 80079a2:	4648      	mov	r0, r9
 80079a4:	f001 fb64 	bl	8009070 <_Bfree>
 80079a8:	4641      	mov	r1, r8
 80079aa:	4648      	mov	r0, r9
 80079ac:	f001 fb60 	bl	8009070 <_Bfree>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4648      	mov	r0, r9
 80079b4:	f001 fb5c 	bl	8009070 <_Bfree>
 80079b8:	e619      	b.n	80075ee <_strtod_l+0x63e>
 80079ba:	f1ba 0f00 	cmp.w	sl, #0
 80079be:	d11a      	bne.n	80079f6 <_strtod_l+0xa46>
 80079c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079c4:	b9eb      	cbnz	r3, 8007a02 <_strtod_l+0xa52>
 80079c6:	2200      	movs	r2, #0
 80079c8:	4b3f      	ldr	r3, [pc, #252]	; (8007ac8 <_strtod_l+0xb18>)
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f9 f88d 	bl	8000aec <__aeabi_dcmplt>
 80079d2:	b9c8      	cbnz	r0, 8007a08 <_strtod_l+0xa58>
 80079d4:	4630      	mov	r0, r6
 80079d6:	4639      	mov	r1, r7
 80079d8:	2200      	movs	r2, #0
 80079da:	4b3e      	ldr	r3, [pc, #248]	; (8007ad4 <_strtod_l+0xb24>)
 80079dc:	f7f8 fe14 	bl	8000608 <__aeabi_dmul>
 80079e0:	4606      	mov	r6, r0
 80079e2:	460f      	mov	r7, r1
 80079e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80079e8:	9618      	str	r6, [sp, #96]	; 0x60
 80079ea:	9319      	str	r3, [sp, #100]	; 0x64
 80079ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80079f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80079f4:	e79c      	b.n	8007930 <_strtod_l+0x980>
 80079f6:	f1ba 0f01 	cmp.w	sl, #1
 80079fa:	d102      	bne.n	8007a02 <_strtod_l+0xa52>
 80079fc:	2d00      	cmp	r5, #0
 80079fe:	f43f ad8e 	beq.w	800751e <_strtod_l+0x56e>
 8007a02:	2200      	movs	r2, #0
 8007a04:	4b34      	ldr	r3, [pc, #208]	; (8007ad8 <_strtod_l+0xb28>)
 8007a06:	e78f      	b.n	8007928 <_strtod_l+0x978>
 8007a08:	2600      	movs	r6, #0
 8007a0a:	4f32      	ldr	r7, [pc, #200]	; (8007ad4 <_strtod_l+0xb24>)
 8007a0c:	e7ea      	b.n	80079e4 <_strtod_l+0xa34>
 8007a0e:	4b31      	ldr	r3, [pc, #196]	; (8007ad4 <_strtod_l+0xb24>)
 8007a10:	4630      	mov	r0, r6
 8007a12:	4639      	mov	r1, r7
 8007a14:	2200      	movs	r2, #0
 8007a16:	f7f8 fdf7 	bl	8000608 <__aeabi_dmul>
 8007a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	460f      	mov	r7, r1
 8007a20:	b933      	cbnz	r3, 8007a30 <_strtod_l+0xa80>
 8007a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a26:	9010      	str	r0, [sp, #64]	; 0x40
 8007a28:	9311      	str	r3, [sp, #68]	; 0x44
 8007a2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a2e:	e7df      	b.n	80079f0 <_strtod_l+0xa40>
 8007a30:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007a34:	e7f9      	b.n	8007a2a <_strtod_l+0xa7a>
 8007a36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007a3a:	9b04      	ldr	r3, [sp, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1ab      	bne.n	8007998 <_strtod_l+0x9e8>
 8007a40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a44:	0d1b      	lsrs	r3, r3, #20
 8007a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a48:	051b      	lsls	r3, r3, #20
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	465d      	mov	r5, fp
 8007a4e:	d1a3      	bne.n	8007998 <_strtod_l+0x9e8>
 8007a50:	4639      	mov	r1, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7f9 f888 	bl	8000b68 <__aeabi_d2iz>
 8007a58:	f7f8 fd6c 	bl	8000534 <__aeabi_i2d>
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4602      	mov	r2, r0
 8007a60:	4639      	mov	r1, r7
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7f8 fc18 	bl	8000298 <__aeabi_dsub>
 8007a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	b933      	cbnz	r3, 8007a7e <_strtod_l+0xace>
 8007a70:	f1ba 0f00 	cmp.w	sl, #0
 8007a74:	d103      	bne.n	8007a7e <_strtod_l+0xace>
 8007a76:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	d06d      	beq.n	8007b5a <_strtod_l+0xbaa>
 8007a7e:	a30a      	add	r3, pc, #40	; (adr r3, 8007aa8 <_strtod_l+0xaf8>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	f7f9 f830 	bl	8000aec <__aeabi_dcmplt>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f47f acb8 	bne.w	8007402 <_strtod_l+0x452>
 8007a92:	a307      	add	r3, pc, #28	; (adr r3, 8007ab0 <_strtod_l+0xb00>)
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f9 f844 	bl	8000b28 <__aeabi_dcmpgt>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f43f af79 	beq.w	8007998 <_strtod_l+0x9e8>
 8007aa6:	e4ac      	b.n	8007402 <_strtod_l+0x452>
 8007aa8:	94a03595 	.word	0x94a03595
 8007aac:	3fdfffff 	.word	0x3fdfffff
 8007ab0:	35afe535 	.word	0x35afe535
 8007ab4:	3fe00000 	.word	0x3fe00000
 8007ab8:	000fffff 	.word	0x000fffff
 8007abc:	7ff00000 	.word	0x7ff00000
 8007ac0:	7fefffff 	.word	0x7fefffff
 8007ac4:	39500000 	.word	0x39500000
 8007ac8:	3ff00000 	.word	0x3ff00000
 8007acc:	7fe00000 	.word	0x7fe00000
 8007ad0:	7c9fffff 	.word	0x7c9fffff
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	bff00000 	.word	0xbff00000
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	b333      	cbz	r3, 8007b2e <_strtod_l+0xb7e>
 8007ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ae2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ae6:	d822      	bhi.n	8007b2e <_strtod_l+0xb7e>
 8007ae8:	a327      	add	r3, pc, #156	; (adr r3, 8007b88 <_strtod_l+0xbd8>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f9 f805 	bl	8000b00 <__aeabi_dcmple>
 8007af6:	b1a0      	cbz	r0, 8007b22 <_strtod_l+0xb72>
 8007af8:	4639      	mov	r1, r7
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7f9 f85c 	bl	8000bb8 <__aeabi_d2uiz>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	bf08      	it	eq
 8007b04:	2001      	moveq	r0, #1
 8007b06:	f7f8 fd05 	bl	8000514 <__aeabi_ui2d>
 8007b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	460f      	mov	r7, r1
 8007b10:	bb03      	cbnz	r3, 8007b54 <_strtod_l+0xba4>
 8007b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b16:	9012      	str	r0, [sp, #72]	; 0x48
 8007b18:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007b1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b26:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b2a:	1a9b      	subs	r3, r3, r2
 8007b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b2e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007b32:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007b36:	f001 fd33 	bl	80095a0 <__ulp>
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	ec53 2b10 	vmov	r2, r3, d0
 8007b40:	4659      	mov	r1, fp
 8007b42:	f7f8 fd61 	bl	8000608 <__aeabi_dmul>
 8007b46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b4a:	f7f8 fba7 	bl	800029c <__adddf3>
 8007b4e:	4682      	mov	sl, r0
 8007b50:	468b      	mov	fp, r1
 8007b52:	e772      	b.n	8007a3a <_strtod_l+0xa8a>
 8007b54:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007b58:	e7df      	b.n	8007b1a <_strtod_l+0xb6a>
 8007b5a:	a30d      	add	r3, pc, #52	; (adr r3, 8007b90 <_strtod_l+0xbe0>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 ffc4 	bl	8000aec <__aeabi_dcmplt>
 8007b64:	e79c      	b.n	8007aa0 <_strtod_l+0xaf0>
 8007b66:	2300      	movs	r3, #0
 8007b68:	930d      	str	r3, [sp, #52]	; 0x34
 8007b6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	f7ff ba61 	b.w	8007036 <_strtod_l+0x86>
 8007b74:	2b65      	cmp	r3, #101	; 0x65
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f43f ab4e 	beq.w	800721a <_strtod_l+0x26a>
 8007b7e:	2101      	movs	r1, #1
 8007b80:	4614      	mov	r4, r2
 8007b82:	9104      	str	r1, [sp, #16]
 8007b84:	f7ff bacb 	b.w	800711e <_strtod_l+0x16e>
 8007b88:	ffc00000 	.word	0xffc00000
 8007b8c:	41dfffff 	.word	0x41dfffff
 8007b90:	94a03595 	.word	0x94a03595
 8007b94:	3fcfffff 	.word	0x3fcfffff

08007b98 <_strtod_r>:
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <_strtod_r+0x18>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	b410      	push	{r4}
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	4c04      	ldr	r4, [pc, #16]	; (8007bb4 <_strtod_r+0x1c>)
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bf08      	it	eq
 8007ba6:	4623      	moveq	r3, r4
 8007ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bac:	f7ff ba00 	b.w	8006fb0 <_strtod_l>
 8007bb0:	20000014 	.word	0x20000014
 8007bb4:	20000078 	.word	0x20000078

08007bb8 <_strtol_l.isra.0>:
 8007bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	4689      	mov	r9, r1
 8007bc0:	4692      	mov	sl, r2
 8007bc2:	461e      	mov	r6, r3
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	463d      	mov	r5, r7
 8007bc8:	9808      	ldr	r0, [sp, #32]
 8007bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bce:	f001 f9ed 	bl	8008fac <__locale_ctype_ptr_l>
 8007bd2:	4420      	add	r0, r4
 8007bd4:	7843      	ldrb	r3, [r0, #1]
 8007bd6:	f013 0308 	ands.w	r3, r3, #8
 8007bda:	d132      	bne.n	8007c42 <_strtol_l.isra.0+0x8a>
 8007bdc:	2c2d      	cmp	r4, #45	; 0x2d
 8007bde:	d132      	bne.n	8007c46 <_strtol_l.isra.0+0x8e>
 8007be0:	787c      	ldrb	r4, [r7, #1]
 8007be2:	1cbd      	adds	r5, r7, #2
 8007be4:	2201      	movs	r2, #1
 8007be6:	2e00      	cmp	r6, #0
 8007be8:	d05d      	beq.n	8007ca6 <_strtol_l.isra.0+0xee>
 8007bea:	2e10      	cmp	r6, #16
 8007bec:	d109      	bne.n	8007c02 <_strtol_l.isra.0+0x4a>
 8007bee:	2c30      	cmp	r4, #48	; 0x30
 8007bf0:	d107      	bne.n	8007c02 <_strtol_l.isra.0+0x4a>
 8007bf2:	782b      	ldrb	r3, [r5, #0]
 8007bf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bf8:	2b58      	cmp	r3, #88	; 0x58
 8007bfa:	d14f      	bne.n	8007c9c <_strtol_l.isra.0+0xe4>
 8007bfc:	786c      	ldrb	r4, [r5, #1]
 8007bfe:	2610      	movs	r6, #16
 8007c00:	3502      	adds	r5, #2
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	bf14      	ite	ne
 8007c06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007c0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007c0e:	2700      	movs	r7, #0
 8007c10:	fbb1 fcf6 	udiv	ip, r1, r6
 8007c14:	4638      	mov	r0, r7
 8007c16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007c1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007c1e:	2b09      	cmp	r3, #9
 8007c20:	d817      	bhi.n	8007c52 <_strtol_l.isra.0+0x9a>
 8007c22:	461c      	mov	r4, r3
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	dd23      	ble.n	8007c70 <_strtol_l.isra.0+0xb8>
 8007c28:	1c7b      	adds	r3, r7, #1
 8007c2a:	d007      	beq.n	8007c3c <_strtol_l.isra.0+0x84>
 8007c2c:	4584      	cmp	ip, r0
 8007c2e:	d31c      	bcc.n	8007c6a <_strtol_l.isra.0+0xb2>
 8007c30:	d101      	bne.n	8007c36 <_strtol_l.isra.0+0x7e>
 8007c32:	45a6      	cmp	lr, r4
 8007c34:	db19      	blt.n	8007c6a <_strtol_l.isra.0+0xb2>
 8007c36:	fb00 4006 	mla	r0, r0, r6, r4
 8007c3a:	2701      	movs	r7, #1
 8007c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c40:	e7eb      	b.n	8007c1a <_strtol_l.isra.0+0x62>
 8007c42:	462f      	mov	r7, r5
 8007c44:	e7bf      	b.n	8007bc6 <_strtol_l.isra.0+0xe>
 8007c46:	2c2b      	cmp	r4, #43	; 0x2b
 8007c48:	bf04      	itt	eq
 8007c4a:	1cbd      	addeq	r5, r7, #2
 8007c4c:	787c      	ldrbeq	r4, [r7, #1]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	e7c9      	b.n	8007be6 <_strtol_l.isra.0+0x2e>
 8007c52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007c56:	2b19      	cmp	r3, #25
 8007c58:	d801      	bhi.n	8007c5e <_strtol_l.isra.0+0xa6>
 8007c5a:	3c37      	subs	r4, #55	; 0x37
 8007c5c:	e7e2      	b.n	8007c24 <_strtol_l.isra.0+0x6c>
 8007c5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007c62:	2b19      	cmp	r3, #25
 8007c64:	d804      	bhi.n	8007c70 <_strtol_l.isra.0+0xb8>
 8007c66:	3c57      	subs	r4, #87	; 0x57
 8007c68:	e7dc      	b.n	8007c24 <_strtol_l.isra.0+0x6c>
 8007c6a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c6e:	e7e5      	b.n	8007c3c <_strtol_l.isra.0+0x84>
 8007c70:	1c7b      	adds	r3, r7, #1
 8007c72:	d108      	bne.n	8007c86 <_strtol_l.isra.0+0xce>
 8007c74:	2322      	movs	r3, #34	; 0x22
 8007c76:	f8c8 3000 	str.w	r3, [r8]
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	f1ba 0f00 	cmp.w	sl, #0
 8007c80:	d107      	bne.n	8007c92 <_strtol_l.isra.0+0xda>
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	b102      	cbz	r2, 8007c8a <_strtol_l.isra.0+0xd2>
 8007c88:	4240      	negs	r0, r0
 8007c8a:	f1ba 0f00 	cmp.w	sl, #0
 8007c8e:	d0f8      	beq.n	8007c82 <_strtol_l.isra.0+0xca>
 8007c90:	b10f      	cbz	r7, 8007c96 <_strtol_l.isra.0+0xde>
 8007c92:	f105 39ff 	add.w	r9, r5, #4294967295
 8007c96:	f8ca 9000 	str.w	r9, [sl]
 8007c9a:	e7f2      	b.n	8007c82 <_strtol_l.isra.0+0xca>
 8007c9c:	2430      	movs	r4, #48	; 0x30
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	d1af      	bne.n	8007c02 <_strtol_l.isra.0+0x4a>
 8007ca2:	2608      	movs	r6, #8
 8007ca4:	e7ad      	b.n	8007c02 <_strtol_l.isra.0+0x4a>
 8007ca6:	2c30      	cmp	r4, #48	; 0x30
 8007ca8:	d0a3      	beq.n	8007bf2 <_strtol_l.isra.0+0x3a>
 8007caa:	260a      	movs	r6, #10
 8007cac:	e7a9      	b.n	8007c02 <_strtol_l.isra.0+0x4a>
	...

08007cb0 <_strtol_r>:
 8007cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cb2:	4c06      	ldr	r4, [pc, #24]	; (8007ccc <_strtol_r+0x1c>)
 8007cb4:	4d06      	ldr	r5, [pc, #24]	; (8007cd0 <_strtol_r+0x20>)
 8007cb6:	6824      	ldr	r4, [r4, #0]
 8007cb8:	6a24      	ldr	r4, [r4, #32]
 8007cba:	2c00      	cmp	r4, #0
 8007cbc:	bf08      	it	eq
 8007cbe:	462c      	moveq	r4, r5
 8007cc0:	9400      	str	r4, [sp, #0]
 8007cc2:	f7ff ff79 	bl	8007bb8 <_strtol_l.isra.0>
 8007cc6:	b003      	add	sp, #12
 8007cc8:	bd30      	pop	{r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000014 	.word	0x20000014
 8007cd0:	20000078 	.word	0x20000078

08007cd4 <quorem>:
 8007cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	6903      	ldr	r3, [r0, #16]
 8007cda:	690c      	ldr	r4, [r1, #16]
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	4680      	mov	r8, r0
 8007ce0:	f2c0 8082 	blt.w	8007de8 <quorem+0x114>
 8007ce4:	3c01      	subs	r4, #1
 8007ce6:	f101 0714 	add.w	r7, r1, #20
 8007cea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007cee:	f100 0614 	add.w	r6, r0, #20
 8007cf2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cf6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cfa:	eb06 030c 	add.w	r3, r6, ip
 8007cfe:	3501      	adds	r5, #1
 8007d00:	eb07 090c 	add.w	r9, r7, ip
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	fbb0 f5f5 	udiv	r5, r0, r5
 8007d0a:	b395      	cbz	r5, 8007d72 <quorem+0x9e>
 8007d0c:	f04f 0a00 	mov.w	sl, #0
 8007d10:	4638      	mov	r0, r7
 8007d12:	46b6      	mov	lr, r6
 8007d14:	46d3      	mov	fp, sl
 8007d16:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d1a:	b293      	uxth	r3, r2
 8007d1c:	fb05 a303 	mla	r3, r5, r3, sl
 8007d20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	ebab 0303 	sub.w	r3, fp, r3
 8007d2a:	0c12      	lsrs	r2, r2, #16
 8007d2c:	f8de b000 	ldr.w	fp, [lr]
 8007d30:	fb05 a202 	mla	r2, r5, r2, sl
 8007d34:	fa13 f38b 	uxtah	r3, r3, fp
 8007d38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d3c:	fa1f fb82 	uxth.w	fp, r2
 8007d40:	f8de 2000 	ldr.w	r2, [lr]
 8007d44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d52:	4581      	cmp	r9, r0
 8007d54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d58:	f84e 3b04 	str.w	r3, [lr], #4
 8007d5c:	d2db      	bcs.n	8007d16 <quorem+0x42>
 8007d5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d62:	b933      	cbnz	r3, 8007d72 <quorem+0x9e>
 8007d64:	9b01      	ldr	r3, [sp, #4]
 8007d66:	3b04      	subs	r3, #4
 8007d68:	429e      	cmp	r6, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	d330      	bcc.n	8007dd0 <quorem+0xfc>
 8007d6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d72:	4640      	mov	r0, r8
 8007d74:	f001 fb9c 	bl	80094b0 <__mcmp>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	db25      	blt.n	8007dc8 <quorem+0xf4>
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f04f 0c00 	mov.w	ip, #0
 8007d84:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d88:	f8d0 e000 	ldr.w	lr, [r0]
 8007d8c:	b293      	uxth	r3, r2
 8007d8e:	ebac 0303 	sub.w	r3, ip, r3
 8007d92:	0c12      	lsrs	r2, r2, #16
 8007d94:	fa13 f38e 	uxtah	r3, r3, lr
 8007d98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007da6:	45b9      	cmp	r9, r7
 8007da8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dac:	f840 3b04 	str.w	r3, [r0], #4
 8007db0:	d2e8      	bcs.n	8007d84 <quorem+0xb0>
 8007db2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007db6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007dba:	b92a      	cbnz	r2, 8007dc8 <quorem+0xf4>
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	429e      	cmp	r6, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	d30b      	bcc.n	8007ddc <quorem+0x108>
 8007dc4:	f8c8 4010 	str.w	r4, [r8, #16]
 8007dc8:	4628      	mov	r0, r5
 8007dca:	b003      	add	sp, #12
 8007dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	3b04      	subs	r3, #4
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d1ca      	bne.n	8007d6e <quorem+0x9a>
 8007dd8:	3c01      	subs	r4, #1
 8007dda:	e7c5      	b.n	8007d68 <quorem+0x94>
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	3b04      	subs	r3, #4
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d1ef      	bne.n	8007dc4 <quorem+0xf0>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	e7ea      	b.n	8007dbe <quorem+0xea>
 8007de8:	2000      	movs	r0, #0
 8007dea:	e7ee      	b.n	8007dca <quorem+0xf6>
 8007dec:	0000      	movs	r0, r0
	...

08007df0 <_dtoa_r>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	ec57 6b10 	vmov	r6, r7, d0
 8007df8:	b097      	sub	sp, #92	; 0x5c
 8007dfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dfc:	9106      	str	r1, [sp, #24]
 8007dfe:	4604      	mov	r4, r0
 8007e00:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e02:	9312      	str	r3, [sp, #72]	; 0x48
 8007e04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e08:	e9cd 6700 	strd	r6, r7, [sp]
 8007e0c:	b93d      	cbnz	r5, 8007e1e <_dtoa_r+0x2e>
 8007e0e:	2010      	movs	r0, #16
 8007e10:	f001 f8e0 	bl	8008fd4 <malloc>
 8007e14:	6260      	str	r0, [r4, #36]	; 0x24
 8007e16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e1a:	6005      	str	r5, [r0, #0]
 8007e1c:	60c5      	str	r5, [r0, #12]
 8007e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	b151      	cbz	r1, 8007e3a <_dtoa_r+0x4a>
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	604a      	str	r2, [r1, #4]
 8007e28:	2301      	movs	r3, #1
 8007e2a:	4093      	lsls	r3, r2
 8007e2c:	608b      	str	r3, [r1, #8]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f001 f91e 	bl	8009070 <_Bfree>
 8007e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	1e3b      	subs	r3, r7, #0
 8007e3c:	bfbb      	ittet	lt
 8007e3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e42:	9301      	strlt	r3, [sp, #4]
 8007e44:	2300      	movge	r3, #0
 8007e46:	2201      	movlt	r2, #1
 8007e48:	bfac      	ite	ge
 8007e4a:	f8c8 3000 	strge.w	r3, [r8]
 8007e4e:	f8c8 2000 	strlt.w	r2, [r8]
 8007e52:	4baf      	ldr	r3, [pc, #700]	; (8008110 <_dtoa_r+0x320>)
 8007e54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e58:	ea33 0308 	bics.w	r3, r3, r8
 8007e5c:	d114      	bne.n	8007e88 <_dtoa_r+0x98>
 8007e5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e60:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	9b00      	ldr	r3, [sp, #0]
 8007e68:	b923      	cbnz	r3, 8007e74 <_dtoa_r+0x84>
 8007e6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f000 8542 	beq.w	80088f8 <_dtoa_r+0xb08>
 8007e74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008124 <_dtoa_r+0x334>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8544 	beq.w	8008908 <_dtoa_r+0xb18>
 8007e80:	f10b 0303 	add.w	r3, fp, #3
 8007e84:	f000 bd3e 	b.w	8008904 <_dtoa_r+0xb14>
 8007e88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4630      	mov	r0, r6
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e98:	4681      	mov	r9, r0
 8007e9a:	b168      	cbz	r0, 8007eb8 <_dtoa_r+0xc8>
 8007e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8524 	beq.w	80088f2 <_dtoa_r+0xb02>
 8007eaa:	4b9a      	ldr	r3, [pc, #616]	; (8008114 <_dtoa_r+0x324>)
 8007eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eae:	f103 3bff 	add.w	fp, r3, #4294967295
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	f000 bd28 	b.w	8008908 <_dtoa_r+0xb18>
 8007eb8:	aa14      	add	r2, sp, #80	; 0x50
 8007eba:	a915      	add	r1, sp, #84	; 0x54
 8007ebc:	ec47 6b10 	vmov	d0, r6, r7
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 fbe3 	bl	800968c <__d2b>
 8007ec6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007eca:	9004      	str	r0, [sp, #16]
 8007ecc:	2d00      	cmp	r5, #0
 8007ece:	d07c      	beq.n	8007fca <_dtoa_r+0x1da>
 8007ed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ed4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007ed8:	46b2      	mov	sl, r6
 8007eda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ee2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4b8b      	ldr	r3, [pc, #556]	; (8008118 <_dtoa_r+0x328>)
 8007eea:	4650      	mov	r0, sl
 8007eec:	4659      	mov	r1, fp
 8007eee:	f7f8 f9d3 	bl	8000298 <__aeabi_dsub>
 8007ef2:	a381      	add	r3, pc, #516	; (adr r3, 80080f8 <_dtoa_r+0x308>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 fb86 	bl	8000608 <__aeabi_dmul>
 8007efc:	a380      	add	r3, pc, #512	; (adr r3, 8008100 <_dtoa_r+0x310>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 f9cb 	bl	800029c <__adddf3>
 8007f06:	4606      	mov	r6, r0
 8007f08:	4628      	mov	r0, r5
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	f7f8 fb12 	bl	8000534 <__aeabi_i2d>
 8007f10:	a37d      	add	r3, pc, #500	; (adr r3, 8008108 <_dtoa_r+0x318>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f7f8 fb77 	bl	8000608 <__aeabi_dmul>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4639      	mov	r1, r7
 8007f22:	f7f8 f9bb 	bl	800029c <__adddf3>
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	f7f8 fe1d 	bl	8000b68 <__aeabi_d2iz>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4682      	mov	sl, r0
 8007f32:	2300      	movs	r3, #0
 8007f34:	4630      	mov	r0, r6
 8007f36:	4639      	mov	r1, r7
 8007f38:	f7f8 fdd8 	bl	8000aec <__aeabi_dcmplt>
 8007f3c:	b148      	cbz	r0, 8007f52 <_dtoa_r+0x162>
 8007f3e:	4650      	mov	r0, sl
 8007f40:	f7f8 faf8 	bl	8000534 <__aeabi_i2d>
 8007f44:	4632      	mov	r2, r6
 8007f46:	463b      	mov	r3, r7
 8007f48:	f7f8 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f4c:	b908      	cbnz	r0, 8007f52 <_dtoa_r+0x162>
 8007f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f52:	f1ba 0f16 	cmp.w	sl, #22
 8007f56:	d859      	bhi.n	800800c <_dtoa_r+0x21c>
 8007f58:	4970      	ldr	r1, [pc, #448]	; (800811c <_dtoa_r+0x32c>)
 8007f5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f66:	f7f8 fddf 	bl	8000b28 <__aeabi_dcmpgt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d050      	beq.n	8008010 <_dtoa_r+0x220>
 8007f6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f72:	2300      	movs	r3, #0
 8007f74:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f78:	1b5d      	subs	r5, r3, r5
 8007f7a:	f1b5 0801 	subs.w	r8, r5, #1
 8007f7e:	bf49      	itett	mi
 8007f80:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f84:	2300      	movpl	r3, #0
 8007f86:	9305      	strmi	r3, [sp, #20]
 8007f88:	f04f 0800 	movmi.w	r8, #0
 8007f8c:	bf58      	it	pl
 8007f8e:	9305      	strpl	r3, [sp, #20]
 8007f90:	f1ba 0f00 	cmp.w	sl, #0
 8007f94:	db3e      	blt.n	8008014 <_dtoa_r+0x224>
 8007f96:	2300      	movs	r3, #0
 8007f98:	44d0      	add	r8, sl
 8007f9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	9b06      	ldr	r3, [sp, #24]
 8007fa2:	2b09      	cmp	r3, #9
 8007fa4:	f200 8090 	bhi.w	80080c8 <_dtoa_r+0x2d8>
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	bfc4      	itt	gt
 8007fac:	3b04      	subgt	r3, #4
 8007fae:	9306      	strgt	r3, [sp, #24]
 8007fb0:	9b06      	ldr	r3, [sp, #24]
 8007fb2:	f1a3 0302 	sub.w	r3, r3, #2
 8007fb6:	bfcc      	ite	gt
 8007fb8:	2500      	movgt	r5, #0
 8007fba:	2501      	movle	r5, #1
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	f200 808f 	bhi.w	80080e0 <_dtoa_r+0x2f0>
 8007fc2:	e8df f003 	tbb	[pc, r3]
 8007fc6:	7f7d      	.short	0x7f7d
 8007fc8:	7131      	.short	0x7131
 8007fca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007fce:	441d      	add	r5, r3
 8007fd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007fd4:	2820      	cmp	r0, #32
 8007fd6:	dd13      	ble.n	8008000 <_dtoa_r+0x210>
 8007fd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	fa08 f800 	lsl.w	r8, r8, r0
 8007fe2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007fe6:	fa23 f000 	lsr.w	r0, r3, r0
 8007fea:	ea48 0000 	orr.w	r0, r8, r0
 8007fee:	f7f8 fa91 	bl	8000514 <__aeabi_ui2d>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007ffa:	3d01      	subs	r5, #1
 8007ffc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ffe:	e772      	b.n	8007ee6 <_dtoa_r+0xf6>
 8008000:	9b00      	ldr	r3, [sp, #0]
 8008002:	f1c0 0020 	rsb	r0, r0, #32
 8008006:	fa03 f000 	lsl.w	r0, r3, r0
 800800a:	e7f0      	b.n	8007fee <_dtoa_r+0x1fe>
 800800c:	2301      	movs	r3, #1
 800800e:	e7b1      	b.n	8007f74 <_dtoa_r+0x184>
 8008010:	900f      	str	r0, [sp, #60]	; 0x3c
 8008012:	e7b0      	b.n	8007f76 <_dtoa_r+0x186>
 8008014:	9b05      	ldr	r3, [sp, #20]
 8008016:	eba3 030a 	sub.w	r3, r3, sl
 800801a:	9305      	str	r3, [sp, #20]
 800801c:	f1ca 0300 	rsb	r3, sl, #0
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	2300      	movs	r3, #0
 8008024:	930e      	str	r3, [sp, #56]	; 0x38
 8008026:	e7bb      	b.n	8007fa0 <_dtoa_r+0x1b0>
 8008028:	2301      	movs	r3, #1
 800802a:	930a      	str	r3, [sp, #40]	; 0x28
 800802c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	dd59      	ble.n	80080e6 <_dtoa_r+0x2f6>
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	4699      	mov	r9, r3
 8008036:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008038:	2200      	movs	r2, #0
 800803a:	6072      	str	r2, [r6, #4]
 800803c:	2204      	movs	r2, #4
 800803e:	f102 0014 	add.w	r0, r2, #20
 8008042:	4298      	cmp	r0, r3
 8008044:	6871      	ldr	r1, [r6, #4]
 8008046:	d953      	bls.n	80080f0 <_dtoa_r+0x300>
 8008048:	4620      	mov	r0, r4
 800804a:	f000 ffdd 	bl	8009008 <_Balloc>
 800804e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008050:	6030      	str	r0, [r6, #0]
 8008052:	f1b9 0f0e 	cmp.w	r9, #14
 8008056:	f8d3 b000 	ldr.w	fp, [r3]
 800805a:	f200 80e6 	bhi.w	800822a <_dtoa_r+0x43a>
 800805e:	2d00      	cmp	r5, #0
 8008060:	f000 80e3 	beq.w	800822a <_dtoa_r+0x43a>
 8008064:	ed9d 7b00 	vldr	d7, [sp]
 8008068:	f1ba 0f00 	cmp.w	sl, #0
 800806c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008070:	dd74      	ble.n	800815c <_dtoa_r+0x36c>
 8008072:	4a2a      	ldr	r2, [pc, #168]	; (800811c <_dtoa_r+0x32c>)
 8008074:	f00a 030f 	and.w	r3, sl, #15
 8008078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800807c:	ed93 7b00 	vldr	d7, [r3]
 8008080:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008084:	06f0      	lsls	r0, r6, #27
 8008086:	ed8d 7b08 	vstr	d7, [sp, #32]
 800808a:	d565      	bpl.n	8008158 <_dtoa_r+0x368>
 800808c:	4b24      	ldr	r3, [pc, #144]	; (8008120 <_dtoa_r+0x330>)
 800808e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008092:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008096:	f7f8 fbe1 	bl	800085c <__aeabi_ddiv>
 800809a:	e9cd 0100 	strd	r0, r1, [sp]
 800809e:	f006 060f 	and.w	r6, r6, #15
 80080a2:	2503      	movs	r5, #3
 80080a4:	4f1e      	ldr	r7, [pc, #120]	; (8008120 <_dtoa_r+0x330>)
 80080a6:	e04c      	b.n	8008142 <_dtoa_r+0x352>
 80080a8:	2301      	movs	r3, #1
 80080aa:	930a      	str	r3, [sp, #40]	; 0x28
 80080ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ae:	4453      	add	r3, sl
 80080b0:	f103 0901 	add.w	r9, r3, #1
 80080b4:	9302      	str	r3, [sp, #8]
 80080b6:	464b      	mov	r3, r9
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	bfb8      	it	lt
 80080bc:	2301      	movlt	r3, #1
 80080be:	e7ba      	b.n	8008036 <_dtoa_r+0x246>
 80080c0:	2300      	movs	r3, #0
 80080c2:	e7b2      	b.n	800802a <_dtoa_r+0x23a>
 80080c4:	2300      	movs	r3, #0
 80080c6:	e7f0      	b.n	80080aa <_dtoa_r+0x2ba>
 80080c8:	2501      	movs	r5, #1
 80080ca:	2300      	movs	r3, #0
 80080cc:	9306      	str	r3, [sp, #24]
 80080ce:	950a      	str	r5, [sp, #40]	; 0x28
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295
 80080d4:	9302      	str	r3, [sp, #8]
 80080d6:	4699      	mov	r9, r3
 80080d8:	2200      	movs	r2, #0
 80080da:	2312      	movs	r3, #18
 80080dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80080de:	e7aa      	b.n	8008036 <_dtoa_r+0x246>
 80080e0:	2301      	movs	r3, #1
 80080e2:	930a      	str	r3, [sp, #40]	; 0x28
 80080e4:	e7f4      	b.n	80080d0 <_dtoa_r+0x2e0>
 80080e6:	2301      	movs	r3, #1
 80080e8:	9302      	str	r3, [sp, #8]
 80080ea:	4699      	mov	r9, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	e7f5      	b.n	80080dc <_dtoa_r+0x2ec>
 80080f0:	3101      	adds	r1, #1
 80080f2:	6071      	str	r1, [r6, #4]
 80080f4:	0052      	lsls	r2, r2, #1
 80080f6:	e7a2      	b.n	800803e <_dtoa_r+0x24e>
 80080f8:	636f4361 	.word	0x636f4361
 80080fc:	3fd287a7 	.word	0x3fd287a7
 8008100:	8b60c8b3 	.word	0x8b60c8b3
 8008104:	3fc68a28 	.word	0x3fc68a28
 8008108:	509f79fb 	.word	0x509f79fb
 800810c:	3fd34413 	.word	0x3fd34413
 8008110:	7ff00000 	.word	0x7ff00000
 8008114:	0800ada9 	.word	0x0800ada9
 8008118:	3ff80000 	.word	0x3ff80000
 800811c:	0800ae68 	.word	0x0800ae68
 8008120:	0800ae40 	.word	0x0800ae40
 8008124:	0800ae31 	.word	0x0800ae31
 8008128:	07f1      	lsls	r1, r6, #31
 800812a:	d508      	bpl.n	800813e <_dtoa_r+0x34e>
 800812c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008134:	f7f8 fa68 	bl	8000608 <__aeabi_dmul>
 8008138:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800813c:	3501      	adds	r5, #1
 800813e:	1076      	asrs	r6, r6, #1
 8008140:	3708      	adds	r7, #8
 8008142:	2e00      	cmp	r6, #0
 8008144:	d1f0      	bne.n	8008128 <_dtoa_r+0x338>
 8008146:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800814a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800814e:	f7f8 fb85 	bl	800085c <__aeabi_ddiv>
 8008152:	e9cd 0100 	strd	r0, r1, [sp]
 8008156:	e01a      	b.n	800818e <_dtoa_r+0x39e>
 8008158:	2502      	movs	r5, #2
 800815a:	e7a3      	b.n	80080a4 <_dtoa_r+0x2b4>
 800815c:	f000 80a0 	beq.w	80082a0 <_dtoa_r+0x4b0>
 8008160:	f1ca 0600 	rsb	r6, sl, #0
 8008164:	4b9f      	ldr	r3, [pc, #636]	; (80083e4 <_dtoa_r+0x5f4>)
 8008166:	4fa0      	ldr	r7, [pc, #640]	; (80083e8 <_dtoa_r+0x5f8>)
 8008168:	f006 020f 	and.w	r2, r6, #15
 800816c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008178:	f7f8 fa46 	bl	8000608 <__aeabi_dmul>
 800817c:	e9cd 0100 	strd	r0, r1, [sp]
 8008180:	1136      	asrs	r6, r6, #4
 8008182:	2300      	movs	r3, #0
 8008184:	2502      	movs	r5, #2
 8008186:	2e00      	cmp	r6, #0
 8008188:	d17f      	bne.n	800828a <_dtoa_r+0x49a>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e1      	bne.n	8008152 <_dtoa_r+0x362>
 800818e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 8087 	beq.w	80082a4 <_dtoa_r+0x4b4>
 8008196:	e9dd 6700 	ldrd	r6, r7, [sp]
 800819a:	2200      	movs	r2, #0
 800819c:	4b93      	ldr	r3, [pc, #588]	; (80083ec <_dtoa_r+0x5fc>)
 800819e:	4630      	mov	r0, r6
 80081a0:	4639      	mov	r1, r7
 80081a2:	f7f8 fca3 	bl	8000aec <__aeabi_dcmplt>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d07c      	beq.n	80082a4 <_dtoa_r+0x4b4>
 80081aa:	f1b9 0f00 	cmp.w	r9, #0
 80081ae:	d079      	beq.n	80082a4 <_dtoa_r+0x4b4>
 80081b0:	9b02      	ldr	r3, [sp, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dd35      	ble.n	8008222 <_dtoa_r+0x432>
 80081b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80081ba:	9308      	str	r3, [sp, #32]
 80081bc:	4639      	mov	r1, r7
 80081be:	2200      	movs	r2, #0
 80081c0:	4b8b      	ldr	r3, [pc, #556]	; (80083f0 <_dtoa_r+0x600>)
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7f8 fa20 	bl	8000608 <__aeabi_dmul>
 80081c8:	e9cd 0100 	strd	r0, r1, [sp]
 80081cc:	9f02      	ldr	r7, [sp, #8]
 80081ce:	3501      	adds	r5, #1
 80081d0:	4628      	mov	r0, r5
 80081d2:	f7f8 f9af 	bl	8000534 <__aeabi_i2d>
 80081d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081da:	f7f8 fa15 	bl	8000608 <__aeabi_dmul>
 80081de:	2200      	movs	r2, #0
 80081e0:	4b84      	ldr	r3, [pc, #528]	; (80083f4 <_dtoa_r+0x604>)
 80081e2:	f7f8 f85b 	bl	800029c <__adddf3>
 80081e6:	4605      	mov	r5, r0
 80081e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081ec:	2f00      	cmp	r7, #0
 80081ee:	d15d      	bne.n	80082ac <_dtoa_r+0x4bc>
 80081f0:	2200      	movs	r2, #0
 80081f2:	4b81      	ldr	r3, [pc, #516]	; (80083f8 <_dtoa_r+0x608>)
 80081f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f8:	f7f8 f84e 	bl	8000298 <__aeabi_dsub>
 80081fc:	462a      	mov	r2, r5
 80081fe:	4633      	mov	r3, r6
 8008200:	e9cd 0100 	strd	r0, r1, [sp]
 8008204:	f7f8 fc90 	bl	8000b28 <__aeabi_dcmpgt>
 8008208:	2800      	cmp	r0, #0
 800820a:	f040 8288 	bne.w	800871e <_dtoa_r+0x92e>
 800820e:	462a      	mov	r2, r5
 8008210:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008218:	f7f8 fc68 	bl	8000aec <__aeabi_dcmplt>
 800821c:	2800      	cmp	r0, #0
 800821e:	f040 827c 	bne.w	800871a <_dtoa_r+0x92a>
 8008222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008226:	e9cd 2300 	strd	r2, r3, [sp]
 800822a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800822c:	2b00      	cmp	r3, #0
 800822e:	f2c0 8150 	blt.w	80084d2 <_dtoa_r+0x6e2>
 8008232:	f1ba 0f0e 	cmp.w	sl, #14
 8008236:	f300 814c 	bgt.w	80084d2 <_dtoa_r+0x6e2>
 800823a:	4b6a      	ldr	r3, [pc, #424]	; (80083e4 <_dtoa_r+0x5f4>)
 800823c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008240:	ed93 7b00 	vldr	d7, [r3]
 8008244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008246:	2b00      	cmp	r3, #0
 8008248:	ed8d 7b02 	vstr	d7, [sp, #8]
 800824c:	f280 80d8 	bge.w	8008400 <_dtoa_r+0x610>
 8008250:	f1b9 0f00 	cmp.w	r9, #0
 8008254:	f300 80d4 	bgt.w	8008400 <_dtoa_r+0x610>
 8008258:	f040 825e 	bne.w	8008718 <_dtoa_r+0x928>
 800825c:	2200      	movs	r2, #0
 800825e:	4b66      	ldr	r3, [pc, #408]	; (80083f8 <_dtoa_r+0x608>)
 8008260:	ec51 0b17 	vmov	r0, r1, d7
 8008264:	f7f8 f9d0 	bl	8000608 <__aeabi_dmul>
 8008268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800826c:	f7f8 fc52 	bl	8000b14 <__aeabi_dcmpge>
 8008270:	464f      	mov	r7, r9
 8008272:	464e      	mov	r6, r9
 8008274:	2800      	cmp	r0, #0
 8008276:	f040 8234 	bne.w	80086e2 <_dtoa_r+0x8f2>
 800827a:	2331      	movs	r3, #49	; 0x31
 800827c:	f10b 0501 	add.w	r5, fp, #1
 8008280:	f88b 3000 	strb.w	r3, [fp]
 8008284:	f10a 0a01 	add.w	sl, sl, #1
 8008288:	e22f      	b.n	80086ea <_dtoa_r+0x8fa>
 800828a:	07f2      	lsls	r2, r6, #31
 800828c:	d505      	bpl.n	800829a <_dtoa_r+0x4aa>
 800828e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008292:	f7f8 f9b9 	bl	8000608 <__aeabi_dmul>
 8008296:	3501      	adds	r5, #1
 8008298:	2301      	movs	r3, #1
 800829a:	1076      	asrs	r6, r6, #1
 800829c:	3708      	adds	r7, #8
 800829e:	e772      	b.n	8008186 <_dtoa_r+0x396>
 80082a0:	2502      	movs	r5, #2
 80082a2:	e774      	b.n	800818e <_dtoa_r+0x39e>
 80082a4:	f8cd a020 	str.w	sl, [sp, #32]
 80082a8:	464f      	mov	r7, r9
 80082aa:	e791      	b.n	80081d0 <_dtoa_r+0x3e0>
 80082ac:	4b4d      	ldr	r3, [pc, #308]	; (80083e4 <_dtoa_r+0x5f4>)
 80082ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80082b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d047      	beq.n	800834c <_dtoa_r+0x55c>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	2000      	movs	r0, #0
 80082c2:	494e      	ldr	r1, [pc, #312]	; (80083fc <_dtoa_r+0x60c>)
 80082c4:	f7f8 faca 	bl	800085c <__aeabi_ddiv>
 80082c8:	462a      	mov	r2, r5
 80082ca:	4633      	mov	r3, r6
 80082cc:	f7f7 ffe4 	bl	8000298 <__aeabi_dsub>
 80082d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082d4:	465d      	mov	r5, fp
 80082d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082da:	f7f8 fc45 	bl	8000b68 <__aeabi_d2iz>
 80082de:	4606      	mov	r6, r0
 80082e0:	f7f8 f928 	bl	8000534 <__aeabi_i2d>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ec:	f7f7 ffd4 	bl	8000298 <__aeabi_dsub>
 80082f0:	3630      	adds	r6, #48	; 0x30
 80082f2:	f805 6b01 	strb.w	r6, [r5], #1
 80082f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082fa:	e9cd 0100 	strd	r0, r1, [sp]
 80082fe:	f7f8 fbf5 	bl	8000aec <__aeabi_dcmplt>
 8008302:	2800      	cmp	r0, #0
 8008304:	d163      	bne.n	80083ce <_dtoa_r+0x5de>
 8008306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800830a:	2000      	movs	r0, #0
 800830c:	4937      	ldr	r1, [pc, #220]	; (80083ec <_dtoa_r+0x5fc>)
 800830e:	f7f7 ffc3 	bl	8000298 <__aeabi_dsub>
 8008312:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008316:	f7f8 fbe9 	bl	8000aec <__aeabi_dcmplt>
 800831a:	2800      	cmp	r0, #0
 800831c:	f040 80b7 	bne.w	800848e <_dtoa_r+0x69e>
 8008320:	eba5 030b 	sub.w	r3, r5, fp
 8008324:	429f      	cmp	r7, r3
 8008326:	f77f af7c 	ble.w	8008222 <_dtoa_r+0x432>
 800832a:	2200      	movs	r2, #0
 800832c:	4b30      	ldr	r3, [pc, #192]	; (80083f0 <_dtoa_r+0x600>)
 800832e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008332:	f7f8 f969 	bl	8000608 <__aeabi_dmul>
 8008336:	2200      	movs	r2, #0
 8008338:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800833c:	4b2c      	ldr	r3, [pc, #176]	; (80083f0 <_dtoa_r+0x600>)
 800833e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008342:	f7f8 f961 	bl	8000608 <__aeabi_dmul>
 8008346:	e9cd 0100 	strd	r0, r1, [sp]
 800834a:	e7c4      	b.n	80082d6 <_dtoa_r+0x4e6>
 800834c:	462a      	mov	r2, r5
 800834e:	4633      	mov	r3, r6
 8008350:	f7f8 f95a 	bl	8000608 <__aeabi_dmul>
 8008354:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008358:	eb0b 0507 	add.w	r5, fp, r7
 800835c:	465e      	mov	r6, fp
 800835e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008362:	f7f8 fc01 	bl	8000b68 <__aeabi_d2iz>
 8008366:	4607      	mov	r7, r0
 8008368:	f7f8 f8e4 	bl	8000534 <__aeabi_i2d>
 800836c:	3730      	adds	r7, #48	; 0x30
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008376:	f7f7 ff8f 	bl	8000298 <__aeabi_dsub>
 800837a:	f806 7b01 	strb.w	r7, [r6], #1
 800837e:	42ae      	cmp	r6, r5
 8008380:	e9cd 0100 	strd	r0, r1, [sp]
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	d126      	bne.n	80083d8 <_dtoa_r+0x5e8>
 800838a:	4b1c      	ldr	r3, [pc, #112]	; (80083fc <_dtoa_r+0x60c>)
 800838c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008390:	f7f7 ff84 	bl	800029c <__adddf3>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800839c:	f7f8 fbc4 	bl	8000b28 <__aeabi_dcmpgt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d174      	bne.n	800848e <_dtoa_r+0x69e>
 80083a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083a8:	2000      	movs	r0, #0
 80083aa:	4914      	ldr	r1, [pc, #80]	; (80083fc <_dtoa_r+0x60c>)
 80083ac:	f7f7 ff74 	bl	8000298 <__aeabi_dsub>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083b8:	f7f8 fb98 	bl	8000aec <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f43f af30 	beq.w	8008222 <_dtoa_r+0x432>
 80083c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083c6:	2b30      	cmp	r3, #48	; 0x30
 80083c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80083cc:	d002      	beq.n	80083d4 <_dtoa_r+0x5e4>
 80083ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80083d2:	e04a      	b.n	800846a <_dtoa_r+0x67a>
 80083d4:	4615      	mov	r5, r2
 80083d6:	e7f4      	b.n	80083c2 <_dtoa_r+0x5d2>
 80083d8:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <_dtoa_r+0x600>)
 80083da:	f7f8 f915 	bl	8000608 <__aeabi_dmul>
 80083de:	e9cd 0100 	strd	r0, r1, [sp]
 80083e2:	e7bc      	b.n	800835e <_dtoa_r+0x56e>
 80083e4:	0800ae68 	.word	0x0800ae68
 80083e8:	0800ae40 	.word	0x0800ae40
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	40240000 	.word	0x40240000
 80083f4:	401c0000 	.word	0x401c0000
 80083f8:	40140000 	.word	0x40140000
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008404:	465d      	mov	r5, fp
 8008406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f8 fa25 	bl	800085c <__aeabi_ddiv>
 8008412:	f7f8 fba9 	bl	8000b68 <__aeabi_d2iz>
 8008416:	4680      	mov	r8, r0
 8008418:	f7f8 f88c 	bl	8000534 <__aeabi_i2d>
 800841c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008420:	f7f8 f8f2 	bl	8000608 <__aeabi_dmul>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008430:	f7f7 ff32 	bl	8000298 <__aeabi_dsub>
 8008434:	f805 6b01 	strb.w	r6, [r5], #1
 8008438:	eba5 060b 	sub.w	r6, r5, fp
 800843c:	45b1      	cmp	r9, r6
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	d139      	bne.n	80084b8 <_dtoa_r+0x6c8>
 8008444:	f7f7 ff2a 	bl	800029c <__adddf3>
 8008448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800844c:	4606      	mov	r6, r0
 800844e:	460f      	mov	r7, r1
 8008450:	f7f8 fb6a 	bl	8000b28 <__aeabi_dcmpgt>
 8008454:	b9c8      	cbnz	r0, 800848a <_dtoa_r+0x69a>
 8008456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f8 fb3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008462:	b110      	cbz	r0, 800846a <_dtoa_r+0x67a>
 8008464:	f018 0f01 	tst.w	r8, #1
 8008468:	d10f      	bne.n	800848a <_dtoa_r+0x69a>
 800846a:	9904      	ldr	r1, [sp, #16]
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fdff 	bl	8009070 <_Bfree>
 8008472:	2300      	movs	r3, #0
 8008474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008476:	702b      	strb	r3, [r5, #0]
 8008478:	f10a 0301 	add.w	r3, sl, #1
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8241 	beq.w	8008908 <_dtoa_r+0xb18>
 8008486:	601d      	str	r5, [r3, #0]
 8008488:	e23e      	b.n	8008908 <_dtoa_r+0xb18>
 800848a:	f8cd a020 	str.w	sl, [sp, #32]
 800848e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008492:	2a39      	cmp	r2, #57	; 0x39
 8008494:	f105 33ff 	add.w	r3, r5, #4294967295
 8008498:	d108      	bne.n	80084ac <_dtoa_r+0x6bc>
 800849a:	459b      	cmp	fp, r3
 800849c:	d10a      	bne.n	80084b4 <_dtoa_r+0x6c4>
 800849e:	9b08      	ldr	r3, [sp, #32]
 80084a0:	3301      	adds	r3, #1
 80084a2:	9308      	str	r3, [sp, #32]
 80084a4:	2330      	movs	r3, #48	; 0x30
 80084a6:	f88b 3000 	strb.w	r3, [fp]
 80084aa:	465b      	mov	r3, fp
 80084ac:	781a      	ldrb	r2, [r3, #0]
 80084ae:	3201      	adds	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	e78c      	b.n	80083ce <_dtoa_r+0x5de>
 80084b4:	461d      	mov	r5, r3
 80084b6:	e7ea      	b.n	800848e <_dtoa_r+0x69e>
 80084b8:	2200      	movs	r2, #0
 80084ba:	4b9b      	ldr	r3, [pc, #620]	; (8008728 <_dtoa_r+0x938>)
 80084bc:	f7f8 f8a4 	bl	8000608 <__aeabi_dmul>
 80084c0:	2200      	movs	r2, #0
 80084c2:	2300      	movs	r3, #0
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	f7f8 fb06 	bl	8000ad8 <__aeabi_dcmpeq>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d09a      	beq.n	8008406 <_dtoa_r+0x616>
 80084d0:	e7cb      	b.n	800846a <_dtoa_r+0x67a>
 80084d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	f000 808b 	beq.w	80085f0 <_dtoa_r+0x800>
 80084da:	9a06      	ldr	r2, [sp, #24]
 80084dc:	2a01      	cmp	r2, #1
 80084de:	dc6e      	bgt.n	80085be <_dtoa_r+0x7ce>
 80084e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	d067      	beq.n	80085b6 <_dtoa_r+0x7c6>
 80084e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084ea:	9f07      	ldr	r7, [sp, #28]
 80084ec:	9d05      	ldr	r5, [sp, #20]
 80084ee:	9a05      	ldr	r2, [sp, #20]
 80084f0:	2101      	movs	r1, #1
 80084f2:	441a      	add	r2, r3
 80084f4:	4620      	mov	r0, r4
 80084f6:	9205      	str	r2, [sp, #20]
 80084f8:	4498      	add	r8, r3
 80084fa:	f000 fe97 	bl	800922c <__i2b>
 80084fe:	4606      	mov	r6, r0
 8008500:	2d00      	cmp	r5, #0
 8008502:	dd0c      	ble.n	800851e <_dtoa_r+0x72e>
 8008504:	f1b8 0f00 	cmp.w	r8, #0
 8008508:	dd09      	ble.n	800851e <_dtoa_r+0x72e>
 800850a:	4545      	cmp	r5, r8
 800850c:	9a05      	ldr	r2, [sp, #20]
 800850e:	462b      	mov	r3, r5
 8008510:	bfa8      	it	ge
 8008512:	4643      	movge	r3, r8
 8008514:	1ad2      	subs	r2, r2, r3
 8008516:	9205      	str	r2, [sp, #20]
 8008518:	1aed      	subs	r5, r5, r3
 800851a:	eba8 0803 	sub.w	r8, r8, r3
 800851e:	9b07      	ldr	r3, [sp, #28]
 8008520:	b1eb      	cbz	r3, 800855e <_dtoa_r+0x76e>
 8008522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008524:	2b00      	cmp	r3, #0
 8008526:	d067      	beq.n	80085f8 <_dtoa_r+0x808>
 8008528:	b18f      	cbz	r7, 800854e <_dtoa_r+0x75e>
 800852a:	4631      	mov	r1, r6
 800852c:	463a      	mov	r2, r7
 800852e:	4620      	mov	r0, r4
 8008530:	f000 ff1c 	bl	800936c <__pow5mult>
 8008534:	9a04      	ldr	r2, [sp, #16]
 8008536:	4601      	mov	r1, r0
 8008538:	4606      	mov	r6, r0
 800853a:	4620      	mov	r0, r4
 800853c:	f000 fe7f 	bl	800923e <__multiply>
 8008540:	9904      	ldr	r1, [sp, #16]
 8008542:	9008      	str	r0, [sp, #32]
 8008544:	4620      	mov	r0, r4
 8008546:	f000 fd93 	bl	8009070 <_Bfree>
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	9304      	str	r3, [sp, #16]
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	1bda      	subs	r2, r3, r7
 8008552:	d004      	beq.n	800855e <_dtoa_r+0x76e>
 8008554:	9904      	ldr	r1, [sp, #16]
 8008556:	4620      	mov	r0, r4
 8008558:	f000 ff08 	bl	800936c <__pow5mult>
 800855c:	9004      	str	r0, [sp, #16]
 800855e:	2101      	movs	r1, #1
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fe63 	bl	800922c <__i2b>
 8008566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008568:	4607      	mov	r7, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 81d0 	beq.w	8008910 <_dtoa_r+0xb20>
 8008570:	461a      	mov	r2, r3
 8008572:	4601      	mov	r1, r0
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fef9 	bl	800936c <__pow5mult>
 800857a:	9b06      	ldr	r3, [sp, #24]
 800857c:	2b01      	cmp	r3, #1
 800857e:	4607      	mov	r7, r0
 8008580:	dc40      	bgt.n	8008604 <_dtoa_r+0x814>
 8008582:	9b00      	ldr	r3, [sp, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d139      	bne.n	80085fc <_dtoa_r+0x80c>
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800858e:	2b00      	cmp	r3, #0
 8008590:	d136      	bne.n	8008600 <_dtoa_r+0x810>
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008598:	0d1b      	lsrs	r3, r3, #20
 800859a:	051b      	lsls	r3, r3, #20
 800859c:	b12b      	cbz	r3, 80085aa <_dtoa_r+0x7ba>
 800859e:	9b05      	ldr	r3, [sp, #20]
 80085a0:	3301      	adds	r3, #1
 80085a2:	9305      	str	r3, [sp, #20]
 80085a4:	f108 0801 	add.w	r8, r8, #1
 80085a8:	2301      	movs	r3, #1
 80085aa:	9307      	str	r3, [sp, #28]
 80085ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d12a      	bne.n	8008608 <_dtoa_r+0x818>
 80085b2:	2001      	movs	r0, #1
 80085b4:	e030      	b.n	8008618 <_dtoa_r+0x828>
 80085b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085bc:	e795      	b.n	80084ea <_dtoa_r+0x6fa>
 80085be:	9b07      	ldr	r3, [sp, #28]
 80085c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80085c4:	42bb      	cmp	r3, r7
 80085c6:	bfbf      	itttt	lt
 80085c8:	9b07      	ldrlt	r3, [sp, #28]
 80085ca:	9707      	strlt	r7, [sp, #28]
 80085cc:	1afa      	sublt	r2, r7, r3
 80085ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80085d0:	bfbb      	ittet	lt
 80085d2:	189b      	addlt	r3, r3, r2
 80085d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085d6:	1bdf      	subge	r7, r3, r7
 80085d8:	2700      	movlt	r7, #0
 80085da:	f1b9 0f00 	cmp.w	r9, #0
 80085de:	bfb5      	itete	lt
 80085e0:	9b05      	ldrlt	r3, [sp, #20]
 80085e2:	9d05      	ldrge	r5, [sp, #20]
 80085e4:	eba3 0509 	sublt.w	r5, r3, r9
 80085e8:	464b      	movge	r3, r9
 80085ea:	bfb8      	it	lt
 80085ec:	2300      	movlt	r3, #0
 80085ee:	e77e      	b.n	80084ee <_dtoa_r+0x6fe>
 80085f0:	9f07      	ldr	r7, [sp, #28]
 80085f2:	9d05      	ldr	r5, [sp, #20]
 80085f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80085f6:	e783      	b.n	8008500 <_dtoa_r+0x710>
 80085f8:	9a07      	ldr	r2, [sp, #28]
 80085fa:	e7ab      	b.n	8008554 <_dtoa_r+0x764>
 80085fc:	2300      	movs	r3, #0
 80085fe:	e7d4      	b.n	80085aa <_dtoa_r+0x7ba>
 8008600:	9b00      	ldr	r3, [sp, #0]
 8008602:	e7d2      	b.n	80085aa <_dtoa_r+0x7ba>
 8008604:	2300      	movs	r3, #0
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800860e:	6918      	ldr	r0, [r3, #16]
 8008610:	f000 fdbe 	bl	8009190 <__hi0bits>
 8008614:	f1c0 0020 	rsb	r0, r0, #32
 8008618:	4440      	add	r0, r8
 800861a:	f010 001f 	ands.w	r0, r0, #31
 800861e:	d047      	beq.n	80086b0 <_dtoa_r+0x8c0>
 8008620:	f1c0 0320 	rsb	r3, r0, #32
 8008624:	2b04      	cmp	r3, #4
 8008626:	dd3b      	ble.n	80086a0 <_dtoa_r+0x8b0>
 8008628:	9b05      	ldr	r3, [sp, #20]
 800862a:	f1c0 001c 	rsb	r0, r0, #28
 800862e:	4403      	add	r3, r0
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	4405      	add	r5, r0
 8008634:	4480      	add	r8, r0
 8008636:	9b05      	ldr	r3, [sp, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	dd05      	ble.n	8008648 <_dtoa_r+0x858>
 800863c:	461a      	mov	r2, r3
 800863e:	9904      	ldr	r1, [sp, #16]
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fee1 	bl	8009408 <__lshift>
 8008646:	9004      	str	r0, [sp, #16]
 8008648:	f1b8 0f00 	cmp.w	r8, #0
 800864c:	dd05      	ble.n	800865a <_dtoa_r+0x86a>
 800864e:	4639      	mov	r1, r7
 8008650:	4642      	mov	r2, r8
 8008652:	4620      	mov	r0, r4
 8008654:	f000 fed8 	bl	8009408 <__lshift>
 8008658:	4607      	mov	r7, r0
 800865a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800865c:	b353      	cbz	r3, 80086b4 <_dtoa_r+0x8c4>
 800865e:	4639      	mov	r1, r7
 8008660:	9804      	ldr	r0, [sp, #16]
 8008662:	f000 ff25 	bl	80094b0 <__mcmp>
 8008666:	2800      	cmp	r0, #0
 8008668:	da24      	bge.n	80086b4 <_dtoa_r+0x8c4>
 800866a:	2300      	movs	r3, #0
 800866c:	220a      	movs	r2, #10
 800866e:	9904      	ldr	r1, [sp, #16]
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fd14 	bl	800909e <__multadd>
 8008676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008678:	9004      	str	r0, [sp, #16]
 800867a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 814d 	beq.w	800891e <_dtoa_r+0xb2e>
 8008684:	2300      	movs	r3, #0
 8008686:	4631      	mov	r1, r6
 8008688:	220a      	movs	r2, #10
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fd07 	bl	800909e <__multadd>
 8008690:	9b02      	ldr	r3, [sp, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	4606      	mov	r6, r0
 8008696:	dc4f      	bgt.n	8008738 <_dtoa_r+0x948>
 8008698:	9b06      	ldr	r3, [sp, #24]
 800869a:	2b02      	cmp	r3, #2
 800869c:	dd4c      	ble.n	8008738 <_dtoa_r+0x948>
 800869e:	e011      	b.n	80086c4 <_dtoa_r+0x8d4>
 80086a0:	d0c9      	beq.n	8008636 <_dtoa_r+0x846>
 80086a2:	9a05      	ldr	r2, [sp, #20]
 80086a4:	331c      	adds	r3, #28
 80086a6:	441a      	add	r2, r3
 80086a8:	9205      	str	r2, [sp, #20]
 80086aa:	441d      	add	r5, r3
 80086ac:	4498      	add	r8, r3
 80086ae:	e7c2      	b.n	8008636 <_dtoa_r+0x846>
 80086b0:	4603      	mov	r3, r0
 80086b2:	e7f6      	b.n	80086a2 <_dtoa_r+0x8b2>
 80086b4:	f1b9 0f00 	cmp.w	r9, #0
 80086b8:	dc38      	bgt.n	800872c <_dtoa_r+0x93c>
 80086ba:	9b06      	ldr	r3, [sp, #24]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	dd35      	ble.n	800872c <_dtoa_r+0x93c>
 80086c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	b963      	cbnz	r3, 80086e2 <_dtoa_r+0x8f2>
 80086c8:	4639      	mov	r1, r7
 80086ca:	2205      	movs	r2, #5
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 fce6 	bl	800909e <__multadd>
 80086d2:	4601      	mov	r1, r0
 80086d4:	4607      	mov	r7, r0
 80086d6:	9804      	ldr	r0, [sp, #16]
 80086d8:	f000 feea 	bl	80094b0 <__mcmp>
 80086dc:	2800      	cmp	r0, #0
 80086de:	f73f adcc 	bgt.w	800827a <_dtoa_r+0x48a>
 80086e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e4:	465d      	mov	r5, fp
 80086e6:	ea6f 0a03 	mvn.w	sl, r3
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	4639      	mov	r1, r7
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 fcbd 	bl	8009070 <_Bfree>
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	f43f aeb7 	beq.w	800846a <_dtoa_r+0x67a>
 80086fc:	f1b9 0f00 	cmp.w	r9, #0
 8008700:	d005      	beq.n	800870e <_dtoa_r+0x91e>
 8008702:	45b1      	cmp	r9, r6
 8008704:	d003      	beq.n	800870e <_dtoa_r+0x91e>
 8008706:	4649      	mov	r1, r9
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fcb1 	bl	8009070 <_Bfree>
 800870e:	4631      	mov	r1, r6
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fcad 	bl	8009070 <_Bfree>
 8008716:	e6a8      	b.n	800846a <_dtoa_r+0x67a>
 8008718:	2700      	movs	r7, #0
 800871a:	463e      	mov	r6, r7
 800871c:	e7e1      	b.n	80086e2 <_dtoa_r+0x8f2>
 800871e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008722:	463e      	mov	r6, r7
 8008724:	e5a9      	b.n	800827a <_dtoa_r+0x48a>
 8008726:	bf00      	nop
 8008728:	40240000 	.word	0x40240000
 800872c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 80fa 	beq.w	800892c <_dtoa_r+0xb3c>
 8008738:	2d00      	cmp	r5, #0
 800873a:	dd05      	ble.n	8008748 <_dtoa_r+0x958>
 800873c:	4631      	mov	r1, r6
 800873e:	462a      	mov	r2, r5
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fe61 	bl	8009408 <__lshift>
 8008746:	4606      	mov	r6, r0
 8008748:	9b07      	ldr	r3, [sp, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d04c      	beq.n	80087e8 <_dtoa_r+0x9f8>
 800874e:	6871      	ldr	r1, [r6, #4]
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fc59 	bl	8009008 <_Balloc>
 8008756:	6932      	ldr	r2, [r6, #16]
 8008758:	3202      	adds	r2, #2
 800875a:	4605      	mov	r5, r0
 800875c:	0092      	lsls	r2, r2, #2
 800875e:	f106 010c 	add.w	r1, r6, #12
 8008762:	300c      	adds	r0, #12
 8008764:	f7fd fd90 	bl	8006288 <memcpy>
 8008768:	2201      	movs	r2, #1
 800876a:	4629      	mov	r1, r5
 800876c:	4620      	mov	r0, r4
 800876e:	f000 fe4b 	bl	8009408 <__lshift>
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	f8cd b014 	str.w	fp, [sp, #20]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	46b1      	mov	r9, r6
 800877e:	9307      	str	r3, [sp, #28]
 8008780:	4606      	mov	r6, r0
 8008782:	4639      	mov	r1, r7
 8008784:	9804      	ldr	r0, [sp, #16]
 8008786:	f7ff faa5 	bl	8007cd4 <quorem>
 800878a:	4649      	mov	r1, r9
 800878c:	4605      	mov	r5, r0
 800878e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008792:	9804      	ldr	r0, [sp, #16]
 8008794:	f000 fe8c 	bl	80094b0 <__mcmp>
 8008798:	4632      	mov	r2, r6
 800879a:	9000      	str	r0, [sp, #0]
 800879c:	4639      	mov	r1, r7
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 fea0 	bl	80094e4 <__mdiff>
 80087a4:	68c3      	ldr	r3, [r0, #12]
 80087a6:	4602      	mov	r2, r0
 80087a8:	bb03      	cbnz	r3, 80087ec <_dtoa_r+0x9fc>
 80087aa:	4601      	mov	r1, r0
 80087ac:	9008      	str	r0, [sp, #32]
 80087ae:	9804      	ldr	r0, [sp, #16]
 80087b0:	f000 fe7e 	bl	80094b0 <__mcmp>
 80087b4:	9a08      	ldr	r2, [sp, #32]
 80087b6:	4603      	mov	r3, r0
 80087b8:	4611      	mov	r1, r2
 80087ba:	4620      	mov	r0, r4
 80087bc:	9308      	str	r3, [sp, #32]
 80087be:	f000 fc57 	bl	8009070 <_Bfree>
 80087c2:	9b08      	ldr	r3, [sp, #32]
 80087c4:	b9a3      	cbnz	r3, 80087f0 <_dtoa_r+0xa00>
 80087c6:	9a06      	ldr	r2, [sp, #24]
 80087c8:	b992      	cbnz	r2, 80087f0 <_dtoa_r+0xa00>
 80087ca:	9a07      	ldr	r2, [sp, #28]
 80087cc:	b982      	cbnz	r2, 80087f0 <_dtoa_r+0xa00>
 80087ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087d2:	d029      	beq.n	8008828 <_dtoa_r+0xa38>
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dd01      	ble.n	80087de <_dtoa_r+0x9ee>
 80087da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	1c5d      	adds	r5, r3, #1
 80087e2:	f883 8000 	strb.w	r8, [r3]
 80087e6:	e782      	b.n	80086ee <_dtoa_r+0x8fe>
 80087e8:	4630      	mov	r0, r6
 80087ea:	e7c2      	b.n	8008772 <_dtoa_r+0x982>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e7e3      	b.n	80087b8 <_dtoa_r+0x9c8>
 80087f0:	9a00      	ldr	r2, [sp, #0]
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	db04      	blt.n	8008800 <_dtoa_r+0xa10>
 80087f6:	d125      	bne.n	8008844 <_dtoa_r+0xa54>
 80087f8:	9a06      	ldr	r2, [sp, #24]
 80087fa:	bb1a      	cbnz	r2, 8008844 <_dtoa_r+0xa54>
 80087fc:	9a07      	ldr	r2, [sp, #28]
 80087fe:	bb0a      	cbnz	r2, 8008844 <_dtoa_r+0xa54>
 8008800:	2b00      	cmp	r3, #0
 8008802:	ddec      	ble.n	80087de <_dtoa_r+0x9ee>
 8008804:	2201      	movs	r2, #1
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fdfd 	bl	8009408 <__lshift>
 800880e:	4639      	mov	r1, r7
 8008810:	9004      	str	r0, [sp, #16]
 8008812:	f000 fe4d 	bl	80094b0 <__mcmp>
 8008816:	2800      	cmp	r0, #0
 8008818:	dc03      	bgt.n	8008822 <_dtoa_r+0xa32>
 800881a:	d1e0      	bne.n	80087de <_dtoa_r+0x9ee>
 800881c:	f018 0f01 	tst.w	r8, #1
 8008820:	d0dd      	beq.n	80087de <_dtoa_r+0x9ee>
 8008822:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008826:	d1d8      	bne.n	80087da <_dtoa_r+0x9ea>
 8008828:	9b05      	ldr	r3, [sp, #20]
 800882a:	9a05      	ldr	r2, [sp, #20]
 800882c:	1c5d      	adds	r5, r3, #1
 800882e:	2339      	movs	r3, #57	; 0x39
 8008830:	7013      	strb	r3, [r2, #0]
 8008832:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008836:	2b39      	cmp	r3, #57	; 0x39
 8008838:	f105 32ff 	add.w	r2, r5, #4294967295
 800883c:	d04f      	beq.n	80088de <_dtoa_r+0xaee>
 800883e:	3301      	adds	r3, #1
 8008840:	7013      	strb	r3, [r2, #0]
 8008842:	e754      	b.n	80086ee <_dtoa_r+0x8fe>
 8008844:	9a05      	ldr	r2, [sp, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f102 0501 	add.w	r5, r2, #1
 800884c:	dd06      	ble.n	800885c <_dtoa_r+0xa6c>
 800884e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008852:	d0e9      	beq.n	8008828 <_dtoa_r+0xa38>
 8008854:	f108 0801 	add.w	r8, r8, #1
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	e7c2      	b.n	80087e2 <_dtoa_r+0x9f2>
 800885c:	9a02      	ldr	r2, [sp, #8]
 800885e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008862:	eba5 030b 	sub.w	r3, r5, fp
 8008866:	4293      	cmp	r3, r2
 8008868:	d021      	beq.n	80088ae <_dtoa_r+0xabe>
 800886a:	2300      	movs	r3, #0
 800886c:	220a      	movs	r2, #10
 800886e:	9904      	ldr	r1, [sp, #16]
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fc14 	bl	800909e <__multadd>
 8008876:	45b1      	cmp	r9, r6
 8008878:	9004      	str	r0, [sp, #16]
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	f04f 020a 	mov.w	r2, #10
 8008882:	4649      	mov	r1, r9
 8008884:	4620      	mov	r0, r4
 8008886:	d105      	bne.n	8008894 <_dtoa_r+0xaa4>
 8008888:	f000 fc09 	bl	800909e <__multadd>
 800888c:	4681      	mov	r9, r0
 800888e:	4606      	mov	r6, r0
 8008890:	9505      	str	r5, [sp, #20]
 8008892:	e776      	b.n	8008782 <_dtoa_r+0x992>
 8008894:	f000 fc03 	bl	800909e <__multadd>
 8008898:	4631      	mov	r1, r6
 800889a:	4681      	mov	r9, r0
 800889c:	2300      	movs	r3, #0
 800889e:	220a      	movs	r2, #10
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fbfc 	bl	800909e <__multadd>
 80088a6:	4606      	mov	r6, r0
 80088a8:	e7f2      	b.n	8008890 <_dtoa_r+0xaa0>
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	2201      	movs	r2, #1
 80088b0:	9904      	ldr	r1, [sp, #16]
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 fda8 	bl	8009408 <__lshift>
 80088b8:	4639      	mov	r1, r7
 80088ba:	9004      	str	r0, [sp, #16]
 80088bc:	f000 fdf8 	bl	80094b0 <__mcmp>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	dcb6      	bgt.n	8008832 <_dtoa_r+0xa42>
 80088c4:	d102      	bne.n	80088cc <_dtoa_r+0xadc>
 80088c6:	f018 0f01 	tst.w	r8, #1
 80088ca:	d1b2      	bne.n	8008832 <_dtoa_r+0xa42>
 80088cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088d0:	2b30      	cmp	r3, #48	; 0x30
 80088d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80088d6:	f47f af0a 	bne.w	80086ee <_dtoa_r+0x8fe>
 80088da:	4615      	mov	r5, r2
 80088dc:	e7f6      	b.n	80088cc <_dtoa_r+0xadc>
 80088de:	4593      	cmp	fp, r2
 80088e0:	d105      	bne.n	80088ee <_dtoa_r+0xafe>
 80088e2:	2331      	movs	r3, #49	; 0x31
 80088e4:	f10a 0a01 	add.w	sl, sl, #1
 80088e8:	f88b 3000 	strb.w	r3, [fp]
 80088ec:	e6ff      	b.n	80086ee <_dtoa_r+0x8fe>
 80088ee:	4615      	mov	r5, r2
 80088f0:	e79f      	b.n	8008832 <_dtoa_r+0xa42>
 80088f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008958 <_dtoa_r+0xb68>
 80088f6:	e007      	b.n	8008908 <_dtoa_r+0xb18>
 80088f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800895c <_dtoa_r+0xb6c>
 80088fe:	b11b      	cbz	r3, 8008908 <_dtoa_r+0xb18>
 8008900:	f10b 0308 	add.w	r3, fp, #8
 8008904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4658      	mov	r0, fp
 800890a:	b017      	add	sp, #92	; 0x5c
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	2b01      	cmp	r3, #1
 8008914:	f77f ae35 	ble.w	8008582 <_dtoa_r+0x792>
 8008918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	e649      	b.n	80085b2 <_dtoa_r+0x7c2>
 800891e:	9b02      	ldr	r3, [sp, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	dc03      	bgt.n	800892c <_dtoa_r+0xb3c>
 8008924:	9b06      	ldr	r3, [sp, #24]
 8008926:	2b02      	cmp	r3, #2
 8008928:	f73f aecc 	bgt.w	80086c4 <_dtoa_r+0x8d4>
 800892c:	465d      	mov	r5, fp
 800892e:	4639      	mov	r1, r7
 8008930:	9804      	ldr	r0, [sp, #16]
 8008932:	f7ff f9cf 	bl	8007cd4 <quorem>
 8008936:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800893a:	f805 8b01 	strb.w	r8, [r5], #1
 800893e:	9a02      	ldr	r2, [sp, #8]
 8008940:	eba5 030b 	sub.w	r3, r5, fp
 8008944:	429a      	cmp	r2, r3
 8008946:	ddb0      	ble.n	80088aa <_dtoa_r+0xaba>
 8008948:	2300      	movs	r3, #0
 800894a:	220a      	movs	r2, #10
 800894c:	9904      	ldr	r1, [sp, #16]
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fba5 	bl	800909e <__multadd>
 8008954:	9004      	str	r0, [sp, #16]
 8008956:	e7ea      	b.n	800892e <_dtoa_r+0xb3e>
 8008958:	0800ada8 	.word	0x0800ada8
 800895c:	0800ae28 	.word	0x0800ae28

08008960 <rshift>:
 8008960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008962:	6906      	ldr	r6, [r0, #16]
 8008964:	114b      	asrs	r3, r1, #5
 8008966:	429e      	cmp	r6, r3
 8008968:	f100 0414 	add.w	r4, r0, #20
 800896c:	dd30      	ble.n	80089d0 <rshift+0x70>
 800896e:	f011 011f 	ands.w	r1, r1, #31
 8008972:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008976:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800897a:	d108      	bne.n	800898e <rshift+0x2e>
 800897c:	4621      	mov	r1, r4
 800897e:	42b2      	cmp	r2, r6
 8008980:	460b      	mov	r3, r1
 8008982:	d211      	bcs.n	80089a8 <rshift+0x48>
 8008984:	f852 3b04 	ldr.w	r3, [r2], #4
 8008988:	f841 3b04 	str.w	r3, [r1], #4
 800898c:	e7f7      	b.n	800897e <rshift+0x1e>
 800898e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008992:	f1c1 0c20 	rsb	ip, r1, #32
 8008996:	40cd      	lsrs	r5, r1
 8008998:	3204      	adds	r2, #4
 800899a:	4623      	mov	r3, r4
 800899c:	42b2      	cmp	r2, r6
 800899e:	4617      	mov	r7, r2
 80089a0:	d30c      	bcc.n	80089bc <rshift+0x5c>
 80089a2:	601d      	str	r5, [r3, #0]
 80089a4:	b105      	cbz	r5, 80089a8 <rshift+0x48>
 80089a6:	3304      	adds	r3, #4
 80089a8:	1b1a      	subs	r2, r3, r4
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089b0:	bf08      	it	eq
 80089b2:	2300      	moveq	r3, #0
 80089b4:	6102      	str	r2, [r0, #16]
 80089b6:	bf08      	it	eq
 80089b8:	6143      	streq	r3, [r0, #20]
 80089ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089bc:	683f      	ldr	r7, [r7, #0]
 80089be:	fa07 f70c 	lsl.w	r7, r7, ip
 80089c2:	433d      	orrs	r5, r7
 80089c4:	f843 5b04 	str.w	r5, [r3], #4
 80089c8:	f852 5b04 	ldr.w	r5, [r2], #4
 80089cc:	40cd      	lsrs	r5, r1
 80089ce:	e7e5      	b.n	800899c <rshift+0x3c>
 80089d0:	4623      	mov	r3, r4
 80089d2:	e7e9      	b.n	80089a8 <rshift+0x48>

080089d4 <__hexdig_fun>:
 80089d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089d8:	2b09      	cmp	r3, #9
 80089da:	d802      	bhi.n	80089e2 <__hexdig_fun+0xe>
 80089dc:	3820      	subs	r0, #32
 80089de:	b2c0      	uxtb	r0, r0
 80089e0:	4770      	bx	lr
 80089e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	d801      	bhi.n	80089ee <__hexdig_fun+0x1a>
 80089ea:	3847      	subs	r0, #71	; 0x47
 80089ec:	e7f7      	b.n	80089de <__hexdig_fun+0xa>
 80089ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	d801      	bhi.n	80089fa <__hexdig_fun+0x26>
 80089f6:	3827      	subs	r0, #39	; 0x27
 80089f8:	e7f1      	b.n	80089de <__hexdig_fun+0xa>
 80089fa:	2000      	movs	r0, #0
 80089fc:	4770      	bx	lr

080089fe <__gethex>:
 80089fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a02:	b08b      	sub	sp, #44	; 0x2c
 8008a04:	468a      	mov	sl, r1
 8008a06:	9002      	str	r0, [sp, #8]
 8008a08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008a0a:	9306      	str	r3, [sp, #24]
 8008a0c:	4690      	mov	r8, r2
 8008a0e:	f000 fad0 	bl	8008fb2 <__localeconv_l>
 8008a12:	6803      	ldr	r3, [r0, #0]
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7f7 fbe2 	bl	80001e0 <strlen>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	9001      	str	r0, [sp, #4]
 8008a20:	4403      	add	r3, r0
 8008a22:	f04f 0b00 	mov.w	fp, #0
 8008a26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a2a:	9307      	str	r3, [sp, #28]
 8008a2c:	f8da 3000 	ldr.w	r3, [sl]
 8008a30:	3302      	adds	r3, #2
 8008a32:	461f      	mov	r7, r3
 8008a34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a38:	2830      	cmp	r0, #48	; 0x30
 8008a3a:	d06c      	beq.n	8008b16 <__gethex+0x118>
 8008a3c:	f7ff ffca 	bl	80089d4 <__hexdig_fun>
 8008a40:	4604      	mov	r4, r0
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d16a      	bne.n	8008b1c <__gethex+0x11e>
 8008a46:	9a01      	ldr	r2, [sp, #4]
 8008a48:	9903      	ldr	r1, [sp, #12]
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f001 f8f4 	bl	8009c38 <strncmp>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d166      	bne.n	8008b22 <__gethex+0x124>
 8008a54:	9b01      	ldr	r3, [sp, #4]
 8008a56:	5cf8      	ldrb	r0, [r7, r3]
 8008a58:	18fe      	adds	r6, r7, r3
 8008a5a:	f7ff ffbb 	bl	80089d4 <__hexdig_fun>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d062      	beq.n	8008b28 <__gethex+0x12a>
 8008a62:	4633      	mov	r3, r6
 8008a64:	7818      	ldrb	r0, [r3, #0]
 8008a66:	2830      	cmp	r0, #48	; 0x30
 8008a68:	461f      	mov	r7, r3
 8008a6a:	f103 0301 	add.w	r3, r3, #1
 8008a6e:	d0f9      	beq.n	8008a64 <__gethex+0x66>
 8008a70:	f7ff ffb0 	bl	80089d4 <__hexdig_fun>
 8008a74:	fab0 f580 	clz	r5, r0
 8008a78:	096d      	lsrs	r5, r5, #5
 8008a7a:	4634      	mov	r4, r6
 8008a7c:	f04f 0b01 	mov.w	fp, #1
 8008a80:	463a      	mov	r2, r7
 8008a82:	4616      	mov	r6, r2
 8008a84:	3201      	adds	r2, #1
 8008a86:	7830      	ldrb	r0, [r6, #0]
 8008a88:	f7ff ffa4 	bl	80089d4 <__hexdig_fun>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d1f8      	bne.n	8008a82 <__gethex+0x84>
 8008a90:	9a01      	ldr	r2, [sp, #4]
 8008a92:	9903      	ldr	r1, [sp, #12]
 8008a94:	4630      	mov	r0, r6
 8008a96:	f001 f8cf 	bl	8009c38 <strncmp>
 8008a9a:	b950      	cbnz	r0, 8008ab2 <__gethex+0xb4>
 8008a9c:	b954      	cbnz	r4, 8008ab4 <__gethex+0xb6>
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	18f4      	adds	r4, r6, r3
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	3201      	adds	r2, #1
 8008aa8:	7830      	ldrb	r0, [r6, #0]
 8008aaa:	f7ff ff93 	bl	80089d4 <__hexdig_fun>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d1f8      	bne.n	8008aa4 <__gethex+0xa6>
 8008ab2:	b10c      	cbz	r4, 8008ab8 <__gethex+0xba>
 8008ab4:	1ba4      	subs	r4, r4, r6
 8008ab6:	00a4      	lsls	r4, r4, #2
 8008ab8:	7833      	ldrb	r3, [r6, #0]
 8008aba:	2b50      	cmp	r3, #80	; 0x50
 8008abc:	d001      	beq.n	8008ac2 <__gethex+0xc4>
 8008abe:	2b70      	cmp	r3, #112	; 0x70
 8008ac0:	d140      	bne.n	8008b44 <__gethex+0x146>
 8008ac2:	7873      	ldrb	r3, [r6, #1]
 8008ac4:	2b2b      	cmp	r3, #43	; 0x2b
 8008ac6:	d031      	beq.n	8008b2c <__gethex+0x12e>
 8008ac8:	2b2d      	cmp	r3, #45	; 0x2d
 8008aca:	d033      	beq.n	8008b34 <__gethex+0x136>
 8008acc:	1c71      	adds	r1, r6, #1
 8008ace:	f04f 0900 	mov.w	r9, #0
 8008ad2:	7808      	ldrb	r0, [r1, #0]
 8008ad4:	f7ff ff7e 	bl	80089d4 <__hexdig_fun>
 8008ad8:	1e43      	subs	r3, r0, #1
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b18      	cmp	r3, #24
 8008ade:	d831      	bhi.n	8008b44 <__gethex+0x146>
 8008ae0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ae4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ae8:	f7ff ff74 	bl	80089d4 <__hexdig_fun>
 8008aec:	1e43      	subs	r3, r0, #1
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b18      	cmp	r3, #24
 8008af2:	d922      	bls.n	8008b3a <__gethex+0x13c>
 8008af4:	f1b9 0f00 	cmp.w	r9, #0
 8008af8:	d000      	beq.n	8008afc <__gethex+0xfe>
 8008afa:	4252      	negs	r2, r2
 8008afc:	4414      	add	r4, r2
 8008afe:	f8ca 1000 	str.w	r1, [sl]
 8008b02:	b30d      	cbz	r5, 8008b48 <__gethex+0x14a>
 8008b04:	f1bb 0f00 	cmp.w	fp, #0
 8008b08:	bf0c      	ite	eq
 8008b0a:	2706      	moveq	r7, #6
 8008b0c:	2700      	movne	r7, #0
 8008b0e:	4638      	mov	r0, r7
 8008b10:	b00b      	add	sp, #44	; 0x2c
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	f10b 0b01 	add.w	fp, fp, #1
 8008b1a:	e78a      	b.n	8008a32 <__gethex+0x34>
 8008b1c:	2500      	movs	r5, #0
 8008b1e:	462c      	mov	r4, r5
 8008b20:	e7ae      	b.n	8008a80 <__gethex+0x82>
 8008b22:	463e      	mov	r6, r7
 8008b24:	2501      	movs	r5, #1
 8008b26:	e7c7      	b.n	8008ab8 <__gethex+0xba>
 8008b28:	4604      	mov	r4, r0
 8008b2a:	e7fb      	b.n	8008b24 <__gethex+0x126>
 8008b2c:	f04f 0900 	mov.w	r9, #0
 8008b30:	1cb1      	adds	r1, r6, #2
 8008b32:	e7ce      	b.n	8008ad2 <__gethex+0xd4>
 8008b34:	f04f 0901 	mov.w	r9, #1
 8008b38:	e7fa      	b.n	8008b30 <__gethex+0x132>
 8008b3a:	230a      	movs	r3, #10
 8008b3c:	fb03 0202 	mla	r2, r3, r2, r0
 8008b40:	3a10      	subs	r2, #16
 8008b42:	e7cf      	b.n	8008ae4 <__gethex+0xe6>
 8008b44:	4631      	mov	r1, r6
 8008b46:	e7da      	b.n	8008afe <__gethex+0x100>
 8008b48:	1bf3      	subs	r3, r6, r7
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	2b07      	cmp	r3, #7
 8008b50:	dc49      	bgt.n	8008be6 <__gethex+0x1e8>
 8008b52:	9802      	ldr	r0, [sp, #8]
 8008b54:	f000 fa58 	bl	8009008 <_Balloc>
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	f100 0914 	add.w	r9, r0, #20
 8008b5e:	f04f 0b00 	mov.w	fp, #0
 8008b62:	f1c3 0301 	rsb	r3, r3, #1
 8008b66:	4605      	mov	r5, r0
 8008b68:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b6c:	46da      	mov	sl, fp
 8008b6e:	9308      	str	r3, [sp, #32]
 8008b70:	42b7      	cmp	r7, r6
 8008b72:	d33b      	bcc.n	8008bec <__gethex+0x1ee>
 8008b74:	9804      	ldr	r0, [sp, #16]
 8008b76:	f840 ab04 	str.w	sl, [r0], #4
 8008b7a:	eba0 0009 	sub.w	r0, r0, r9
 8008b7e:	1080      	asrs	r0, r0, #2
 8008b80:	6128      	str	r0, [r5, #16]
 8008b82:	0147      	lsls	r7, r0, #5
 8008b84:	4650      	mov	r0, sl
 8008b86:	f000 fb03 	bl	8009190 <__hi0bits>
 8008b8a:	f8d8 6000 	ldr.w	r6, [r8]
 8008b8e:	1a3f      	subs	r7, r7, r0
 8008b90:	42b7      	cmp	r7, r6
 8008b92:	dd64      	ble.n	8008c5e <__gethex+0x260>
 8008b94:	1bbf      	subs	r7, r7, r6
 8008b96:	4639      	mov	r1, r7
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 fe13 	bl	80097c4 <__any_on>
 8008b9e:	4682      	mov	sl, r0
 8008ba0:	b178      	cbz	r0, 8008bc2 <__gethex+0x1c4>
 8008ba2:	1e7b      	subs	r3, r7, #1
 8008ba4:	1159      	asrs	r1, r3, #5
 8008ba6:	f003 021f 	and.w	r2, r3, #31
 8008baa:	f04f 0a01 	mov.w	sl, #1
 8008bae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bb2:	fa0a f202 	lsl.w	r2, sl, r2
 8008bb6:	420a      	tst	r2, r1
 8008bb8:	d003      	beq.n	8008bc2 <__gethex+0x1c4>
 8008bba:	4553      	cmp	r3, sl
 8008bbc:	dc46      	bgt.n	8008c4c <__gethex+0x24e>
 8008bbe:	f04f 0a02 	mov.w	sl, #2
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f7ff fecb 	bl	8008960 <rshift>
 8008bca:	443c      	add	r4, r7
 8008bcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	da52      	bge.n	8008c7a <__gethex+0x27c>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	9802      	ldr	r0, [sp, #8]
 8008bd8:	f000 fa4a 	bl	8009070 <_Bfree>
 8008bdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bde:	2300      	movs	r3, #0
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	27a3      	movs	r7, #163	; 0xa3
 8008be4:	e793      	b.n	8008b0e <__gethex+0x110>
 8008be6:	3101      	adds	r1, #1
 8008be8:	105b      	asrs	r3, r3, #1
 8008bea:	e7b0      	b.n	8008b4e <__gethex+0x150>
 8008bec:	1e73      	subs	r3, r6, #1
 8008bee:	9305      	str	r3, [sp, #20]
 8008bf0:	9a07      	ldr	r2, [sp, #28]
 8008bf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d018      	beq.n	8008c2c <__gethex+0x22e>
 8008bfa:	f1bb 0f20 	cmp.w	fp, #32
 8008bfe:	d107      	bne.n	8008c10 <__gethex+0x212>
 8008c00:	9b04      	ldr	r3, [sp, #16]
 8008c02:	f8c3 a000 	str.w	sl, [r3]
 8008c06:	3304      	adds	r3, #4
 8008c08:	f04f 0a00 	mov.w	sl, #0
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	46d3      	mov	fp, sl
 8008c10:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c14:	f7ff fede 	bl	80089d4 <__hexdig_fun>
 8008c18:	f000 000f 	and.w	r0, r0, #15
 8008c1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c20:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c24:	f10b 0b04 	add.w	fp, fp, #4
 8008c28:	9b05      	ldr	r3, [sp, #20]
 8008c2a:	e00d      	b.n	8008c48 <__gethex+0x24a>
 8008c2c:	9b05      	ldr	r3, [sp, #20]
 8008c2e:	9a08      	ldr	r2, [sp, #32]
 8008c30:	4413      	add	r3, r2
 8008c32:	42bb      	cmp	r3, r7
 8008c34:	d3e1      	bcc.n	8008bfa <__gethex+0x1fc>
 8008c36:	4618      	mov	r0, r3
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	9903      	ldr	r1, [sp, #12]
 8008c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c3e:	f000 fffb 	bl	8009c38 <strncmp>
 8008c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d1d8      	bne.n	8008bfa <__gethex+0x1fc>
 8008c48:	461e      	mov	r6, r3
 8008c4a:	e791      	b.n	8008b70 <__gethex+0x172>
 8008c4c:	1eb9      	subs	r1, r7, #2
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 fdb8 	bl	80097c4 <__any_on>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d0b2      	beq.n	8008bbe <__gethex+0x1c0>
 8008c58:	f04f 0a03 	mov.w	sl, #3
 8008c5c:	e7b1      	b.n	8008bc2 <__gethex+0x1c4>
 8008c5e:	da09      	bge.n	8008c74 <__gethex+0x276>
 8008c60:	1bf7      	subs	r7, r6, r7
 8008c62:	4629      	mov	r1, r5
 8008c64:	463a      	mov	r2, r7
 8008c66:	9802      	ldr	r0, [sp, #8]
 8008c68:	f000 fbce 	bl	8009408 <__lshift>
 8008c6c:	1be4      	subs	r4, r4, r7
 8008c6e:	4605      	mov	r5, r0
 8008c70:	f100 0914 	add.w	r9, r0, #20
 8008c74:	f04f 0a00 	mov.w	sl, #0
 8008c78:	e7a8      	b.n	8008bcc <__gethex+0x1ce>
 8008c7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c7e:	42a0      	cmp	r0, r4
 8008c80:	dd6a      	ble.n	8008d58 <__gethex+0x35a>
 8008c82:	1b04      	subs	r4, r0, r4
 8008c84:	42a6      	cmp	r6, r4
 8008c86:	dc2e      	bgt.n	8008ce6 <__gethex+0x2e8>
 8008c88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d022      	beq.n	8008cd6 <__gethex+0x2d8>
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d024      	beq.n	8008cde <__gethex+0x2e0>
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d115      	bne.n	8008cc4 <__gethex+0x2c6>
 8008c98:	42a6      	cmp	r6, r4
 8008c9a:	d113      	bne.n	8008cc4 <__gethex+0x2c6>
 8008c9c:	2e01      	cmp	r6, #1
 8008c9e:	dc0b      	bgt.n	8008cb8 <__gethex+0x2ba>
 8008ca0:	9a06      	ldr	r2, [sp, #24]
 8008ca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	612b      	str	r3, [r5, #16]
 8008cac:	f8c9 3000 	str.w	r3, [r9]
 8008cb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cb2:	2762      	movs	r7, #98	; 0x62
 8008cb4:	601d      	str	r5, [r3, #0]
 8008cb6:	e72a      	b.n	8008b0e <__gethex+0x110>
 8008cb8:	1e71      	subs	r1, r6, #1
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 fd82 	bl	80097c4 <__any_on>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d1ed      	bne.n	8008ca0 <__gethex+0x2a2>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	9802      	ldr	r0, [sp, #8]
 8008cc8:	f000 f9d2 	bl	8009070 <_Bfree>
 8008ccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	2750      	movs	r7, #80	; 0x50
 8008cd4:	e71b      	b.n	8008b0e <__gethex+0x110>
 8008cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0e1      	beq.n	8008ca0 <__gethex+0x2a2>
 8008cdc:	e7f2      	b.n	8008cc4 <__gethex+0x2c6>
 8008cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1dd      	bne.n	8008ca0 <__gethex+0x2a2>
 8008ce4:	e7ee      	b.n	8008cc4 <__gethex+0x2c6>
 8008ce6:	1e67      	subs	r7, r4, #1
 8008ce8:	f1ba 0f00 	cmp.w	sl, #0
 8008cec:	d131      	bne.n	8008d52 <__gethex+0x354>
 8008cee:	b127      	cbz	r7, 8008cfa <__gethex+0x2fc>
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 fd66 	bl	80097c4 <__any_on>
 8008cf8:	4682      	mov	sl, r0
 8008cfa:	117a      	asrs	r2, r7, #5
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f007 071f 	and.w	r7, r7, #31
 8008d02:	fa03 f707 	lsl.w	r7, r3, r7
 8008d06:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	421f      	tst	r7, r3
 8008d0e:	4628      	mov	r0, r5
 8008d10:	bf18      	it	ne
 8008d12:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d16:	1b36      	subs	r6, r6, r4
 8008d18:	f7ff fe22 	bl	8008960 <rshift>
 8008d1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008d20:	2702      	movs	r7, #2
 8008d22:	f1ba 0f00 	cmp.w	sl, #0
 8008d26:	d048      	beq.n	8008dba <__gethex+0x3bc>
 8008d28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d015      	beq.n	8008d5c <__gethex+0x35e>
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d017      	beq.n	8008d64 <__gethex+0x366>
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d109      	bne.n	8008d4c <__gethex+0x34e>
 8008d38:	f01a 0f02 	tst.w	sl, #2
 8008d3c:	d006      	beq.n	8008d4c <__gethex+0x34e>
 8008d3e:	f8d9 3000 	ldr.w	r3, [r9]
 8008d42:	ea4a 0a03 	orr.w	sl, sl, r3
 8008d46:	f01a 0f01 	tst.w	sl, #1
 8008d4a:	d10e      	bne.n	8008d6a <__gethex+0x36c>
 8008d4c:	f047 0710 	orr.w	r7, r7, #16
 8008d50:	e033      	b.n	8008dba <__gethex+0x3bc>
 8008d52:	f04f 0a01 	mov.w	sl, #1
 8008d56:	e7d0      	b.n	8008cfa <__gethex+0x2fc>
 8008d58:	2701      	movs	r7, #1
 8008d5a:	e7e2      	b.n	8008d22 <__gethex+0x324>
 8008d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d5e:	f1c3 0301 	rsb	r3, r3, #1
 8008d62:	9315      	str	r3, [sp, #84]	; 0x54
 8008d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0f0      	beq.n	8008d4c <__gethex+0x34e>
 8008d6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008d6e:	f105 0314 	add.w	r3, r5, #20
 8008d72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008d76:	eb03 010a 	add.w	r1, r3, sl
 8008d7a:	f04f 0c00 	mov.w	ip, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d88:	d01c      	beq.n	8008dc4 <__gethex+0x3c6>
 8008d8a:	3201      	adds	r2, #1
 8008d8c:	6002      	str	r2, [r0, #0]
 8008d8e:	2f02      	cmp	r7, #2
 8008d90:	f105 0314 	add.w	r3, r5, #20
 8008d94:	d138      	bne.n	8008e08 <__gethex+0x40a>
 8008d96:	f8d8 2000 	ldr.w	r2, [r8]
 8008d9a:	3a01      	subs	r2, #1
 8008d9c:	42b2      	cmp	r2, r6
 8008d9e:	d10a      	bne.n	8008db6 <__gethex+0x3b8>
 8008da0:	1171      	asrs	r1, r6, #5
 8008da2:	2201      	movs	r2, #1
 8008da4:	f006 061f 	and.w	r6, r6, #31
 8008da8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dac:	fa02 f606 	lsl.w	r6, r2, r6
 8008db0:	421e      	tst	r6, r3
 8008db2:	bf18      	it	ne
 8008db4:	4617      	movne	r7, r2
 8008db6:	f047 0720 	orr.w	r7, r7, #32
 8008dba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dbc:	601d      	str	r5, [r3, #0]
 8008dbe:	9b06      	ldr	r3, [sp, #24]
 8008dc0:	601c      	str	r4, [r3, #0]
 8008dc2:	e6a4      	b.n	8008b0e <__gethex+0x110>
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	f843 cc04 	str.w	ip, [r3, #-4]
 8008dca:	d8d8      	bhi.n	8008d7e <__gethex+0x380>
 8008dcc:	68ab      	ldr	r3, [r5, #8]
 8008dce:	4599      	cmp	r9, r3
 8008dd0:	db12      	blt.n	8008df8 <__gethex+0x3fa>
 8008dd2:	6869      	ldr	r1, [r5, #4]
 8008dd4:	9802      	ldr	r0, [sp, #8]
 8008dd6:	3101      	adds	r1, #1
 8008dd8:	f000 f916 	bl	8009008 <_Balloc>
 8008ddc:	692a      	ldr	r2, [r5, #16]
 8008dde:	3202      	adds	r2, #2
 8008de0:	f105 010c 	add.w	r1, r5, #12
 8008de4:	4683      	mov	fp, r0
 8008de6:	0092      	lsls	r2, r2, #2
 8008de8:	300c      	adds	r0, #12
 8008dea:	f7fd fa4d 	bl	8006288 <memcpy>
 8008dee:	4629      	mov	r1, r5
 8008df0:	9802      	ldr	r0, [sp, #8]
 8008df2:	f000 f93d 	bl	8009070 <_Bfree>
 8008df6:	465d      	mov	r5, fp
 8008df8:	692b      	ldr	r3, [r5, #16]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e00:	612a      	str	r2, [r5, #16]
 8008e02:	2201      	movs	r2, #1
 8008e04:	615a      	str	r2, [r3, #20]
 8008e06:	e7c2      	b.n	8008d8e <__gethex+0x390>
 8008e08:	692a      	ldr	r2, [r5, #16]
 8008e0a:	454a      	cmp	r2, r9
 8008e0c:	dd0b      	ble.n	8008e26 <__gethex+0x428>
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7ff fda5 	bl	8008960 <rshift>
 8008e16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e1a:	3401      	adds	r4, #1
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	f6ff aed9 	blt.w	8008bd4 <__gethex+0x1d6>
 8008e22:	2701      	movs	r7, #1
 8008e24:	e7c7      	b.n	8008db6 <__gethex+0x3b8>
 8008e26:	f016 061f 	ands.w	r6, r6, #31
 8008e2a:	d0fa      	beq.n	8008e22 <__gethex+0x424>
 8008e2c:	449a      	add	sl, r3
 8008e2e:	f1c6 0620 	rsb	r6, r6, #32
 8008e32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e36:	f000 f9ab 	bl	8009190 <__hi0bits>
 8008e3a:	42b0      	cmp	r0, r6
 8008e3c:	dbe7      	blt.n	8008e0e <__gethex+0x410>
 8008e3e:	e7f0      	b.n	8008e22 <__gethex+0x424>

08008e40 <L_shift>:
 8008e40:	f1c2 0208 	rsb	r2, r2, #8
 8008e44:	0092      	lsls	r2, r2, #2
 8008e46:	b570      	push	{r4, r5, r6, lr}
 8008e48:	f1c2 0620 	rsb	r6, r2, #32
 8008e4c:	6843      	ldr	r3, [r0, #4]
 8008e4e:	6804      	ldr	r4, [r0, #0]
 8008e50:	fa03 f506 	lsl.w	r5, r3, r6
 8008e54:	432c      	orrs	r4, r5
 8008e56:	40d3      	lsrs	r3, r2
 8008e58:	6004      	str	r4, [r0, #0]
 8008e5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e5e:	4288      	cmp	r0, r1
 8008e60:	d3f4      	bcc.n	8008e4c <L_shift+0xc>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}

08008e64 <__match>:
 8008e64:	b530      	push	{r4, r5, lr}
 8008e66:	6803      	ldr	r3, [r0, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e6e:	b914      	cbnz	r4, 8008e76 <__match+0x12>
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	2001      	movs	r0, #1
 8008e74:	bd30      	pop	{r4, r5, pc}
 8008e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e7e:	2d19      	cmp	r5, #25
 8008e80:	bf98      	it	ls
 8008e82:	3220      	addls	r2, #32
 8008e84:	42a2      	cmp	r2, r4
 8008e86:	d0f0      	beq.n	8008e6a <__match+0x6>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e7f3      	b.n	8008e74 <__match+0x10>

08008e8c <__hexnan>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	680b      	ldr	r3, [r1, #0]
 8008e92:	6801      	ldr	r1, [r0, #0]
 8008e94:	115f      	asrs	r7, r3, #5
 8008e96:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008e9a:	f013 031f 	ands.w	r3, r3, #31
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	bf18      	it	ne
 8008ea2:	3704      	addne	r7, #4
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	1f3e      	subs	r6, r7, #4
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	4690      	mov	r8, r2
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	f847 5c04 	str.w	r5, [r7, #-4]
 8008eb2:	46b1      	mov	r9, r6
 8008eb4:	4634      	mov	r4, r6
 8008eb6:	9502      	str	r5, [sp, #8]
 8008eb8:	46ab      	mov	fp, r5
 8008eba:	784a      	ldrb	r2, [r1, #1]
 8008ebc:	1c4b      	adds	r3, r1, #1
 8008ebe:	9303      	str	r3, [sp, #12]
 8008ec0:	b342      	cbz	r2, 8008f14 <__hexnan+0x88>
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	9105      	str	r1, [sp, #20]
 8008ec6:	9204      	str	r2, [sp, #16]
 8008ec8:	f7ff fd84 	bl	80089d4 <__hexdig_fun>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d143      	bne.n	8008f58 <__hexnan+0xcc>
 8008ed0:	9a04      	ldr	r2, [sp, #16]
 8008ed2:	9905      	ldr	r1, [sp, #20]
 8008ed4:	2a20      	cmp	r2, #32
 8008ed6:	d818      	bhi.n	8008f0a <__hexnan+0x7e>
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	459b      	cmp	fp, r3
 8008edc:	dd13      	ble.n	8008f06 <__hexnan+0x7a>
 8008ede:	454c      	cmp	r4, r9
 8008ee0:	d206      	bcs.n	8008ef0 <__hexnan+0x64>
 8008ee2:	2d07      	cmp	r5, #7
 8008ee4:	dc04      	bgt.n	8008ef0 <__hexnan+0x64>
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7ff ffa8 	bl	8008e40 <L_shift>
 8008ef0:	4544      	cmp	r4, r8
 8008ef2:	d944      	bls.n	8008f7e <__hexnan+0xf2>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f1a4 0904 	sub.w	r9, r4, #4
 8008efa:	f844 3c04 	str.w	r3, [r4, #-4]
 8008efe:	f8cd b008 	str.w	fp, [sp, #8]
 8008f02:	464c      	mov	r4, r9
 8008f04:	461d      	mov	r5, r3
 8008f06:	9903      	ldr	r1, [sp, #12]
 8008f08:	e7d7      	b.n	8008eba <__hexnan+0x2e>
 8008f0a:	2a29      	cmp	r2, #41	; 0x29
 8008f0c:	d14a      	bne.n	8008fa4 <__hexnan+0x118>
 8008f0e:	3102      	adds	r1, #2
 8008f10:	f8ca 1000 	str.w	r1, [sl]
 8008f14:	f1bb 0f00 	cmp.w	fp, #0
 8008f18:	d044      	beq.n	8008fa4 <__hexnan+0x118>
 8008f1a:	454c      	cmp	r4, r9
 8008f1c:	d206      	bcs.n	8008f2c <__hexnan+0xa0>
 8008f1e:	2d07      	cmp	r5, #7
 8008f20:	dc04      	bgt.n	8008f2c <__hexnan+0xa0>
 8008f22:	462a      	mov	r2, r5
 8008f24:	4649      	mov	r1, r9
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7ff ff8a 	bl	8008e40 <L_shift>
 8008f2c:	4544      	cmp	r4, r8
 8008f2e:	d928      	bls.n	8008f82 <__hexnan+0xf6>
 8008f30:	4643      	mov	r3, r8
 8008f32:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f36:	f843 2b04 	str.w	r2, [r3], #4
 8008f3a:	42a6      	cmp	r6, r4
 8008f3c:	d2f9      	bcs.n	8008f32 <__hexnan+0xa6>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f843 2b04 	str.w	r2, [r3], #4
 8008f44:	429e      	cmp	r6, r3
 8008f46:	d2fb      	bcs.n	8008f40 <__hexnan+0xb4>
 8008f48:	6833      	ldr	r3, [r6, #0]
 8008f4a:	b91b      	cbnz	r3, 8008f54 <__hexnan+0xc8>
 8008f4c:	4546      	cmp	r6, r8
 8008f4e:	d127      	bne.n	8008fa0 <__hexnan+0x114>
 8008f50:	2301      	movs	r3, #1
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	2005      	movs	r0, #5
 8008f56:	e026      	b.n	8008fa6 <__hexnan+0x11a>
 8008f58:	3501      	adds	r5, #1
 8008f5a:	2d08      	cmp	r5, #8
 8008f5c:	f10b 0b01 	add.w	fp, fp, #1
 8008f60:	dd06      	ble.n	8008f70 <__hexnan+0xe4>
 8008f62:	4544      	cmp	r4, r8
 8008f64:	d9cf      	bls.n	8008f06 <__hexnan+0x7a>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f6c:	2501      	movs	r5, #1
 8008f6e:	3c04      	subs	r4, #4
 8008f70:	6822      	ldr	r2, [r4, #0]
 8008f72:	f000 000f 	and.w	r0, r0, #15
 8008f76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f7a:	6020      	str	r0, [r4, #0]
 8008f7c:	e7c3      	b.n	8008f06 <__hexnan+0x7a>
 8008f7e:	2508      	movs	r5, #8
 8008f80:	e7c1      	b.n	8008f06 <__hexnan+0x7a>
 8008f82:	9b01      	ldr	r3, [sp, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0df      	beq.n	8008f48 <__hexnan+0xbc>
 8008f88:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8c:	f1c3 0320 	rsb	r3, r3, #32
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
 8008f94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008f98:	401a      	ands	r2, r3
 8008f9a:	f847 2c04 	str.w	r2, [r7, #-4]
 8008f9e:	e7d3      	b.n	8008f48 <__hexnan+0xbc>
 8008fa0:	3e04      	subs	r6, #4
 8008fa2:	e7d1      	b.n	8008f48 <__hexnan+0xbc>
 8008fa4:	2004      	movs	r0, #4
 8008fa6:	b007      	add	sp, #28
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fac <__locale_ctype_ptr_l>:
 8008fac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008fb0:	4770      	bx	lr

08008fb2 <__localeconv_l>:
 8008fb2:	30f0      	adds	r0, #240	; 0xf0
 8008fb4:	4770      	bx	lr
	...

08008fb8 <_localeconv_r>:
 8008fb8:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <_localeconv_r+0x14>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6a18      	ldr	r0, [r3, #32]
 8008fbe:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <_localeconv_r+0x18>)
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	bf08      	it	eq
 8008fc4:	4618      	moveq	r0, r3
 8008fc6:	30f0      	adds	r0, #240	; 0xf0
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20000014 	.word	0x20000014
 8008fd0:	20000078 	.word	0x20000078

08008fd4 <malloc>:
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <malloc+0xc>)
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	f000 bc71 	b.w	80098c0 <_malloc_r>
 8008fde:	bf00      	nop
 8008fe0:	20000014 	.word	0x20000014

08008fe4 <__ascii_mbtowc>:
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	b901      	cbnz	r1, 8008fea <__ascii_mbtowc+0x6>
 8008fe8:	a901      	add	r1, sp, #4
 8008fea:	b142      	cbz	r2, 8008ffe <__ascii_mbtowc+0x1a>
 8008fec:	b14b      	cbz	r3, 8009002 <__ascii_mbtowc+0x1e>
 8008fee:	7813      	ldrb	r3, [r2, #0]
 8008ff0:	600b      	str	r3, [r1, #0]
 8008ff2:	7812      	ldrb	r2, [r2, #0]
 8008ff4:	1c10      	adds	r0, r2, #0
 8008ff6:	bf18      	it	ne
 8008ff8:	2001      	movne	r0, #1
 8008ffa:	b002      	add	sp, #8
 8008ffc:	4770      	bx	lr
 8008ffe:	4610      	mov	r0, r2
 8009000:	e7fb      	b.n	8008ffa <__ascii_mbtowc+0x16>
 8009002:	f06f 0001 	mvn.w	r0, #1
 8009006:	e7f8      	b.n	8008ffa <__ascii_mbtowc+0x16>

08009008 <_Balloc>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800900c:	4604      	mov	r4, r0
 800900e:	460e      	mov	r6, r1
 8009010:	b93d      	cbnz	r5, 8009022 <_Balloc+0x1a>
 8009012:	2010      	movs	r0, #16
 8009014:	f7ff ffde 	bl	8008fd4 <malloc>
 8009018:	6260      	str	r0, [r4, #36]	; 0x24
 800901a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800901e:	6005      	str	r5, [r0, #0]
 8009020:	60c5      	str	r5, [r0, #12]
 8009022:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009024:	68eb      	ldr	r3, [r5, #12]
 8009026:	b183      	cbz	r3, 800904a <_Balloc+0x42>
 8009028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009030:	b9b8      	cbnz	r0, 8009062 <_Balloc+0x5a>
 8009032:	2101      	movs	r1, #1
 8009034:	fa01 f506 	lsl.w	r5, r1, r6
 8009038:	1d6a      	adds	r2, r5, #5
 800903a:	0092      	lsls	r2, r2, #2
 800903c:	4620      	mov	r0, r4
 800903e:	f000 fbe2 	bl	8009806 <_calloc_r>
 8009042:	b160      	cbz	r0, 800905e <_Balloc+0x56>
 8009044:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009048:	e00e      	b.n	8009068 <_Balloc+0x60>
 800904a:	2221      	movs	r2, #33	; 0x21
 800904c:	2104      	movs	r1, #4
 800904e:	4620      	mov	r0, r4
 8009050:	f000 fbd9 	bl	8009806 <_calloc_r>
 8009054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009056:	60e8      	str	r0, [r5, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e4      	bne.n	8009028 <_Balloc+0x20>
 800905e:	2000      	movs	r0, #0
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	6802      	ldr	r2, [r0, #0]
 8009064:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009068:	2300      	movs	r3, #0
 800906a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800906e:	e7f7      	b.n	8009060 <_Balloc+0x58>

08009070 <_Bfree>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009074:	4606      	mov	r6, r0
 8009076:	460d      	mov	r5, r1
 8009078:	b93c      	cbnz	r4, 800908a <_Bfree+0x1a>
 800907a:	2010      	movs	r0, #16
 800907c:	f7ff ffaa 	bl	8008fd4 <malloc>
 8009080:	6270      	str	r0, [r6, #36]	; 0x24
 8009082:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009086:	6004      	str	r4, [r0, #0]
 8009088:	60c4      	str	r4, [r0, #12]
 800908a:	b13d      	cbz	r5, 800909c <_Bfree+0x2c>
 800908c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800908e:	686a      	ldr	r2, [r5, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009096:	6029      	str	r1, [r5, #0]
 8009098:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800909c:	bd70      	pop	{r4, r5, r6, pc}

0800909e <__multadd>:
 800909e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	690d      	ldr	r5, [r1, #16]
 80090a4:	461f      	mov	r7, r3
 80090a6:	4606      	mov	r6, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	f101 0c14 	add.w	ip, r1, #20
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8dc 0000 	ldr.w	r0, [ip]
 80090b4:	b281      	uxth	r1, r0
 80090b6:	fb02 7101 	mla	r1, r2, r1, r7
 80090ba:	0c0f      	lsrs	r7, r1, #16
 80090bc:	0c00      	lsrs	r0, r0, #16
 80090be:	fb02 7000 	mla	r0, r2, r0, r7
 80090c2:	b289      	uxth	r1, r1
 80090c4:	3301      	adds	r3, #1
 80090c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80090ca:	429d      	cmp	r5, r3
 80090cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80090d0:	f84c 1b04 	str.w	r1, [ip], #4
 80090d4:	dcec      	bgt.n	80090b0 <__multadd+0x12>
 80090d6:	b1d7      	cbz	r7, 800910e <__multadd+0x70>
 80090d8:	68a3      	ldr	r3, [r4, #8]
 80090da:	42ab      	cmp	r3, r5
 80090dc:	dc12      	bgt.n	8009104 <__multadd+0x66>
 80090de:	6861      	ldr	r1, [r4, #4]
 80090e0:	4630      	mov	r0, r6
 80090e2:	3101      	adds	r1, #1
 80090e4:	f7ff ff90 	bl	8009008 <_Balloc>
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	3202      	adds	r2, #2
 80090ec:	f104 010c 	add.w	r1, r4, #12
 80090f0:	4680      	mov	r8, r0
 80090f2:	0092      	lsls	r2, r2, #2
 80090f4:	300c      	adds	r0, #12
 80090f6:	f7fd f8c7 	bl	8006288 <memcpy>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff ffb7 	bl	8009070 <_Bfree>
 8009102:	4644      	mov	r4, r8
 8009104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009108:	3501      	adds	r5, #1
 800910a:	615f      	str	r7, [r3, #20]
 800910c:	6125      	str	r5, [r4, #16]
 800910e:	4620      	mov	r0, r4
 8009110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009114 <__s2b>:
 8009114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009118:	460c      	mov	r4, r1
 800911a:	4615      	mov	r5, r2
 800911c:	461f      	mov	r7, r3
 800911e:	2209      	movs	r2, #9
 8009120:	3308      	adds	r3, #8
 8009122:	4606      	mov	r6, r0
 8009124:	fb93 f3f2 	sdiv	r3, r3, r2
 8009128:	2100      	movs	r1, #0
 800912a:	2201      	movs	r2, #1
 800912c:	429a      	cmp	r2, r3
 800912e:	db20      	blt.n	8009172 <__s2b+0x5e>
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff ff69 	bl	8009008 <_Balloc>
 8009136:	9b08      	ldr	r3, [sp, #32]
 8009138:	6143      	str	r3, [r0, #20]
 800913a:	2d09      	cmp	r5, #9
 800913c:	f04f 0301 	mov.w	r3, #1
 8009140:	6103      	str	r3, [r0, #16]
 8009142:	dd19      	ble.n	8009178 <__s2b+0x64>
 8009144:	f104 0809 	add.w	r8, r4, #9
 8009148:	46c1      	mov	r9, r8
 800914a:	442c      	add	r4, r5
 800914c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009150:	4601      	mov	r1, r0
 8009152:	3b30      	subs	r3, #48	; 0x30
 8009154:	220a      	movs	r2, #10
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ffa1 	bl	800909e <__multadd>
 800915c:	45a1      	cmp	r9, r4
 800915e:	d1f5      	bne.n	800914c <__s2b+0x38>
 8009160:	eb08 0405 	add.w	r4, r8, r5
 8009164:	3c08      	subs	r4, #8
 8009166:	1b2d      	subs	r5, r5, r4
 8009168:	1963      	adds	r3, r4, r5
 800916a:	42bb      	cmp	r3, r7
 800916c:	db07      	blt.n	800917e <__s2b+0x6a>
 800916e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009172:	0052      	lsls	r2, r2, #1
 8009174:	3101      	adds	r1, #1
 8009176:	e7d9      	b.n	800912c <__s2b+0x18>
 8009178:	340a      	adds	r4, #10
 800917a:	2509      	movs	r5, #9
 800917c:	e7f3      	b.n	8009166 <__s2b+0x52>
 800917e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009182:	4601      	mov	r1, r0
 8009184:	3b30      	subs	r3, #48	; 0x30
 8009186:	220a      	movs	r2, #10
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff ff88 	bl	800909e <__multadd>
 800918e:	e7eb      	b.n	8009168 <__s2b+0x54>

08009190 <__hi0bits>:
 8009190:	0c02      	lsrs	r2, r0, #16
 8009192:	0412      	lsls	r2, r2, #16
 8009194:	4603      	mov	r3, r0
 8009196:	b9b2      	cbnz	r2, 80091c6 <__hi0bits+0x36>
 8009198:	0403      	lsls	r3, r0, #16
 800919a:	2010      	movs	r0, #16
 800919c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80091a0:	bf04      	itt	eq
 80091a2:	021b      	lsleq	r3, r3, #8
 80091a4:	3008      	addeq	r0, #8
 80091a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80091aa:	bf04      	itt	eq
 80091ac:	011b      	lsleq	r3, r3, #4
 80091ae:	3004      	addeq	r0, #4
 80091b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80091b4:	bf04      	itt	eq
 80091b6:	009b      	lsleq	r3, r3, #2
 80091b8:	3002      	addeq	r0, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	db06      	blt.n	80091cc <__hi0bits+0x3c>
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	d503      	bpl.n	80091ca <__hi0bits+0x3a>
 80091c2:	3001      	adds	r0, #1
 80091c4:	4770      	bx	lr
 80091c6:	2000      	movs	r0, #0
 80091c8:	e7e8      	b.n	800919c <__hi0bits+0xc>
 80091ca:	2020      	movs	r0, #32
 80091cc:	4770      	bx	lr

080091ce <__lo0bits>:
 80091ce:	6803      	ldr	r3, [r0, #0]
 80091d0:	f013 0207 	ands.w	r2, r3, #7
 80091d4:	4601      	mov	r1, r0
 80091d6:	d00b      	beq.n	80091f0 <__lo0bits+0x22>
 80091d8:	07da      	lsls	r2, r3, #31
 80091da:	d423      	bmi.n	8009224 <__lo0bits+0x56>
 80091dc:	0798      	lsls	r0, r3, #30
 80091de:	bf49      	itett	mi
 80091e0:	085b      	lsrmi	r3, r3, #1
 80091e2:	089b      	lsrpl	r3, r3, #2
 80091e4:	2001      	movmi	r0, #1
 80091e6:	600b      	strmi	r3, [r1, #0]
 80091e8:	bf5c      	itt	pl
 80091ea:	600b      	strpl	r3, [r1, #0]
 80091ec:	2002      	movpl	r0, #2
 80091ee:	4770      	bx	lr
 80091f0:	b298      	uxth	r0, r3
 80091f2:	b9a8      	cbnz	r0, 8009220 <__lo0bits+0x52>
 80091f4:	0c1b      	lsrs	r3, r3, #16
 80091f6:	2010      	movs	r0, #16
 80091f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091fc:	bf04      	itt	eq
 80091fe:	0a1b      	lsreq	r3, r3, #8
 8009200:	3008      	addeq	r0, #8
 8009202:	071a      	lsls	r2, r3, #28
 8009204:	bf04      	itt	eq
 8009206:	091b      	lsreq	r3, r3, #4
 8009208:	3004      	addeq	r0, #4
 800920a:	079a      	lsls	r2, r3, #30
 800920c:	bf04      	itt	eq
 800920e:	089b      	lsreq	r3, r3, #2
 8009210:	3002      	addeq	r0, #2
 8009212:	07da      	lsls	r2, r3, #31
 8009214:	d402      	bmi.n	800921c <__lo0bits+0x4e>
 8009216:	085b      	lsrs	r3, r3, #1
 8009218:	d006      	beq.n	8009228 <__lo0bits+0x5a>
 800921a:	3001      	adds	r0, #1
 800921c:	600b      	str	r3, [r1, #0]
 800921e:	4770      	bx	lr
 8009220:	4610      	mov	r0, r2
 8009222:	e7e9      	b.n	80091f8 <__lo0bits+0x2a>
 8009224:	2000      	movs	r0, #0
 8009226:	4770      	bx	lr
 8009228:	2020      	movs	r0, #32
 800922a:	4770      	bx	lr

0800922c <__i2b>:
 800922c:	b510      	push	{r4, lr}
 800922e:	460c      	mov	r4, r1
 8009230:	2101      	movs	r1, #1
 8009232:	f7ff fee9 	bl	8009008 <_Balloc>
 8009236:	2201      	movs	r2, #1
 8009238:	6144      	str	r4, [r0, #20]
 800923a:	6102      	str	r2, [r0, #16]
 800923c:	bd10      	pop	{r4, pc}

0800923e <__multiply>:
 800923e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009242:	4614      	mov	r4, r2
 8009244:	690a      	ldr	r2, [r1, #16]
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	429a      	cmp	r2, r3
 800924a:	bfb8      	it	lt
 800924c:	460b      	movlt	r3, r1
 800924e:	4688      	mov	r8, r1
 8009250:	bfbc      	itt	lt
 8009252:	46a0      	movlt	r8, r4
 8009254:	461c      	movlt	r4, r3
 8009256:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800925a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800925e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009262:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009266:	eb07 0609 	add.w	r6, r7, r9
 800926a:	42b3      	cmp	r3, r6
 800926c:	bfb8      	it	lt
 800926e:	3101      	addlt	r1, #1
 8009270:	f7ff feca 	bl	8009008 <_Balloc>
 8009274:	f100 0514 	add.w	r5, r0, #20
 8009278:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800927c:	462b      	mov	r3, r5
 800927e:	2200      	movs	r2, #0
 8009280:	4573      	cmp	r3, lr
 8009282:	d316      	bcc.n	80092b2 <__multiply+0x74>
 8009284:	f104 0214 	add.w	r2, r4, #20
 8009288:	f108 0114 	add.w	r1, r8, #20
 800928c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009290:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	9201      	str	r2, [sp, #4]
 800929a:	4293      	cmp	r3, r2
 800929c:	d80c      	bhi.n	80092b8 <__multiply+0x7a>
 800929e:	2e00      	cmp	r6, #0
 80092a0:	dd03      	ble.n	80092aa <__multiply+0x6c>
 80092a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d05d      	beq.n	8009366 <__multiply+0x128>
 80092aa:	6106      	str	r6, [r0, #16]
 80092ac:	b003      	add	sp, #12
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	f843 2b04 	str.w	r2, [r3], #4
 80092b6:	e7e3      	b.n	8009280 <__multiply+0x42>
 80092b8:	f8b2 b000 	ldrh.w	fp, [r2]
 80092bc:	f1bb 0f00 	cmp.w	fp, #0
 80092c0:	d023      	beq.n	800930a <__multiply+0xcc>
 80092c2:	4689      	mov	r9, r1
 80092c4:	46ac      	mov	ip, r5
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	f859 4b04 	ldr.w	r4, [r9], #4
 80092ce:	f8dc a000 	ldr.w	sl, [ip]
 80092d2:	b2a3      	uxth	r3, r4
 80092d4:	fa1f fa8a 	uxth.w	sl, sl
 80092d8:	fb0b a303 	mla	r3, fp, r3, sl
 80092dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092e0:	f8dc 4000 	ldr.w	r4, [ip]
 80092e4:	4443      	add	r3, r8
 80092e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092ea:	fb0b 840a 	mla	r4, fp, sl, r8
 80092ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80092f2:	46e2      	mov	sl, ip
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092fa:	454f      	cmp	r7, r9
 80092fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009300:	f84a 3b04 	str.w	r3, [sl], #4
 8009304:	d82b      	bhi.n	800935e <__multiply+0x120>
 8009306:	f8cc 8004 	str.w	r8, [ip, #4]
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009310:	3204      	adds	r2, #4
 8009312:	f1ba 0f00 	cmp.w	sl, #0
 8009316:	d020      	beq.n	800935a <__multiply+0x11c>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	4689      	mov	r9, r1
 800931c:	46a8      	mov	r8, r5
 800931e:	f04f 0b00 	mov.w	fp, #0
 8009322:	f8b9 c000 	ldrh.w	ip, [r9]
 8009326:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800932a:	fb0a 440c 	mla	r4, sl, ip, r4
 800932e:	445c      	add	r4, fp
 8009330:	46c4      	mov	ip, r8
 8009332:	b29b      	uxth	r3, r3
 8009334:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009338:	f84c 3b04 	str.w	r3, [ip], #4
 800933c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009340:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	fb0a b303 	mla	r3, sl, r3, fp
 800934a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800934e:	454f      	cmp	r7, r9
 8009350:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009354:	d805      	bhi.n	8009362 <__multiply+0x124>
 8009356:	f8c8 3004 	str.w	r3, [r8, #4]
 800935a:	3504      	adds	r5, #4
 800935c:	e79b      	b.n	8009296 <__multiply+0x58>
 800935e:	46d4      	mov	ip, sl
 8009360:	e7b3      	b.n	80092ca <__multiply+0x8c>
 8009362:	46e0      	mov	r8, ip
 8009364:	e7dd      	b.n	8009322 <__multiply+0xe4>
 8009366:	3e01      	subs	r6, #1
 8009368:	e799      	b.n	800929e <__multiply+0x60>
	...

0800936c <__pow5mult>:
 800936c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009370:	4615      	mov	r5, r2
 8009372:	f012 0203 	ands.w	r2, r2, #3
 8009376:	4606      	mov	r6, r0
 8009378:	460f      	mov	r7, r1
 800937a:	d007      	beq.n	800938c <__pow5mult+0x20>
 800937c:	3a01      	subs	r2, #1
 800937e:	4c21      	ldr	r4, [pc, #132]	; (8009404 <__pow5mult+0x98>)
 8009380:	2300      	movs	r3, #0
 8009382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009386:	f7ff fe8a 	bl	800909e <__multadd>
 800938a:	4607      	mov	r7, r0
 800938c:	10ad      	asrs	r5, r5, #2
 800938e:	d035      	beq.n	80093fc <__pow5mult+0x90>
 8009390:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009392:	b93c      	cbnz	r4, 80093a4 <__pow5mult+0x38>
 8009394:	2010      	movs	r0, #16
 8009396:	f7ff fe1d 	bl	8008fd4 <malloc>
 800939a:	6270      	str	r0, [r6, #36]	; 0x24
 800939c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093a0:	6004      	str	r4, [r0, #0]
 80093a2:	60c4      	str	r4, [r0, #12]
 80093a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093ac:	b94c      	cbnz	r4, 80093c2 <__pow5mult+0x56>
 80093ae:	f240 2171 	movw	r1, #625	; 0x271
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7ff ff3a 	bl	800922c <__i2b>
 80093b8:	2300      	movs	r3, #0
 80093ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80093be:	4604      	mov	r4, r0
 80093c0:	6003      	str	r3, [r0, #0]
 80093c2:	f04f 0800 	mov.w	r8, #0
 80093c6:	07eb      	lsls	r3, r5, #31
 80093c8:	d50a      	bpl.n	80093e0 <__pow5mult+0x74>
 80093ca:	4639      	mov	r1, r7
 80093cc:	4622      	mov	r2, r4
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7ff ff35 	bl	800923e <__multiply>
 80093d4:	4639      	mov	r1, r7
 80093d6:	4681      	mov	r9, r0
 80093d8:	4630      	mov	r0, r6
 80093da:	f7ff fe49 	bl	8009070 <_Bfree>
 80093de:	464f      	mov	r7, r9
 80093e0:	106d      	asrs	r5, r5, #1
 80093e2:	d00b      	beq.n	80093fc <__pow5mult+0x90>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	b938      	cbnz	r0, 80093f8 <__pow5mult+0x8c>
 80093e8:	4622      	mov	r2, r4
 80093ea:	4621      	mov	r1, r4
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff ff26 	bl	800923e <__multiply>
 80093f2:	6020      	str	r0, [r4, #0]
 80093f4:	f8c0 8000 	str.w	r8, [r0]
 80093f8:	4604      	mov	r4, r0
 80093fa:	e7e4      	b.n	80093c6 <__pow5mult+0x5a>
 80093fc:	4638      	mov	r0, r7
 80093fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009402:	bf00      	nop
 8009404:	0800af30 	.word	0x0800af30

08009408 <__lshift>:
 8009408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800940c:	460c      	mov	r4, r1
 800940e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	6849      	ldr	r1, [r1, #4]
 8009416:	eb0a 0903 	add.w	r9, sl, r3
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	4607      	mov	r7, r0
 800941e:	4616      	mov	r6, r2
 8009420:	f109 0501 	add.w	r5, r9, #1
 8009424:	42ab      	cmp	r3, r5
 8009426:	db32      	blt.n	800948e <__lshift+0x86>
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff fded 	bl	8009008 <_Balloc>
 800942e:	2300      	movs	r3, #0
 8009430:	4680      	mov	r8, r0
 8009432:	f100 0114 	add.w	r1, r0, #20
 8009436:	461a      	mov	r2, r3
 8009438:	4553      	cmp	r3, sl
 800943a:	db2b      	blt.n	8009494 <__lshift+0x8c>
 800943c:	6920      	ldr	r0, [r4, #16]
 800943e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009442:	f104 0314 	add.w	r3, r4, #20
 8009446:	f016 021f 	ands.w	r2, r6, #31
 800944a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800944e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009452:	d025      	beq.n	80094a0 <__lshift+0x98>
 8009454:	f1c2 0e20 	rsb	lr, r2, #32
 8009458:	2000      	movs	r0, #0
 800945a:	681e      	ldr	r6, [r3, #0]
 800945c:	468a      	mov	sl, r1
 800945e:	4096      	lsls	r6, r2
 8009460:	4330      	orrs	r0, r6
 8009462:	f84a 0b04 	str.w	r0, [sl], #4
 8009466:	f853 0b04 	ldr.w	r0, [r3], #4
 800946a:	459c      	cmp	ip, r3
 800946c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009470:	d814      	bhi.n	800949c <__lshift+0x94>
 8009472:	6048      	str	r0, [r1, #4]
 8009474:	b108      	cbz	r0, 800947a <__lshift+0x72>
 8009476:	f109 0502 	add.w	r5, r9, #2
 800947a:	3d01      	subs	r5, #1
 800947c:	4638      	mov	r0, r7
 800947e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009482:	4621      	mov	r1, r4
 8009484:	f7ff fdf4 	bl	8009070 <_Bfree>
 8009488:	4640      	mov	r0, r8
 800948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948e:	3101      	adds	r1, #1
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	e7c7      	b.n	8009424 <__lshift+0x1c>
 8009494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009498:	3301      	adds	r3, #1
 800949a:	e7cd      	b.n	8009438 <__lshift+0x30>
 800949c:	4651      	mov	r1, sl
 800949e:	e7dc      	b.n	800945a <__lshift+0x52>
 80094a0:	3904      	subs	r1, #4
 80094a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80094aa:	459c      	cmp	ip, r3
 80094ac:	d8f9      	bhi.n	80094a2 <__lshift+0x9a>
 80094ae:	e7e4      	b.n	800947a <__lshift+0x72>

080094b0 <__mcmp>:
 80094b0:	6903      	ldr	r3, [r0, #16]
 80094b2:	690a      	ldr	r2, [r1, #16]
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	b530      	push	{r4, r5, lr}
 80094b8:	d10c      	bne.n	80094d4 <__mcmp+0x24>
 80094ba:	0092      	lsls	r2, r2, #2
 80094bc:	3014      	adds	r0, #20
 80094be:	3114      	adds	r1, #20
 80094c0:	1884      	adds	r4, r0, r2
 80094c2:	4411      	add	r1, r2
 80094c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094cc:	4295      	cmp	r5, r2
 80094ce:	d003      	beq.n	80094d8 <__mcmp+0x28>
 80094d0:	d305      	bcc.n	80094de <__mcmp+0x2e>
 80094d2:	2301      	movs	r3, #1
 80094d4:	4618      	mov	r0, r3
 80094d6:	bd30      	pop	{r4, r5, pc}
 80094d8:	42a0      	cmp	r0, r4
 80094da:	d3f3      	bcc.n	80094c4 <__mcmp+0x14>
 80094dc:	e7fa      	b.n	80094d4 <__mcmp+0x24>
 80094de:	f04f 33ff 	mov.w	r3, #4294967295
 80094e2:	e7f7      	b.n	80094d4 <__mcmp+0x24>

080094e4 <__mdiff>:
 80094e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e8:	460d      	mov	r5, r1
 80094ea:	4607      	mov	r7, r0
 80094ec:	4611      	mov	r1, r2
 80094ee:	4628      	mov	r0, r5
 80094f0:	4614      	mov	r4, r2
 80094f2:	f7ff ffdd 	bl	80094b0 <__mcmp>
 80094f6:	1e06      	subs	r6, r0, #0
 80094f8:	d108      	bne.n	800950c <__mdiff+0x28>
 80094fa:	4631      	mov	r1, r6
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff fd83 	bl	8009008 <_Balloc>
 8009502:	2301      	movs	r3, #1
 8009504:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950c:	bfa4      	itt	ge
 800950e:	4623      	movge	r3, r4
 8009510:	462c      	movge	r4, r5
 8009512:	4638      	mov	r0, r7
 8009514:	6861      	ldr	r1, [r4, #4]
 8009516:	bfa6      	itte	ge
 8009518:	461d      	movge	r5, r3
 800951a:	2600      	movge	r6, #0
 800951c:	2601      	movlt	r6, #1
 800951e:	f7ff fd73 	bl	8009008 <_Balloc>
 8009522:	692b      	ldr	r3, [r5, #16]
 8009524:	60c6      	str	r6, [r0, #12]
 8009526:	6926      	ldr	r6, [r4, #16]
 8009528:	f105 0914 	add.w	r9, r5, #20
 800952c:	f104 0214 	add.w	r2, r4, #20
 8009530:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009534:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009538:	f100 0514 	add.w	r5, r0, #20
 800953c:	f04f 0e00 	mov.w	lr, #0
 8009540:	f852 ab04 	ldr.w	sl, [r2], #4
 8009544:	f859 4b04 	ldr.w	r4, [r9], #4
 8009548:	fa1e f18a 	uxtah	r1, lr, sl
 800954c:	b2a3      	uxth	r3, r4
 800954e:	1ac9      	subs	r1, r1, r3
 8009550:	0c23      	lsrs	r3, r4, #16
 8009552:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009556:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800955a:	b289      	uxth	r1, r1
 800955c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009560:	45c8      	cmp	r8, r9
 8009562:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009566:	4694      	mov	ip, r2
 8009568:	f845 3b04 	str.w	r3, [r5], #4
 800956c:	d8e8      	bhi.n	8009540 <__mdiff+0x5c>
 800956e:	45bc      	cmp	ip, r7
 8009570:	d304      	bcc.n	800957c <__mdiff+0x98>
 8009572:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009576:	b183      	cbz	r3, 800959a <__mdiff+0xb6>
 8009578:	6106      	str	r6, [r0, #16]
 800957a:	e7c5      	b.n	8009508 <__mdiff+0x24>
 800957c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009580:	fa1e f381 	uxtah	r3, lr, r1
 8009584:	141a      	asrs	r2, r3, #16
 8009586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800958a:	b29b      	uxth	r3, r3
 800958c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009590:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009594:	f845 3b04 	str.w	r3, [r5], #4
 8009598:	e7e9      	b.n	800956e <__mdiff+0x8a>
 800959a:	3e01      	subs	r6, #1
 800959c:	e7e9      	b.n	8009572 <__mdiff+0x8e>
	...

080095a0 <__ulp>:
 80095a0:	4b12      	ldr	r3, [pc, #72]	; (80095ec <__ulp+0x4c>)
 80095a2:	ee10 2a90 	vmov	r2, s1
 80095a6:	401a      	ands	r2, r3
 80095a8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd04      	ble.n	80095ba <__ulp+0x1a>
 80095b0:	2000      	movs	r0, #0
 80095b2:	4619      	mov	r1, r3
 80095b4:	ec41 0b10 	vmov	d0, r0, r1
 80095b8:	4770      	bx	lr
 80095ba:	425b      	negs	r3, r3
 80095bc:	151b      	asrs	r3, r3, #20
 80095be:	2b13      	cmp	r3, #19
 80095c0:	f04f 0000 	mov.w	r0, #0
 80095c4:	f04f 0100 	mov.w	r1, #0
 80095c8:	dc04      	bgt.n	80095d4 <__ulp+0x34>
 80095ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80095ce:	fa42 f103 	asr.w	r1, r2, r3
 80095d2:	e7ef      	b.n	80095b4 <__ulp+0x14>
 80095d4:	3b14      	subs	r3, #20
 80095d6:	2b1e      	cmp	r3, #30
 80095d8:	f04f 0201 	mov.w	r2, #1
 80095dc:	bfda      	itte	le
 80095de:	f1c3 031f 	rsble	r3, r3, #31
 80095e2:	fa02 f303 	lslle.w	r3, r2, r3
 80095e6:	4613      	movgt	r3, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	e7e3      	b.n	80095b4 <__ulp+0x14>
 80095ec:	7ff00000 	.word	0x7ff00000

080095f0 <__b2d>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	6905      	ldr	r5, [r0, #16]
 80095f4:	f100 0714 	add.w	r7, r0, #20
 80095f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80095fc:	1f2e      	subs	r6, r5, #4
 80095fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009602:	4620      	mov	r0, r4
 8009604:	f7ff fdc4 	bl	8009190 <__hi0bits>
 8009608:	f1c0 0320 	rsb	r3, r0, #32
 800960c:	280a      	cmp	r0, #10
 800960e:	600b      	str	r3, [r1, #0]
 8009610:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009688 <__b2d+0x98>
 8009614:	dc14      	bgt.n	8009640 <__b2d+0x50>
 8009616:	f1c0 0e0b 	rsb	lr, r0, #11
 800961a:	fa24 f10e 	lsr.w	r1, r4, lr
 800961e:	42b7      	cmp	r7, r6
 8009620:	ea41 030c 	orr.w	r3, r1, ip
 8009624:	bf34      	ite	cc
 8009626:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800962a:	2100      	movcs	r1, #0
 800962c:	3015      	adds	r0, #21
 800962e:	fa04 f000 	lsl.w	r0, r4, r0
 8009632:	fa21 f10e 	lsr.w	r1, r1, lr
 8009636:	ea40 0201 	orr.w	r2, r0, r1
 800963a:	ec43 2b10 	vmov	d0, r2, r3
 800963e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009640:	42b7      	cmp	r7, r6
 8009642:	bf3a      	itte	cc
 8009644:	f1a5 0608 	subcc.w	r6, r5, #8
 8009648:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800964c:	2100      	movcs	r1, #0
 800964e:	380b      	subs	r0, #11
 8009650:	d015      	beq.n	800967e <__b2d+0x8e>
 8009652:	4084      	lsls	r4, r0
 8009654:	f1c0 0520 	rsb	r5, r0, #32
 8009658:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800965c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009660:	42be      	cmp	r6, r7
 8009662:	fa21 fc05 	lsr.w	ip, r1, r5
 8009666:	ea44 030c 	orr.w	r3, r4, ip
 800966a:	bf8c      	ite	hi
 800966c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009670:	2400      	movls	r4, #0
 8009672:	fa01 f000 	lsl.w	r0, r1, r0
 8009676:	40ec      	lsrs	r4, r5
 8009678:	ea40 0204 	orr.w	r2, r0, r4
 800967c:	e7dd      	b.n	800963a <__b2d+0x4a>
 800967e:	ea44 030c 	orr.w	r3, r4, ip
 8009682:	460a      	mov	r2, r1
 8009684:	e7d9      	b.n	800963a <__b2d+0x4a>
 8009686:	bf00      	nop
 8009688:	3ff00000 	.word	0x3ff00000

0800968c <__d2b>:
 800968c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009690:	460e      	mov	r6, r1
 8009692:	2101      	movs	r1, #1
 8009694:	ec59 8b10 	vmov	r8, r9, d0
 8009698:	4615      	mov	r5, r2
 800969a:	f7ff fcb5 	bl	8009008 <_Balloc>
 800969e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80096a2:	4607      	mov	r7, r0
 80096a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096a8:	bb34      	cbnz	r4, 80096f8 <__d2b+0x6c>
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	f1b8 0300 	subs.w	r3, r8, #0
 80096b0:	d027      	beq.n	8009702 <__d2b+0x76>
 80096b2:	a802      	add	r0, sp, #8
 80096b4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80096b8:	f7ff fd89 	bl	80091ce <__lo0bits>
 80096bc:	9900      	ldr	r1, [sp, #0]
 80096be:	b1f0      	cbz	r0, 80096fe <__d2b+0x72>
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	f1c0 0320 	rsb	r3, r0, #32
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	430b      	orrs	r3, r1
 80096cc:	40c2      	lsrs	r2, r0
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	9201      	str	r2, [sp, #4]
 80096d2:	9b01      	ldr	r3, [sp, #4]
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bf14      	ite	ne
 80096da:	2102      	movne	r1, #2
 80096dc:	2101      	moveq	r1, #1
 80096de:	6139      	str	r1, [r7, #16]
 80096e0:	b1c4      	cbz	r4, 8009714 <__d2b+0x88>
 80096e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80096e6:	4404      	add	r4, r0
 80096e8:	6034      	str	r4, [r6, #0]
 80096ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096ee:	6028      	str	r0, [r5, #0]
 80096f0:	4638      	mov	r0, r7
 80096f2:	b003      	add	sp, #12
 80096f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096fc:	e7d5      	b.n	80096aa <__d2b+0x1e>
 80096fe:	6179      	str	r1, [r7, #20]
 8009700:	e7e7      	b.n	80096d2 <__d2b+0x46>
 8009702:	a801      	add	r0, sp, #4
 8009704:	f7ff fd63 	bl	80091ce <__lo0bits>
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	2101      	movs	r1, #1
 800970e:	6139      	str	r1, [r7, #16]
 8009710:	3020      	adds	r0, #32
 8009712:	e7e5      	b.n	80096e0 <__d2b+0x54>
 8009714:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800971c:	6030      	str	r0, [r6, #0]
 800971e:	6918      	ldr	r0, [r3, #16]
 8009720:	f7ff fd36 	bl	8009190 <__hi0bits>
 8009724:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009728:	e7e1      	b.n	80096ee <__d2b+0x62>

0800972a <__ratio>:
 800972a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972e:	4688      	mov	r8, r1
 8009730:	4669      	mov	r1, sp
 8009732:	4681      	mov	r9, r0
 8009734:	f7ff ff5c 	bl	80095f0 <__b2d>
 8009738:	a901      	add	r1, sp, #4
 800973a:	4640      	mov	r0, r8
 800973c:	ec57 6b10 	vmov	r6, r7, d0
 8009740:	f7ff ff56 	bl	80095f0 <__b2d>
 8009744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009748:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800974c:	eba3 0c02 	sub.w	ip, r3, r2
 8009750:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009754:	1a9b      	subs	r3, r3, r2
 8009756:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800975a:	ec5b ab10 	vmov	sl, fp, d0
 800975e:	2b00      	cmp	r3, #0
 8009760:	bfce      	itee	gt
 8009762:	463a      	movgt	r2, r7
 8009764:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009768:	465a      	movle	r2, fp
 800976a:	4659      	mov	r1, fp
 800976c:	463d      	mov	r5, r7
 800976e:	bfd4      	ite	le
 8009770:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009774:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009778:	4630      	mov	r0, r6
 800977a:	ee10 2a10 	vmov	r2, s0
 800977e:	460b      	mov	r3, r1
 8009780:	4629      	mov	r1, r5
 8009782:	f7f7 f86b 	bl	800085c <__aeabi_ddiv>
 8009786:	ec41 0b10 	vmov	d0, r0, r1
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009790 <__copybits>:
 8009790:	3901      	subs	r1, #1
 8009792:	b510      	push	{r4, lr}
 8009794:	1149      	asrs	r1, r1, #5
 8009796:	6914      	ldr	r4, [r2, #16]
 8009798:	3101      	adds	r1, #1
 800979a:	f102 0314 	add.w	r3, r2, #20
 800979e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097a6:	42a3      	cmp	r3, r4
 80097a8:	4602      	mov	r2, r0
 80097aa:	d303      	bcc.n	80097b4 <__copybits+0x24>
 80097ac:	2300      	movs	r3, #0
 80097ae:	428a      	cmp	r2, r1
 80097b0:	d305      	bcc.n	80097be <__copybits+0x2e>
 80097b2:	bd10      	pop	{r4, pc}
 80097b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b8:	f840 2b04 	str.w	r2, [r0], #4
 80097bc:	e7f3      	b.n	80097a6 <__copybits+0x16>
 80097be:	f842 3b04 	str.w	r3, [r2], #4
 80097c2:	e7f4      	b.n	80097ae <__copybits+0x1e>

080097c4 <__any_on>:
 80097c4:	f100 0214 	add.w	r2, r0, #20
 80097c8:	6900      	ldr	r0, [r0, #16]
 80097ca:	114b      	asrs	r3, r1, #5
 80097cc:	4298      	cmp	r0, r3
 80097ce:	b510      	push	{r4, lr}
 80097d0:	db11      	blt.n	80097f6 <__any_on+0x32>
 80097d2:	dd0a      	ble.n	80097ea <__any_on+0x26>
 80097d4:	f011 011f 	ands.w	r1, r1, #31
 80097d8:	d007      	beq.n	80097ea <__any_on+0x26>
 80097da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097de:	fa24 f001 	lsr.w	r0, r4, r1
 80097e2:	fa00 f101 	lsl.w	r1, r0, r1
 80097e6:	428c      	cmp	r4, r1
 80097e8:	d10b      	bne.n	8009802 <__any_on+0x3e>
 80097ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d803      	bhi.n	80097fa <__any_on+0x36>
 80097f2:	2000      	movs	r0, #0
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	4603      	mov	r3, r0
 80097f8:	e7f7      	b.n	80097ea <__any_on+0x26>
 80097fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097fe:	2900      	cmp	r1, #0
 8009800:	d0f5      	beq.n	80097ee <__any_on+0x2a>
 8009802:	2001      	movs	r0, #1
 8009804:	e7f6      	b.n	80097f4 <__any_on+0x30>

08009806 <_calloc_r>:
 8009806:	b538      	push	{r3, r4, r5, lr}
 8009808:	fb02 f401 	mul.w	r4, r2, r1
 800980c:	4621      	mov	r1, r4
 800980e:	f000 f857 	bl	80098c0 <_malloc_r>
 8009812:	4605      	mov	r5, r0
 8009814:	b118      	cbz	r0, 800981e <_calloc_r+0x18>
 8009816:	4622      	mov	r2, r4
 8009818:	2100      	movs	r1, #0
 800981a:	f7fc fd40 	bl	800629e <memset>
 800981e:	4628      	mov	r0, r5
 8009820:	bd38      	pop	{r3, r4, r5, pc}
	...

08009824 <_free_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4605      	mov	r5, r0
 8009828:	2900      	cmp	r1, #0
 800982a:	d045      	beq.n	80098b8 <_free_r+0x94>
 800982c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009830:	1f0c      	subs	r4, r1, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfb8      	it	lt
 8009836:	18e4      	addlt	r4, r4, r3
 8009838:	f000 fa36 	bl	8009ca8 <__malloc_lock>
 800983c:	4a1f      	ldr	r2, [pc, #124]	; (80098bc <_free_r+0x98>)
 800983e:	6813      	ldr	r3, [r2, #0]
 8009840:	4610      	mov	r0, r2
 8009842:	b933      	cbnz	r3, 8009852 <_free_r+0x2e>
 8009844:	6063      	str	r3, [r4, #4]
 8009846:	6014      	str	r4, [r2, #0]
 8009848:	4628      	mov	r0, r5
 800984a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800984e:	f000 ba2c 	b.w	8009caa <__malloc_unlock>
 8009852:	42a3      	cmp	r3, r4
 8009854:	d90c      	bls.n	8009870 <_free_r+0x4c>
 8009856:	6821      	ldr	r1, [r4, #0]
 8009858:	1862      	adds	r2, r4, r1
 800985a:	4293      	cmp	r3, r2
 800985c:	bf04      	itt	eq
 800985e:	681a      	ldreq	r2, [r3, #0]
 8009860:	685b      	ldreq	r3, [r3, #4]
 8009862:	6063      	str	r3, [r4, #4]
 8009864:	bf04      	itt	eq
 8009866:	1852      	addeq	r2, r2, r1
 8009868:	6022      	streq	r2, [r4, #0]
 800986a:	6004      	str	r4, [r0, #0]
 800986c:	e7ec      	b.n	8009848 <_free_r+0x24>
 800986e:	4613      	mov	r3, r2
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	b10a      	cbz	r2, 8009878 <_free_r+0x54>
 8009874:	42a2      	cmp	r2, r4
 8009876:	d9fa      	bls.n	800986e <_free_r+0x4a>
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	1858      	adds	r0, r3, r1
 800987c:	42a0      	cmp	r0, r4
 800987e:	d10b      	bne.n	8009898 <_free_r+0x74>
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	4401      	add	r1, r0
 8009884:	1858      	adds	r0, r3, r1
 8009886:	4282      	cmp	r2, r0
 8009888:	6019      	str	r1, [r3, #0]
 800988a:	d1dd      	bne.n	8009848 <_free_r+0x24>
 800988c:	6810      	ldr	r0, [r2, #0]
 800988e:	6852      	ldr	r2, [r2, #4]
 8009890:	605a      	str	r2, [r3, #4]
 8009892:	4401      	add	r1, r0
 8009894:	6019      	str	r1, [r3, #0]
 8009896:	e7d7      	b.n	8009848 <_free_r+0x24>
 8009898:	d902      	bls.n	80098a0 <_free_r+0x7c>
 800989a:	230c      	movs	r3, #12
 800989c:	602b      	str	r3, [r5, #0]
 800989e:	e7d3      	b.n	8009848 <_free_r+0x24>
 80098a0:	6820      	ldr	r0, [r4, #0]
 80098a2:	1821      	adds	r1, r4, r0
 80098a4:	428a      	cmp	r2, r1
 80098a6:	bf04      	itt	eq
 80098a8:	6811      	ldreq	r1, [r2, #0]
 80098aa:	6852      	ldreq	r2, [r2, #4]
 80098ac:	6062      	str	r2, [r4, #4]
 80098ae:	bf04      	itt	eq
 80098b0:	1809      	addeq	r1, r1, r0
 80098b2:	6021      	streq	r1, [r4, #0]
 80098b4:	605c      	str	r4, [r3, #4]
 80098b6:	e7c7      	b.n	8009848 <_free_r+0x24>
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	bf00      	nop
 80098bc:	20000254 	.word	0x20000254

080098c0 <_malloc_r>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	1ccd      	adds	r5, r1, #3
 80098c4:	f025 0503 	bic.w	r5, r5, #3
 80098c8:	3508      	adds	r5, #8
 80098ca:	2d0c      	cmp	r5, #12
 80098cc:	bf38      	it	cc
 80098ce:	250c      	movcc	r5, #12
 80098d0:	2d00      	cmp	r5, #0
 80098d2:	4606      	mov	r6, r0
 80098d4:	db01      	blt.n	80098da <_malloc_r+0x1a>
 80098d6:	42a9      	cmp	r1, r5
 80098d8:	d903      	bls.n	80098e2 <_malloc_r+0x22>
 80098da:	230c      	movs	r3, #12
 80098dc:	6033      	str	r3, [r6, #0]
 80098de:	2000      	movs	r0, #0
 80098e0:	bd70      	pop	{r4, r5, r6, pc}
 80098e2:	f000 f9e1 	bl	8009ca8 <__malloc_lock>
 80098e6:	4a21      	ldr	r2, [pc, #132]	; (800996c <_malloc_r+0xac>)
 80098e8:	6814      	ldr	r4, [r2, #0]
 80098ea:	4621      	mov	r1, r4
 80098ec:	b991      	cbnz	r1, 8009914 <_malloc_r+0x54>
 80098ee:	4c20      	ldr	r4, [pc, #128]	; (8009970 <_malloc_r+0xb0>)
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	b91b      	cbnz	r3, 80098fc <_malloc_r+0x3c>
 80098f4:	4630      	mov	r0, r6
 80098f6:	f000 f98f 	bl	8009c18 <_sbrk_r>
 80098fa:	6020      	str	r0, [r4, #0]
 80098fc:	4629      	mov	r1, r5
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 f98a 	bl	8009c18 <_sbrk_r>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d124      	bne.n	8009952 <_malloc_r+0x92>
 8009908:	230c      	movs	r3, #12
 800990a:	6033      	str	r3, [r6, #0]
 800990c:	4630      	mov	r0, r6
 800990e:	f000 f9cc 	bl	8009caa <__malloc_unlock>
 8009912:	e7e4      	b.n	80098de <_malloc_r+0x1e>
 8009914:	680b      	ldr	r3, [r1, #0]
 8009916:	1b5b      	subs	r3, r3, r5
 8009918:	d418      	bmi.n	800994c <_malloc_r+0x8c>
 800991a:	2b0b      	cmp	r3, #11
 800991c:	d90f      	bls.n	800993e <_malloc_r+0x7e>
 800991e:	600b      	str	r3, [r1, #0]
 8009920:	50cd      	str	r5, [r1, r3]
 8009922:	18cc      	adds	r4, r1, r3
 8009924:	4630      	mov	r0, r6
 8009926:	f000 f9c0 	bl	8009caa <__malloc_unlock>
 800992a:	f104 000b 	add.w	r0, r4, #11
 800992e:	1d23      	adds	r3, r4, #4
 8009930:	f020 0007 	bic.w	r0, r0, #7
 8009934:	1ac3      	subs	r3, r0, r3
 8009936:	d0d3      	beq.n	80098e0 <_malloc_r+0x20>
 8009938:	425a      	negs	r2, r3
 800993a:	50e2      	str	r2, [r4, r3]
 800993c:	e7d0      	b.n	80098e0 <_malloc_r+0x20>
 800993e:	428c      	cmp	r4, r1
 8009940:	684b      	ldr	r3, [r1, #4]
 8009942:	bf16      	itet	ne
 8009944:	6063      	strne	r3, [r4, #4]
 8009946:	6013      	streq	r3, [r2, #0]
 8009948:	460c      	movne	r4, r1
 800994a:	e7eb      	b.n	8009924 <_malloc_r+0x64>
 800994c:	460c      	mov	r4, r1
 800994e:	6849      	ldr	r1, [r1, #4]
 8009950:	e7cc      	b.n	80098ec <_malloc_r+0x2c>
 8009952:	1cc4      	adds	r4, r0, #3
 8009954:	f024 0403 	bic.w	r4, r4, #3
 8009958:	42a0      	cmp	r0, r4
 800995a:	d005      	beq.n	8009968 <_malloc_r+0xa8>
 800995c:	1a21      	subs	r1, r4, r0
 800995e:	4630      	mov	r0, r6
 8009960:	f000 f95a 	bl	8009c18 <_sbrk_r>
 8009964:	3001      	adds	r0, #1
 8009966:	d0cf      	beq.n	8009908 <_malloc_r+0x48>
 8009968:	6025      	str	r5, [r4, #0]
 800996a:	e7db      	b.n	8009924 <_malloc_r+0x64>
 800996c:	20000254 	.word	0x20000254
 8009970:	20000258 	.word	0x20000258

08009974 <__ssputs_r>:
 8009974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009978:	688e      	ldr	r6, [r1, #8]
 800997a:	429e      	cmp	r6, r3
 800997c:	4682      	mov	sl, r0
 800997e:	460c      	mov	r4, r1
 8009980:	4690      	mov	r8, r2
 8009982:	4699      	mov	r9, r3
 8009984:	d837      	bhi.n	80099f6 <__ssputs_r+0x82>
 8009986:	898a      	ldrh	r2, [r1, #12]
 8009988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800998c:	d031      	beq.n	80099f2 <__ssputs_r+0x7e>
 800998e:	6825      	ldr	r5, [r4, #0]
 8009990:	6909      	ldr	r1, [r1, #16]
 8009992:	1a6f      	subs	r7, r5, r1
 8009994:	6965      	ldr	r5, [r4, #20]
 8009996:	2302      	movs	r3, #2
 8009998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800999c:	fb95 f5f3 	sdiv	r5, r5, r3
 80099a0:	f109 0301 	add.w	r3, r9, #1
 80099a4:	443b      	add	r3, r7
 80099a6:	429d      	cmp	r5, r3
 80099a8:	bf38      	it	cc
 80099aa:	461d      	movcc	r5, r3
 80099ac:	0553      	lsls	r3, r2, #21
 80099ae:	d530      	bpl.n	8009a12 <__ssputs_r+0x9e>
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7ff ff85 	bl	80098c0 <_malloc_r>
 80099b6:	4606      	mov	r6, r0
 80099b8:	b950      	cbnz	r0, 80099d0 <__ssputs_r+0x5c>
 80099ba:	230c      	movs	r3, #12
 80099bc:	f8ca 3000 	str.w	r3, [sl]
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d0:	463a      	mov	r2, r7
 80099d2:	6921      	ldr	r1, [r4, #16]
 80099d4:	f7fc fc58 	bl	8006288 <memcpy>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	6126      	str	r6, [r4, #16]
 80099e6:	6165      	str	r5, [r4, #20]
 80099e8:	443e      	add	r6, r7
 80099ea:	1bed      	subs	r5, r5, r7
 80099ec:	6026      	str	r6, [r4, #0]
 80099ee:	60a5      	str	r5, [r4, #8]
 80099f0:	464e      	mov	r6, r9
 80099f2:	454e      	cmp	r6, r9
 80099f4:	d900      	bls.n	80099f8 <__ssputs_r+0x84>
 80099f6:	464e      	mov	r6, r9
 80099f8:	4632      	mov	r2, r6
 80099fa:	4641      	mov	r1, r8
 80099fc:	6820      	ldr	r0, [r4, #0]
 80099fe:	f000 f93a 	bl	8009c76 <memmove>
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	1b9b      	subs	r3, r3, r6
 8009a06:	60a3      	str	r3, [r4, #8]
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	441e      	add	r6, r3
 8009a0c:	6026      	str	r6, [r4, #0]
 8009a0e:	2000      	movs	r0, #0
 8009a10:	e7dc      	b.n	80099cc <__ssputs_r+0x58>
 8009a12:	462a      	mov	r2, r5
 8009a14:	f000 f94a 	bl	8009cac <_realloc_r>
 8009a18:	4606      	mov	r6, r0
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d1e2      	bne.n	80099e4 <__ssputs_r+0x70>
 8009a1e:	6921      	ldr	r1, [r4, #16]
 8009a20:	4650      	mov	r0, sl
 8009a22:	f7ff feff 	bl	8009824 <_free_r>
 8009a26:	e7c8      	b.n	80099ba <__ssputs_r+0x46>

08009a28 <_svfiprintf_r>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	461d      	mov	r5, r3
 8009a2e:	898b      	ldrh	r3, [r1, #12]
 8009a30:	061f      	lsls	r7, r3, #24
 8009a32:	b09d      	sub	sp, #116	; 0x74
 8009a34:	4680      	mov	r8, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	4616      	mov	r6, r2
 8009a3a:	d50f      	bpl.n	8009a5c <_svfiprintf_r+0x34>
 8009a3c:	690b      	ldr	r3, [r1, #16]
 8009a3e:	b96b      	cbnz	r3, 8009a5c <_svfiprintf_r+0x34>
 8009a40:	2140      	movs	r1, #64	; 0x40
 8009a42:	f7ff ff3d 	bl	80098c0 <_malloc_r>
 8009a46:	6020      	str	r0, [r4, #0]
 8009a48:	6120      	str	r0, [r4, #16]
 8009a4a:	b928      	cbnz	r0, 8009a58 <_svfiprintf_r+0x30>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	f8c8 3000 	str.w	r3, [r8]
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295
 8009a56:	e0c8      	b.n	8009bea <_svfiprintf_r+0x1c2>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	6163      	str	r3, [r4, #20]
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a60:	2320      	movs	r3, #32
 8009a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a66:	2330      	movs	r3, #48	; 0x30
 8009a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a6c:	9503      	str	r5, [sp, #12]
 8009a6e:	f04f 0b01 	mov.w	fp, #1
 8009a72:	4637      	mov	r7, r6
 8009a74:	463d      	mov	r5, r7
 8009a76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a7a:	b10b      	cbz	r3, 8009a80 <_svfiprintf_r+0x58>
 8009a7c:	2b25      	cmp	r3, #37	; 0x25
 8009a7e:	d13e      	bne.n	8009afe <_svfiprintf_r+0xd6>
 8009a80:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a84:	d00b      	beq.n	8009a9e <_svfiprintf_r+0x76>
 8009a86:	4653      	mov	r3, sl
 8009a88:	4632      	mov	r2, r6
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	f7ff ff71 	bl	8009974 <__ssputs_r>
 8009a92:	3001      	adds	r0, #1
 8009a94:	f000 80a4 	beq.w	8009be0 <_svfiprintf_r+0x1b8>
 8009a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9a:	4453      	add	r3, sl
 8009a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9e:	783b      	ldrb	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 809d 	beq.w	8009be0 <_svfiprintf_r+0x1b8>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab0:	9304      	str	r3, [sp, #16]
 8009ab2:	9307      	str	r3, [sp, #28]
 8009ab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ab8:	931a      	str	r3, [sp, #104]	; 0x68
 8009aba:	462f      	mov	r7, r5
 8009abc:	2205      	movs	r2, #5
 8009abe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009ac2:	4850      	ldr	r0, [pc, #320]	; (8009c04 <_svfiprintf_r+0x1dc>)
 8009ac4:	f7f6 fb94 	bl	80001f0 <memchr>
 8009ac8:	9b04      	ldr	r3, [sp, #16]
 8009aca:	b9d0      	cbnz	r0, 8009b02 <_svfiprintf_r+0xda>
 8009acc:	06d9      	lsls	r1, r3, #27
 8009ace:	bf44      	itt	mi
 8009ad0:	2220      	movmi	r2, #32
 8009ad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ad6:	071a      	lsls	r2, r3, #28
 8009ad8:	bf44      	itt	mi
 8009ada:	222b      	movmi	r2, #43	; 0x2b
 8009adc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ae0:	782a      	ldrb	r2, [r5, #0]
 8009ae2:	2a2a      	cmp	r2, #42	; 0x2a
 8009ae4:	d015      	beq.n	8009b12 <_svfiprintf_r+0xea>
 8009ae6:	9a07      	ldr	r2, [sp, #28]
 8009ae8:	462f      	mov	r7, r5
 8009aea:	2000      	movs	r0, #0
 8009aec:	250a      	movs	r5, #10
 8009aee:	4639      	mov	r1, r7
 8009af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009af4:	3b30      	subs	r3, #48	; 0x30
 8009af6:	2b09      	cmp	r3, #9
 8009af8:	d94d      	bls.n	8009b96 <_svfiprintf_r+0x16e>
 8009afa:	b1b8      	cbz	r0, 8009b2c <_svfiprintf_r+0x104>
 8009afc:	e00f      	b.n	8009b1e <_svfiprintf_r+0xf6>
 8009afe:	462f      	mov	r7, r5
 8009b00:	e7b8      	b.n	8009a74 <_svfiprintf_r+0x4c>
 8009b02:	4a40      	ldr	r2, [pc, #256]	; (8009c04 <_svfiprintf_r+0x1dc>)
 8009b04:	1a80      	subs	r0, r0, r2
 8009b06:	fa0b f000 	lsl.w	r0, fp, r0
 8009b0a:	4318      	orrs	r0, r3
 8009b0c:	9004      	str	r0, [sp, #16]
 8009b0e:	463d      	mov	r5, r7
 8009b10:	e7d3      	b.n	8009aba <_svfiprintf_r+0x92>
 8009b12:	9a03      	ldr	r2, [sp, #12]
 8009b14:	1d11      	adds	r1, r2, #4
 8009b16:	6812      	ldr	r2, [r2, #0]
 8009b18:	9103      	str	r1, [sp, #12]
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	db01      	blt.n	8009b22 <_svfiprintf_r+0xfa>
 8009b1e:	9207      	str	r2, [sp, #28]
 8009b20:	e004      	b.n	8009b2c <_svfiprintf_r+0x104>
 8009b22:	4252      	negs	r2, r2
 8009b24:	f043 0302 	orr.w	r3, r3, #2
 8009b28:	9207      	str	r2, [sp, #28]
 8009b2a:	9304      	str	r3, [sp, #16]
 8009b2c:	783b      	ldrb	r3, [r7, #0]
 8009b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b30:	d10c      	bne.n	8009b4c <_svfiprintf_r+0x124>
 8009b32:	787b      	ldrb	r3, [r7, #1]
 8009b34:	2b2a      	cmp	r3, #42	; 0x2a
 8009b36:	d133      	bne.n	8009ba0 <_svfiprintf_r+0x178>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	1d1a      	adds	r2, r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	9203      	str	r2, [sp, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfb8      	it	lt
 8009b44:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b48:	3702      	adds	r7, #2
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	4d2e      	ldr	r5, [pc, #184]	; (8009c08 <_svfiprintf_r+0x1e0>)
 8009b4e:	7839      	ldrb	r1, [r7, #0]
 8009b50:	2203      	movs	r2, #3
 8009b52:	4628      	mov	r0, r5
 8009b54:	f7f6 fb4c 	bl	80001f0 <memchr>
 8009b58:	b138      	cbz	r0, 8009b6a <_svfiprintf_r+0x142>
 8009b5a:	2340      	movs	r3, #64	; 0x40
 8009b5c:	1b40      	subs	r0, r0, r5
 8009b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b62:	9b04      	ldr	r3, [sp, #16]
 8009b64:	4303      	orrs	r3, r0
 8009b66:	3701      	adds	r7, #1
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	7839      	ldrb	r1, [r7, #0]
 8009b6c:	4827      	ldr	r0, [pc, #156]	; (8009c0c <_svfiprintf_r+0x1e4>)
 8009b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b72:	2206      	movs	r2, #6
 8009b74:	1c7e      	adds	r6, r7, #1
 8009b76:	f7f6 fb3b 	bl	80001f0 <memchr>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d038      	beq.n	8009bf0 <_svfiprintf_r+0x1c8>
 8009b7e:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <_svfiprintf_r+0x1e8>)
 8009b80:	bb13      	cbnz	r3, 8009bc8 <_svfiprintf_r+0x1a0>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	3307      	adds	r3, #7
 8009b86:	f023 0307 	bic.w	r3, r3, #7
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	9303      	str	r3, [sp, #12]
 8009b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b90:	444b      	add	r3, r9
 8009b92:	9309      	str	r3, [sp, #36]	; 0x24
 8009b94:	e76d      	b.n	8009a72 <_svfiprintf_r+0x4a>
 8009b96:	fb05 3202 	mla	r2, r5, r2, r3
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	460f      	mov	r7, r1
 8009b9e:	e7a6      	b.n	8009aee <_svfiprintf_r+0xc6>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	3701      	adds	r7, #1
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	250a      	movs	r5, #10
 8009baa:	4638      	mov	r0, r7
 8009bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb0:	3a30      	subs	r2, #48	; 0x30
 8009bb2:	2a09      	cmp	r2, #9
 8009bb4:	d903      	bls.n	8009bbe <_svfiprintf_r+0x196>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d0c8      	beq.n	8009b4c <_svfiprintf_r+0x124>
 8009bba:	9105      	str	r1, [sp, #20]
 8009bbc:	e7c6      	b.n	8009b4c <_svfiprintf_r+0x124>
 8009bbe:	fb05 2101 	mla	r1, r5, r1, r2
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	e7f0      	b.n	8009baa <_svfiprintf_r+0x182>
 8009bc8:	ab03      	add	r3, sp, #12
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <_svfiprintf_r+0x1ec>)
 8009bd0:	a904      	add	r1, sp, #16
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	f7fc fc00 	bl	80063d8 <_printf_float>
 8009bd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bdc:	4681      	mov	r9, r0
 8009bde:	d1d6      	bne.n	8009b8e <_svfiprintf_r+0x166>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	065b      	lsls	r3, r3, #25
 8009be4:	f53f af35 	bmi.w	8009a52 <_svfiprintf_r+0x2a>
 8009be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bea:	b01d      	add	sp, #116	; 0x74
 8009bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf0:	ab03      	add	r3, sp, #12
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	4b07      	ldr	r3, [pc, #28]	; (8009c14 <_svfiprintf_r+0x1ec>)
 8009bf8:	a904      	add	r1, sp, #16
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f7fc fea2 	bl	8006944 <_printf_i>
 8009c00:	e7ea      	b.n	8009bd8 <_svfiprintf_r+0x1b0>
 8009c02:	bf00      	nop
 8009c04:	0800af3c 	.word	0x0800af3c
 8009c08:	0800af42 	.word	0x0800af42
 8009c0c:	0800af46 	.word	0x0800af46
 8009c10:	080063d9 	.word	0x080063d9
 8009c14:	08009975 	.word	0x08009975

08009c18 <_sbrk_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4c06      	ldr	r4, [pc, #24]	; (8009c34 <_sbrk_r+0x1c>)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4605      	mov	r5, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	f7f9 faf4 	bl	8003210 <_sbrk>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_sbrk_r+0x1a>
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_sbrk_r+0x1a>
 8009c30:	602b      	str	r3, [r5, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	200023a0 	.word	0x200023a0

08009c38 <strncmp>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	b16a      	cbz	r2, 8009c58 <strncmp+0x20>
 8009c3c:	3901      	subs	r1, #1
 8009c3e:	1884      	adds	r4, r0, r2
 8009c40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009c44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d103      	bne.n	8009c54 <strncmp+0x1c>
 8009c4c:	42a0      	cmp	r0, r4
 8009c4e:	d001      	beq.n	8009c54 <strncmp+0x1c>
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1f5      	bne.n	8009c40 <strncmp+0x8>
 8009c54:	1a98      	subs	r0, r3, r2
 8009c56:	bd10      	pop	{r4, pc}
 8009c58:	4610      	mov	r0, r2
 8009c5a:	e7fc      	b.n	8009c56 <strncmp+0x1e>

08009c5c <__ascii_wctomb>:
 8009c5c:	b149      	cbz	r1, 8009c72 <__ascii_wctomb+0x16>
 8009c5e:	2aff      	cmp	r2, #255	; 0xff
 8009c60:	bf85      	ittet	hi
 8009c62:	238a      	movhi	r3, #138	; 0x8a
 8009c64:	6003      	strhi	r3, [r0, #0]
 8009c66:	700a      	strbls	r2, [r1, #0]
 8009c68:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c6c:	bf98      	it	ls
 8009c6e:	2001      	movls	r0, #1
 8009c70:	4770      	bx	lr
 8009c72:	4608      	mov	r0, r1
 8009c74:	4770      	bx	lr

08009c76 <memmove>:
 8009c76:	4288      	cmp	r0, r1
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	eb01 0302 	add.w	r3, r1, r2
 8009c7e:	d807      	bhi.n	8009c90 <memmove+0x1a>
 8009c80:	1e42      	subs	r2, r0, #1
 8009c82:	4299      	cmp	r1, r3
 8009c84:	d00a      	beq.n	8009c9c <memmove+0x26>
 8009c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c8e:	e7f8      	b.n	8009c82 <memmove+0xc>
 8009c90:	4283      	cmp	r3, r0
 8009c92:	d9f5      	bls.n	8009c80 <memmove+0xa>
 8009c94:	1881      	adds	r1, r0, r2
 8009c96:	1ad2      	subs	r2, r2, r3
 8009c98:	42d3      	cmn	r3, r2
 8009c9a:	d100      	bne.n	8009c9e <memmove+0x28>
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ca2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ca6:	e7f7      	b.n	8009c98 <memmove+0x22>

08009ca8 <__malloc_lock>:
 8009ca8:	4770      	bx	lr

08009caa <__malloc_unlock>:
 8009caa:	4770      	bx	lr

08009cac <_realloc_r>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	4607      	mov	r7, r0
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	460e      	mov	r6, r1
 8009cb4:	b921      	cbnz	r1, 8009cc0 <_realloc_r+0x14>
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cbc:	f7ff be00 	b.w	80098c0 <_malloc_r>
 8009cc0:	b922      	cbnz	r2, 8009ccc <_realloc_r+0x20>
 8009cc2:	f7ff fdaf 	bl	8009824 <_free_r>
 8009cc6:	4625      	mov	r5, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ccc:	f000 f814 	bl	8009cf8 <_malloc_usable_size_r>
 8009cd0:	42a0      	cmp	r0, r4
 8009cd2:	d20f      	bcs.n	8009cf4 <_realloc_r+0x48>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f7ff fdf2 	bl	80098c0 <_malloc_r>
 8009cdc:	4605      	mov	r5, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0f2      	beq.n	8009cc8 <_realloc_r+0x1c>
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	f7fc facf 	bl	8006288 <memcpy>
 8009cea:	4631      	mov	r1, r6
 8009cec:	4638      	mov	r0, r7
 8009cee:	f7ff fd99 	bl	8009824 <_free_r>
 8009cf2:	e7e9      	b.n	8009cc8 <_realloc_r+0x1c>
 8009cf4:	4635      	mov	r5, r6
 8009cf6:	e7e7      	b.n	8009cc8 <_realloc_r+0x1c>

08009cf8 <_malloc_usable_size_r>:
 8009cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cfc:	1f18      	subs	r0, r3, #4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bfbc      	itt	lt
 8009d02:	580b      	ldrlt	r3, [r1, r0]
 8009d04:	18c0      	addlt	r0, r0, r3
 8009d06:	4770      	bx	lr

08009d08 <asin>:
 8009d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0a:	ed2d 8b02 	vpush	{d8}
 8009d0e:	4e26      	ldr	r6, [pc, #152]	; (8009da8 <asin+0xa0>)
 8009d10:	b08b      	sub	sp, #44	; 0x2c
 8009d12:	ec55 4b10 	vmov	r4, r5, d0
 8009d16:	f000 f84f 	bl	8009db8 <__ieee754_asin>
 8009d1a:	f996 3000 	ldrsb.w	r3, [r6]
 8009d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8009d22:	eef0 8a60 	vmov.f32	s17, s1
 8009d26:	3301      	adds	r3, #1
 8009d28:	d036      	beq.n	8009d98 <asin+0x90>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 ff03 	bl	8000b3c <__aeabi_dcmpun>
 8009d36:	4607      	mov	r7, r0
 8009d38:	bb70      	cbnz	r0, 8009d98 <asin+0x90>
 8009d3a:	ec45 4b10 	vmov	d0, r4, r5
 8009d3e:	f000 fafb 	bl	800a338 <fabs>
 8009d42:	2200      	movs	r2, #0
 8009d44:	4b19      	ldr	r3, [pc, #100]	; (8009dac <asin+0xa4>)
 8009d46:	ec51 0b10 	vmov	r0, r1, d0
 8009d4a:	f7f6 feed 	bl	8000b28 <__aeabi_dcmpgt>
 8009d4e:	b318      	cbz	r0, 8009d98 <asin+0x90>
 8009d50:	2301      	movs	r3, #1
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	4816      	ldr	r0, [pc, #88]	; (8009db0 <asin+0xa8>)
 8009d56:	4b17      	ldr	r3, [pc, #92]	; (8009db4 <asin+0xac>)
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	9708      	str	r7, [sp, #32]
 8009d5c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009d60:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009d64:	f000 faf4 	bl	800a350 <nan>
 8009d68:	f996 3000 	ldrsb.w	r3, [r6]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009d72:	d104      	bne.n	8009d7e <asin+0x76>
 8009d74:	f7fc fa5e 	bl	8006234 <__errno>
 8009d78:	2321      	movs	r3, #33	; 0x21
 8009d7a:	6003      	str	r3, [r0, #0]
 8009d7c:	e004      	b.n	8009d88 <asin+0x80>
 8009d7e:	4668      	mov	r0, sp
 8009d80:	f000 fae3 	bl	800a34a <matherr>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d0f5      	beq.n	8009d74 <asin+0x6c>
 8009d88:	9b08      	ldr	r3, [sp, #32]
 8009d8a:	b11b      	cbz	r3, 8009d94 <asin+0x8c>
 8009d8c:	f7fc fa52 	bl	8006234 <__errno>
 8009d90:	9b08      	ldr	r3, [sp, #32]
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009d98:	eeb0 0a48 	vmov.f32	s0, s16
 8009d9c:	eef0 0a68 	vmov.f32	s1, s17
 8009da0:	b00b      	add	sp, #44	; 0x2c
 8009da2:	ecbd 8b02 	vpop	{d8}
 8009da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da8:	200001e4 	.word	0x200001e4
 8009dac:	3ff00000 	.word	0x3ff00000
 8009db0:	0800af41 	.word	0x0800af41
 8009db4:	0800b04e 	.word	0x0800b04e

08009db8 <__ieee754_asin>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	ec55 4b10 	vmov	r4, r5, d0
 8009dc0:	4bcb      	ldr	r3, [pc, #812]	; (800a0f0 <__ieee754_asin+0x338>)
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009dc8:	429f      	cmp	r7, r3
 8009dca:	9501      	str	r5, [sp, #4]
 8009dcc:	dd31      	ble.n	8009e32 <__ieee754_asin+0x7a>
 8009dce:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009dd2:	ee10 3a10 	vmov	r3, s0
 8009dd6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8009dda:	433b      	orrs	r3, r7
 8009ddc:	d117      	bne.n	8009e0e <__ieee754_asin+0x56>
 8009dde:	a3aa      	add	r3, pc, #680	; (adr r3, 800a088 <__ieee754_asin+0x2d0>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	ee10 0a10 	vmov	r0, s0
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fc0d 	bl	8000608 <__aeabi_dmul>
 8009dee:	a3a8      	add	r3, pc, #672	; (adr r3, 800a090 <__ieee754_asin+0x2d8>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 fc04 	bl	8000608 <__aeabi_dmul>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	4630      	mov	r0, r6
 8009e06:	4639      	mov	r1, r7
 8009e08:	f7f6 fa48 	bl	800029c <__adddf3>
 8009e0c:	e00a      	b.n	8009e24 <__ieee754_asin+0x6c>
 8009e0e:	ee10 2a10 	vmov	r2, s0
 8009e12:	462b      	mov	r3, r5
 8009e14:	4620      	mov	r0, r4
 8009e16:	4629      	mov	r1, r5
 8009e18:	f7f6 fa3e 	bl	8000298 <__aeabi_dsub>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	f7f6 fd1c 	bl	800085c <__aeabi_ddiv>
 8009e24:	4604      	mov	r4, r0
 8009e26:	460d      	mov	r5, r1
 8009e28:	ec45 4b10 	vmov	d0, r4, r5
 8009e2c:	b007      	add	sp, #28
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	4bb0      	ldr	r3, [pc, #704]	; (800a0f4 <__ieee754_asin+0x33c>)
 8009e34:	429f      	cmp	r7, r3
 8009e36:	dc11      	bgt.n	8009e5c <__ieee754_asin+0xa4>
 8009e38:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8009e3c:	f280 80ae 	bge.w	8009f9c <__ieee754_asin+0x1e4>
 8009e40:	a395      	add	r3, pc, #596	; (adr r3, 800a098 <__ieee754_asin+0x2e0>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	ee10 0a10 	vmov	r0, s0
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	f7f6 fa26 	bl	800029c <__adddf3>
 8009e50:	2200      	movs	r2, #0
 8009e52:	4ba9      	ldr	r3, [pc, #676]	; (800a0f8 <__ieee754_asin+0x340>)
 8009e54:	f7f6 fe68 	bl	8000b28 <__aeabi_dcmpgt>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d1e5      	bne.n	8009e28 <__ieee754_asin+0x70>
 8009e5c:	ec45 4b10 	vmov	d0, r4, r5
 8009e60:	f000 fa6a 	bl	800a338 <fabs>
 8009e64:	2000      	movs	r0, #0
 8009e66:	ec53 2b10 	vmov	r2, r3, d0
 8009e6a:	49a3      	ldr	r1, [pc, #652]	; (800a0f8 <__ieee754_asin+0x340>)
 8009e6c:	f7f6 fa14 	bl	8000298 <__aeabi_dsub>
 8009e70:	2200      	movs	r2, #0
 8009e72:	4ba2      	ldr	r3, [pc, #648]	; (800a0fc <__ieee754_asin+0x344>)
 8009e74:	f7f6 fbc8 	bl	8000608 <__aeabi_dmul>
 8009e78:	a389      	add	r3, pc, #548	; (adr r3, 800a0a0 <__ieee754_asin+0x2e8>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	4604      	mov	r4, r0
 8009e80:	460d      	mov	r5, r1
 8009e82:	f7f6 fbc1 	bl	8000608 <__aeabi_dmul>
 8009e86:	a388      	add	r3, pc, #544	; (adr r3, 800a0a8 <__ieee754_asin+0x2f0>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fa06 	bl	800029c <__adddf3>
 8009e90:	4622      	mov	r2, r4
 8009e92:	462b      	mov	r3, r5
 8009e94:	f7f6 fbb8 	bl	8000608 <__aeabi_dmul>
 8009e98:	a385      	add	r3, pc, #532	; (adr r3, 800a0b0 <__ieee754_asin+0x2f8>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 f9fb 	bl	8000298 <__aeabi_dsub>
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	f7f6 fbaf 	bl	8000608 <__aeabi_dmul>
 8009eaa:	a383      	add	r3, pc, #524	; (adr r3, 800a0b8 <__ieee754_asin+0x300>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	f7f6 f9f4 	bl	800029c <__adddf3>
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	462b      	mov	r3, r5
 8009eb8:	f7f6 fba6 	bl	8000608 <__aeabi_dmul>
 8009ebc:	a380      	add	r3, pc, #512	; (adr r3, 800a0c0 <__ieee754_asin+0x308>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 f9e9 	bl	8000298 <__aeabi_dsub>
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	462b      	mov	r3, r5
 8009eca:	f7f6 fb9d 	bl	8000608 <__aeabi_dmul>
 8009ece:	a37e      	add	r3, pc, #504	; (adr r3, 800a0c8 <__ieee754_asin+0x310>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 f9e2 	bl	800029c <__adddf3>
 8009ed8:	4622      	mov	r2, r4
 8009eda:	462b      	mov	r3, r5
 8009edc:	f7f6 fb94 	bl	8000608 <__aeabi_dmul>
 8009ee0:	a37b      	add	r3, pc, #492	; (adr r3, 800a0d0 <__ieee754_asin+0x318>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	4689      	mov	r9, r1
 8009eea:	4620      	mov	r0, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7f6 fb8b 	bl	8000608 <__aeabi_dmul>
 8009ef2:	a379      	add	r3, pc, #484	; (adr r3, 800a0d8 <__ieee754_asin+0x320>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 f9ce 	bl	8000298 <__aeabi_dsub>
 8009efc:	4622      	mov	r2, r4
 8009efe:	462b      	mov	r3, r5
 8009f00:	f7f6 fb82 	bl	8000608 <__aeabi_dmul>
 8009f04:	a376      	add	r3, pc, #472	; (adr r3, 800a0e0 <__ieee754_asin+0x328>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f9c7 	bl	800029c <__adddf3>
 8009f0e:	4622      	mov	r2, r4
 8009f10:	462b      	mov	r3, r5
 8009f12:	f7f6 fb79 	bl	8000608 <__aeabi_dmul>
 8009f16:	a374      	add	r3, pc, #464	; (adr r3, 800a0e8 <__ieee754_asin+0x330>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	4622      	mov	r2, r4
 8009f22:	462b      	mov	r3, r5
 8009f24:	f7f6 fb70 	bl	8000608 <__aeabi_dmul>
 8009f28:	4b73      	ldr	r3, [pc, #460]	; (800a0f8 <__ieee754_asin+0x340>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f7f6 f9b6 	bl	800029c <__adddf3>
 8009f30:	ec45 4b10 	vmov	d0, r4, r5
 8009f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f38:	f000 f94e 	bl	800a1d8 <__ieee754_sqrt>
 8009f3c:	4b70      	ldr	r3, [pc, #448]	; (800a100 <__ieee754_asin+0x348>)
 8009f3e:	429f      	cmp	r7, r3
 8009f40:	ec5b ab10 	vmov	sl, fp, d0
 8009f44:	f340 80de 	ble.w	800a104 <__ieee754_asin+0x34c>
 8009f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 fc84 	bl	800085c <__aeabi_ddiv>
 8009f54:	4652      	mov	r2, sl
 8009f56:	465b      	mov	r3, fp
 8009f58:	f7f6 fb56 	bl	8000608 <__aeabi_dmul>
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	465b      	mov	r3, fp
 8009f60:	f7f6 f99c 	bl	800029c <__adddf3>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	f7f6 f998 	bl	800029c <__adddf3>
 8009f6c:	a348      	add	r3, pc, #288	; (adr r3, 800a090 <__ieee754_asin+0x2d8>)
 8009f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f72:	f7f6 f991 	bl	8000298 <__aeabi_dsub>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	a143      	add	r1, pc, #268	; (adr r1, 800a088 <__ieee754_asin+0x2d0>)
 8009f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f80:	f7f6 f98a 	bl	8000298 <__aeabi_dsub>
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfdc      	itt	le
 8009f8a:	4602      	movle	r2, r0
 8009f8c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	bfdc      	itt	le
 8009f96:	4614      	movle	r4, r2
 8009f98:	461d      	movle	r5, r3
 8009f9a:	e745      	b.n	8009e28 <__ieee754_asin+0x70>
 8009f9c:	ee10 2a10 	vmov	r2, s0
 8009fa0:	ee10 0a10 	vmov	r0, s0
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7f6 fb2e 	bl	8000608 <__aeabi_dmul>
 8009fac:	a33c      	add	r3, pc, #240	; (adr r3, 800a0a0 <__ieee754_asin+0x2e8>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	f7f6 fb27 	bl	8000608 <__aeabi_dmul>
 8009fba:	a33b      	add	r3, pc, #236	; (adr r3, 800a0a8 <__ieee754_asin+0x2f0>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f96c 	bl	800029c <__adddf3>
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	f7f6 fb1e 	bl	8000608 <__aeabi_dmul>
 8009fcc:	a338      	add	r3, pc, #224	; (adr r3, 800a0b0 <__ieee754_asin+0x2f8>)
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f7f6 f961 	bl	8000298 <__aeabi_dsub>
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	463b      	mov	r3, r7
 8009fda:	f7f6 fb15 	bl	8000608 <__aeabi_dmul>
 8009fde:	a336      	add	r3, pc, #216	; (adr r3, 800a0b8 <__ieee754_asin+0x300>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	f7f6 f95a 	bl	800029c <__adddf3>
 8009fe8:	4632      	mov	r2, r6
 8009fea:	463b      	mov	r3, r7
 8009fec:	f7f6 fb0c 	bl	8000608 <__aeabi_dmul>
 8009ff0:	a333      	add	r3, pc, #204	; (adr r3, 800a0c0 <__ieee754_asin+0x308>)
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	f7f6 f94f 	bl	8000298 <__aeabi_dsub>
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	f7f6 fb03 	bl	8000608 <__aeabi_dmul>
 800a002:	a331      	add	r3, pc, #196	; (adr r3, 800a0c8 <__ieee754_asin+0x310>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f7f6 f948 	bl	800029c <__adddf3>
 800a00c:	4632      	mov	r2, r6
 800a00e:	463b      	mov	r3, r7
 800a010:	f7f6 fafa 	bl	8000608 <__aeabi_dmul>
 800a014:	a32e      	add	r3, pc, #184	; (adr r3, 800a0d0 <__ieee754_asin+0x318>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	4680      	mov	r8, r0
 800a01c:	4689      	mov	r9, r1
 800a01e:	4630      	mov	r0, r6
 800a020:	4639      	mov	r1, r7
 800a022:	f7f6 faf1 	bl	8000608 <__aeabi_dmul>
 800a026:	a32c      	add	r3, pc, #176	; (adr r3, 800a0d8 <__ieee754_asin+0x320>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	f7f6 f934 	bl	8000298 <__aeabi_dsub>
 800a030:	4632      	mov	r2, r6
 800a032:	463b      	mov	r3, r7
 800a034:	f7f6 fae8 	bl	8000608 <__aeabi_dmul>
 800a038:	a329      	add	r3, pc, #164	; (adr r3, 800a0e0 <__ieee754_asin+0x328>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 f92d 	bl	800029c <__adddf3>
 800a042:	4632      	mov	r2, r6
 800a044:	463b      	mov	r3, r7
 800a046:	f7f6 fadf 	bl	8000608 <__aeabi_dmul>
 800a04a:	a327      	add	r3, pc, #156	; (adr r3, 800a0e8 <__ieee754_asin+0x330>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7f6 f922 	bl	8000298 <__aeabi_dsub>
 800a054:	4632      	mov	r2, r6
 800a056:	463b      	mov	r3, r7
 800a058:	f7f6 fad6 	bl	8000608 <__aeabi_dmul>
 800a05c:	2200      	movs	r2, #0
 800a05e:	4b26      	ldr	r3, [pc, #152]	; (800a0f8 <__ieee754_asin+0x340>)
 800a060:	f7f6 f91c 	bl	800029c <__adddf3>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4640      	mov	r0, r8
 800a06a:	4649      	mov	r1, r9
 800a06c:	f7f6 fbf6 	bl	800085c <__aeabi_ddiv>
 800a070:	4622      	mov	r2, r4
 800a072:	462b      	mov	r3, r5
 800a074:	f7f6 fac8 	bl	8000608 <__aeabi_dmul>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	e6c2      	b.n	8009e08 <__ieee754_asin+0x50>
 800a082:	bf00      	nop
 800a084:	f3af 8000 	nop.w
 800a088:	54442d18 	.word	0x54442d18
 800a08c:	3ff921fb 	.word	0x3ff921fb
 800a090:	33145c07 	.word	0x33145c07
 800a094:	3c91a626 	.word	0x3c91a626
 800a098:	8800759c 	.word	0x8800759c
 800a09c:	7e37e43c 	.word	0x7e37e43c
 800a0a0:	0dfdf709 	.word	0x0dfdf709
 800a0a4:	3f023de1 	.word	0x3f023de1
 800a0a8:	7501b288 	.word	0x7501b288
 800a0ac:	3f49efe0 	.word	0x3f49efe0
 800a0b0:	b5688f3b 	.word	0xb5688f3b
 800a0b4:	3fa48228 	.word	0x3fa48228
 800a0b8:	0e884455 	.word	0x0e884455
 800a0bc:	3fc9c155 	.word	0x3fc9c155
 800a0c0:	03eb6f7d 	.word	0x03eb6f7d
 800a0c4:	3fd4d612 	.word	0x3fd4d612
 800a0c8:	55555555 	.word	0x55555555
 800a0cc:	3fc55555 	.word	0x3fc55555
 800a0d0:	b12e9282 	.word	0xb12e9282
 800a0d4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a0d8:	1b8d0159 	.word	0x1b8d0159
 800a0dc:	3fe6066c 	.word	0x3fe6066c
 800a0e0:	9c598ac8 	.word	0x9c598ac8
 800a0e4:	40002ae5 	.word	0x40002ae5
 800a0e8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a0ec:	40033a27 	.word	0x40033a27
 800a0f0:	3fefffff 	.word	0x3fefffff
 800a0f4:	3fdfffff 	.word	0x3fdfffff
 800a0f8:	3ff00000 	.word	0x3ff00000
 800a0fc:	3fe00000 	.word	0x3fe00000
 800a100:	3fef3332 	.word	0x3fef3332
 800a104:	ee10 2a10 	vmov	r2, s0
 800a108:	ee10 0a10 	vmov	r0, s0
 800a10c:	465b      	mov	r3, fp
 800a10e:	4659      	mov	r1, fp
 800a110:	f7f6 f8c4 	bl	800029c <__adddf3>
 800a114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a11c:	4640      	mov	r0, r8
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 fb9c 	bl	800085c <__aeabi_ddiv>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a12c:	f7f6 fa6c 	bl	8000608 <__aeabi_dmul>
 800a130:	2600      	movs	r6, #0
 800a132:	4680      	mov	r8, r0
 800a134:	4689      	mov	r9, r1
 800a136:	4632      	mov	r2, r6
 800a138:	465b      	mov	r3, fp
 800a13a:	4630      	mov	r0, r6
 800a13c:	4659      	mov	r1, fp
 800a13e:	f7f6 fa63 	bl	8000608 <__aeabi_dmul>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4620      	mov	r0, r4
 800a148:	4629      	mov	r1, r5
 800a14a:	f7f6 f8a5 	bl	8000298 <__aeabi_dsub>
 800a14e:	4632      	mov	r2, r6
 800a150:	4604      	mov	r4, r0
 800a152:	460d      	mov	r5, r1
 800a154:	465b      	mov	r3, fp
 800a156:	4650      	mov	r0, sl
 800a158:	4659      	mov	r1, fp
 800a15a:	f7f6 f89f 	bl	800029c <__adddf3>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f7f6 fb79 	bl	800085c <__aeabi_ddiv>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	f7f6 f895 	bl	800029c <__adddf3>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	a114      	add	r1, pc, #80	; (adr r1, 800a1c8 <__ieee754_asin+0x410>)
 800a178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17c:	f7f6 f88c 	bl	8000298 <__aeabi_dsub>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4640      	mov	r0, r8
 800a186:	4649      	mov	r1, r9
 800a188:	f7f6 f886 	bl	8000298 <__aeabi_dsub>
 800a18c:	465f      	mov	r7, fp
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	4632      	mov	r2, r6
 800a194:	465b      	mov	r3, fp
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 f87f 	bl	800029c <__adddf3>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	a10b      	add	r1, pc, #44	; (adr r1, 800a1d0 <__ieee754_asin+0x418>)
 800a1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a8:	f7f6 f876 	bl	8000298 <__aeabi_dsub>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	f7f6 f870 	bl	8000298 <__aeabi_dsub>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	a104      	add	r1, pc, #16	; (adr r1, 800a1d0 <__ieee754_asin+0x418>)
 800a1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c2:	e6dd      	b.n	8009f80 <__ieee754_asin+0x1c8>
 800a1c4:	f3af 8000 	nop.w
 800a1c8:	33145c07 	.word	0x33145c07
 800a1cc:	3c91a626 	.word	0x3c91a626
 800a1d0:	54442d18 	.word	0x54442d18
 800a1d4:	3fe921fb 	.word	0x3fe921fb

0800a1d8 <__ieee754_sqrt>:
 800a1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1dc:	4955      	ldr	r1, [pc, #340]	; (800a334 <__ieee754_sqrt+0x15c>)
 800a1de:	ec55 4b10 	vmov	r4, r5, d0
 800a1e2:	43a9      	bics	r1, r5
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	d112      	bne.n	800a210 <__ieee754_sqrt+0x38>
 800a1ea:	ee10 2a10 	vmov	r2, s0
 800a1ee:	ee10 0a10 	vmov	r0, s0
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	f7f6 fa08 	bl	8000608 <__aeabi_dmul>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f6 f84c 	bl	800029c <__adddf3>
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	ec45 4b10 	vmov	d0, r4, r5
 800a20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a210:	2d00      	cmp	r5, #0
 800a212:	ee10 0a10 	vmov	r0, s0
 800a216:	4621      	mov	r1, r4
 800a218:	dc0f      	bgt.n	800a23a <__ieee754_sqrt+0x62>
 800a21a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a21e:	4330      	orrs	r0, r6
 800a220:	d0f2      	beq.n	800a208 <__ieee754_sqrt+0x30>
 800a222:	b155      	cbz	r5, 800a23a <__ieee754_sqrt+0x62>
 800a224:	ee10 2a10 	vmov	r2, s0
 800a228:	4620      	mov	r0, r4
 800a22a:	4629      	mov	r1, r5
 800a22c:	f7f6 f834 	bl	8000298 <__aeabi_dsub>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	f7f6 fb12 	bl	800085c <__aeabi_ddiv>
 800a238:	e7e4      	b.n	800a204 <__ieee754_sqrt+0x2c>
 800a23a:	151b      	asrs	r3, r3, #20
 800a23c:	d073      	beq.n	800a326 <__ieee754_sqrt+0x14e>
 800a23e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a242:	07dd      	lsls	r5, r3, #31
 800a244:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a248:	bf48      	it	mi
 800a24a:	0fc8      	lsrmi	r0, r1, #31
 800a24c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a250:	bf44      	itt	mi
 800a252:	0049      	lslmi	r1, r1, #1
 800a254:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a258:	2500      	movs	r5, #0
 800a25a:	1058      	asrs	r0, r3, #1
 800a25c:	0fcb      	lsrs	r3, r1, #31
 800a25e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a262:	0049      	lsls	r1, r1, #1
 800a264:	2316      	movs	r3, #22
 800a266:	462c      	mov	r4, r5
 800a268:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a26c:	19a7      	adds	r7, r4, r6
 800a26e:	4297      	cmp	r7, r2
 800a270:	bfde      	ittt	le
 800a272:	19bc      	addle	r4, r7, r6
 800a274:	1bd2      	suble	r2, r2, r7
 800a276:	19ad      	addle	r5, r5, r6
 800a278:	0fcf      	lsrs	r7, r1, #31
 800a27a:	3b01      	subs	r3, #1
 800a27c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a280:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a284:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a288:	d1f0      	bne.n	800a26c <__ieee754_sqrt+0x94>
 800a28a:	f04f 0c20 	mov.w	ip, #32
 800a28e:	469e      	mov	lr, r3
 800a290:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a294:	42a2      	cmp	r2, r4
 800a296:	eb06 070e 	add.w	r7, r6, lr
 800a29a:	dc02      	bgt.n	800a2a2 <__ieee754_sqrt+0xca>
 800a29c:	d112      	bne.n	800a2c4 <__ieee754_sqrt+0xec>
 800a29e:	428f      	cmp	r7, r1
 800a2a0:	d810      	bhi.n	800a2c4 <__ieee754_sqrt+0xec>
 800a2a2:	2f00      	cmp	r7, #0
 800a2a4:	eb07 0e06 	add.w	lr, r7, r6
 800a2a8:	da42      	bge.n	800a330 <__ieee754_sqrt+0x158>
 800a2aa:	f1be 0f00 	cmp.w	lr, #0
 800a2ae:	db3f      	blt.n	800a330 <__ieee754_sqrt+0x158>
 800a2b0:	f104 0801 	add.w	r8, r4, #1
 800a2b4:	1b12      	subs	r2, r2, r4
 800a2b6:	428f      	cmp	r7, r1
 800a2b8:	bf88      	it	hi
 800a2ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a2be:	1bc9      	subs	r1, r1, r7
 800a2c0:	4433      	add	r3, r6
 800a2c2:	4644      	mov	r4, r8
 800a2c4:	0052      	lsls	r2, r2, #1
 800a2c6:	f1bc 0c01 	subs.w	ip, ip, #1
 800a2ca:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a2ce:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a2d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a2d6:	d1dd      	bne.n	800a294 <__ieee754_sqrt+0xbc>
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	d006      	beq.n	800a2ea <__ieee754_sqrt+0x112>
 800a2dc:	1c5c      	adds	r4, r3, #1
 800a2de:	bf13      	iteet	ne
 800a2e0:	3301      	addne	r3, #1
 800a2e2:	3501      	addeq	r5, #1
 800a2e4:	4663      	moveq	r3, ip
 800a2e6:	f023 0301 	bicne.w	r3, r3, #1
 800a2ea:	106a      	asrs	r2, r5, #1
 800a2ec:	085b      	lsrs	r3, r3, #1
 800a2ee:	07e9      	lsls	r1, r5, #31
 800a2f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a2f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a2f8:	bf48      	it	mi
 800a2fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a2fe:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a302:	461c      	mov	r4, r3
 800a304:	e780      	b.n	800a208 <__ieee754_sqrt+0x30>
 800a306:	0aca      	lsrs	r2, r1, #11
 800a308:	3815      	subs	r0, #21
 800a30a:	0549      	lsls	r1, r1, #21
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	d0fa      	beq.n	800a306 <__ieee754_sqrt+0x12e>
 800a310:	02d6      	lsls	r6, r2, #11
 800a312:	d50a      	bpl.n	800a32a <__ieee754_sqrt+0x152>
 800a314:	f1c3 0420 	rsb	r4, r3, #32
 800a318:	fa21 f404 	lsr.w	r4, r1, r4
 800a31c:	1e5d      	subs	r5, r3, #1
 800a31e:	4099      	lsls	r1, r3
 800a320:	4322      	orrs	r2, r4
 800a322:	1b43      	subs	r3, r0, r5
 800a324:	e78b      	b.n	800a23e <__ieee754_sqrt+0x66>
 800a326:	4618      	mov	r0, r3
 800a328:	e7f0      	b.n	800a30c <__ieee754_sqrt+0x134>
 800a32a:	0052      	lsls	r2, r2, #1
 800a32c:	3301      	adds	r3, #1
 800a32e:	e7ef      	b.n	800a310 <__ieee754_sqrt+0x138>
 800a330:	46a0      	mov	r8, r4
 800a332:	e7bf      	b.n	800a2b4 <__ieee754_sqrt+0xdc>
 800a334:	7ff00000 	.word	0x7ff00000

0800a338 <fabs>:
 800a338:	ec51 0b10 	vmov	r0, r1, d0
 800a33c:	ee10 2a10 	vmov	r2, s0
 800a340:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a344:	ec43 2b10 	vmov	d0, r2, r3
 800a348:	4770      	bx	lr

0800a34a <matherr>:
 800a34a:	2000      	movs	r0, #0
 800a34c:	4770      	bx	lr
	...

0800a350 <nan>:
 800a350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a358 <nan+0x8>
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	00000000 	.word	0x00000000
 800a35c:	7ff80000 	.word	0x7ff80000

0800a360 <_init>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr

0800a36c <_fini>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	bf00      	nop
 800a370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a372:	bc08      	pop	{r3}
 800a374:	469e      	mov	lr, r3
 800a376:	4770      	bx	lr
